
Serial_Printer_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006454  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c5c  08006c5c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c64  08006c64  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d6c  20000094  08006d00  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e00  08006d00  00022e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b412  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a6  00000000  00000000  0002b4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e509  00000000  00000000  0002e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d87f  00000000  00000000  0004cdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2834  00000000  00000000  0005a650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ce84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003240  00000000  00000000  0010ced4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000094 	.word	0x20000094
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080065c0 	.word	0x080065c0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000098 	.word	0x20000098
 80001c0:	080065c0 	.word	0x080065c0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <GetSector>:
 * @brief Gets the sector of a given address
 * @param None
 * @retval The sector of a given address
 */
uint32_t GetSector(uint32_t Address)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 uint32_t sector = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]

 if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a44      	ldr	r2, [pc, #272]	; (80005ec <GetSector+0x120>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d206      	bcs.n	80004ee <GetSector+0x22>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80004e6:	d302      	bcc.n	80004ee <GetSector+0x22>
 {
   sector = FLASH_SECTOR_0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	e077      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a3f      	ldr	r2, [pc, #252]	; (80005f0 <GetSector+0x124>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d206      	bcs.n	8000504 <GetSector+0x38>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a3c      	ldr	r2, [pc, #240]	; (80005ec <GetSector+0x120>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d302      	bcc.n	8000504 <GetSector+0x38>
 {
   sector = FLASH_SECTOR_1;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e06c      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a3b      	ldr	r2, [pc, #236]	; (80005f4 <GetSector+0x128>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d206      	bcs.n	800051a <GetSector+0x4e>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a38      	ldr	r2, [pc, #224]	; (80005f0 <GetSector+0x124>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d302      	bcc.n	800051a <GetSector+0x4e>
 {
   sector = FLASH_SECTOR_2;
 8000514:	2302      	movs	r3, #2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e061      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a36      	ldr	r2, [pc, #216]	; (80005f8 <GetSector+0x12c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d806      	bhi.n	8000530 <GetSector+0x64>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <GetSector+0x128>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d302      	bcc.n	8000530 <GetSector+0x64>
 {
   sector = FLASH_SECTOR_3;
 800052a:	2303      	movs	r3, #3
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e056      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a32      	ldr	r2, [pc, #200]	; (80005fc <GetSector+0x130>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d806      	bhi.n	8000546 <GetSector+0x7a>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a2f      	ldr	r2, [pc, #188]	; (80005f8 <GetSector+0x12c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d902      	bls.n	8000546 <GetSector+0x7a>
 {
   sector = FLASH_SECTOR_4;
 8000540:	2304      	movs	r3, #4
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e04b      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <GetSector+0x134>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d806      	bhi.n	800055c <GetSector+0x90>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <GetSector+0x130>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d902      	bls.n	800055c <GetSector+0x90>
 {
   sector = FLASH_SECTOR_5;
 8000556:	2305      	movs	r3, #5
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e040      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a29      	ldr	r2, [pc, #164]	; (8000604 <GetSector+0x138>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d806      	bhi.n	8000572 <GetSector+0xa6>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a26      	ldr	r2, [pc, #152]	; (8000600 <GetSector+0x134>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d902      	bls.n	8000572 <GetSector+0xa6>
 {
   sector = FLASH_SECTOR_6;
 800056c:	2306      	movs	r3, #6
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e035      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a24      	ldr	r2, [pc, #144]	; (8000608 <GetSector+0x13c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d806      	bhi.n	8000588 <GetSector+0xbc>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <GetSector+0x138>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d902      	bls.n	8000588 <GetSector+0xbc>
 {
   sector = FLASH_SECTOR_7;
 8000582:	2307      	movs	r3, #7
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e02a      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <GetSector+0x140>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d806      	bhi.n	800059e <GetSector+0xd2>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <GetSector+0x13c>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d902      	bls.n	800059e <GetSector+0xd2>
 {
   sector = FLASH_SECTOR_8;
 8000598:	2308      	movs	r3, #8
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e01f      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <GetSector+0x144>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d806      	bhi.n	80005b4 <GetSector+0xe8>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <GetSector+0x140>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d902      	bls.n	80005b4 <GetSector+0xe8>
 {
   sector = FLASH_SECTOR_9;
 80005ae:	2309      	movs	r3, #9
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e014      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <GetSector+0x148>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d806      	bhi.n	80005ca <GetSector+0xfe>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <GetSector+0x144>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d902      	bls.n	80005ca <GetSector+0xfe>
 {
   sector = FLASH_SECTOR_10;
 80005c4:	230a      	movs	r3, #10
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e009      	b.n	80005de <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80005d0:	d205      	bcs.n	80005de <GetSector+0x112>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <GetSector+0x148>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d901      	bls.n	80005de <GetSector+0x112>
 {
   sector = FLASH_SECTOR_11;
 80005da:	230b      	movs	r3, #11
 80005dc:	60fb      	str	r3, [r7, #12]
 }

 return sector;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	08004000 	.word	0x08004000
 80005f0:	08008000 	.word	0x08008000
 80005f4:	0800c000 	.word	0x0800c000
 80005f8:	0800ffff 	.word	0x0800ffff
 80005fc:	0801ffff 	.word	0x0801ffff
 8000600:	0803ffff 	.word	0x0803ffff
 8000604:	0805ffff 	.word	0x0805ffff
 8000608:	0807ffff 	.word	0x0807ffff
 800060c:	0809ffff 	.word	0x0809ffff
 8000610:	080bffff 	.word	0x080bffff
 8000614:	080dffff 	.word	0x080dffff

08000618 <Flash_Erase_sector>:
/**
 * flash_erease_sector
 * xóa hết 1 sector
 */
void Flash_Erase_sector(uint32_t StartSectorAddress)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t SECTORError;
	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000620:	f002 fd5e 	bl	80030e0 <HAL_FLASH_Unlock>
	  /* Erase the user Flash area*/
	   /* (xác định bởi FLASH_USER_START_ADDR và FLASH_USER_END_ADDR)*/

	  /* Get the number of sector to erase from 1st sector */

      uint32_t StartSector = GetSector(StartSectorAddress);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff51 	bl	80004cc <GetSector>
 800062a:	60f8      	str	r0, [r7, #12]
//	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
//	  uint32_t EndSector = GetSector(EndSectorAddress);


	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <Flash_Erase_sector+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <Flash_Erase_sector+0x50>)
 8000634:	2202      	movs	r2, #2
 8000636:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <Flash_Erase_sector+0x50>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6093      	str	r3, [r2, #8]
//	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
	  EraseInitStruct.NbSectors     = 1;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <Flash_Erase_sector+0x50>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	4619      	mov	r1, r3
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <Flash_Erase_sector+0x50>)
 800064c:	f002 feb0 	bl	80033b0 <HAL_FLASHEx_Erase>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <Flash_Erase_sector+0x44>
	  {
//		  USBD_UsrLog("HAL_FLASH_GetError");
		  return HAL_FLASH_GetError ();
 8000656:	f002 fd75 	bl	8003144 <HAL_FLASH_GetError>
 800065a:	e001      	b.n	8000660 <Flash_Erase_sector+0x48>
	  }

	  HAL_FLASH_Lock();
 800065c:	f002 fd62 	bl	8003124 <HAL_FLASH_Lock>
}
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000b0 	.word	0x200000b0

0800066c <Flash_Erase_sector_leng>:
/**
 * flash_erease_sector
 * xóa hết sector  chứa chiều dài
 */
void Flash_Erase_sector_leng(uint32_t StartSectorAddress, uint16_t numberofwords)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t SECTORError;
	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000678:	f002 fd32 	bl	80030e0 <HAL_FLASH_Unlock>
	  /* Erase the user Flash area*/
	   /* (xác định bởi FLASH_USER_START_ADDR và FLASH_USER_END_ADDR)*/

	  /* Get the number of sector to erase from 1st sector */

      uint32_t StartSector = GetSector(StartSectorAddress);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff25 	bl	80004cc <GetSector>
 8000682:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8000690:	6938      	ldr	r0, [r7, #16]
 8000692:	f7ff ff1b 	bl	80004cc <GetSector>
 8000696:	60f8      	str	r0, [r7, #12]


	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <Flash_Erase_sector_leng+0x6c>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <Flash_Erase_sector_leng+0x6c>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <Flash_Erase_sector_leng+0x6c>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <Flash_Erase_sector_leng+0x6c>)
 80006b4:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4619      	mov	r1, r3
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <Flash_Erase_sector_leng+0x6c>)
 80006be:	f002 fe77 	bl	80033b0 <HAL_FLASHEx_Erase>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <Flash_Erase_sector_leng+0x62>
	  {
//		  USBD_UsrLog("HAL_FLASH_GetError");
		  return HAL_FLASH_GetError ();
 80006c8:	f002 fd3c 	bl	8003144 <HAL_FLASH_GetError>
 80006cc:	e001      	b.n	80006d2 <Flash_Erase_sector_leng+0x66>
	  }

	  HAL_FLASH_Lock();
 80006ce:	f002 fd29 	bl	8003124 <HAL_FLASH_Lock>
}
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c4 	.word	0x200000c4

080006dc <Flash_Write_Data>:
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD  , addr + i , data[i]|((uint16_t)data[i+1]<<8));
//	}
//}

uint32_t Flash_Write_Data(uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]

	int sofar=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80006ee:	f002 fcf7 	bl	80030e0 <HAL_FLASH_Unlock>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
//	  __HAL_FLASH_CLEAR_FLAG(HAL_FLASH_ERROR_PGP);
	   while (sofar<numberofwords)
 80006f2:	e01c      	b.n	800072e <Flash_Write_Data+0x52>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	4413      	add	r3, r2
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2200      	movs	r2, #0
 8000700:	461c      	mov	r4, r3
 8000702:	4615      	mov	r5, r2
 8000704:	4622      	mov	r2, r4
 8000706:	462b      	mov	r3, r5
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	2002      	movs	r0, #2
 800070c:	f002 fc94 	bl	8003038 <HAL_FLASH_Program>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d106      	bne.n	8000724 <Flash_Write_Data+0x48>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3304      	adds	r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e004      	b.n	800072e <Flash_Write_Data+0x52>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 uint32_t e =  HAL_FLASH_GetError ();
 8000724:	f002 fd0e 	bl	8003144 <HAL_FLASH_GetError>
 8000728:	6138      	str	r0, [r7, #16]
	    	 return e;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	e006      	b.n	800073c <Flash_Write_Data+0x60>
	   while (sofar<numberofwords)
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	429a      	cmp	r2, r3
 8000734:	dbde      	blt.n	80006f4 <Flash_Write_Data+0x18>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000736:	f002 fcf5 	bl	8003124 <HAL_FLASH_Lock>

	   return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}

08000744 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data(uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	4613      	mov	r3, r2
 8000750:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3304      	adds	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3304      	adds	r3, #4
 8000764:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	1e5a      	subs	r2, r3, #1
 800076a:	80fa      	strh	r2, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d000      	beq.n	8000772 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000770:	e7ef      	b.n	8000752 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000772:	bf00      	nop
	}
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <convertdata>:

void convertdata(uint32_t data, uint8_t *pData)
{
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
	//xx yy zz tt
	uint32_t datatam = data;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60fb      	str	r3, [r7, #12]

	pData[0] =(uint8_t) (datatam  & 0x000000ff);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	701a      	strb	r2, [r3, #0]
	datatam = datatam>>8;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	60fb      	str	r3, [r7, #12]
	pData[1] =(uint8_t) (datatam  & 0x000000ff);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	701a      	strb	r2, [r3, #0]
	datatam = datatam>>8;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	0a1b      	lsrs	r3, r3, #8
 80007a8:	60fb      	str	r3, [r7, #12]
	pData[2] =(uint8_t) (datatam  & 0x000000ff);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	701a      	strb	r2, [r3, #0]
	datatam = datatam>>8;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	60fb      	str	r3, [r7, #12]
	pData[3] =(uint8_t) (datatam  & 0x000000ff);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3303      	adds	r3, #3
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	701a      	strb	r2, [r3, #0]

}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
	...

080007d0 <select_command_pair>:
int selected_end_len = 0;
int selected_end_index = 0;

// Hàm chọn cặp lệnh bắt đầu và kết thúc
void select_command_pair(int index)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    if (index < 0 || index >= NUM_START_COMMANDS || index >= NUM_END_SIGNATURES) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db05      	blt.n	80007ea <select_command_pair+0x1a>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d802      	bhi.n	80007ea <select_command_pair+0x1a>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d90f      	bls.n	800080a <select_command_pair+0x3a>
        // Xử lý khi index không hợp lệ, có thể log lỗi hoặc thiết lập giá trị mặc định
        selected_start_cmd = START_PRINT_COMMANDS_DEFAULT;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <select_command_pair+0x80>)
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <select_command_pair+0x84>)
 80007ee:	601a      	str	r2, [r3, #0]
        selected_end_sig = END_PRINT_SIGNATURES_DEFAULT;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <select_command_pair+0x88>)
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <select_command_pair+0x84>)
 80007f4:	601a      	str	r2, [r3, #0]
        selected_start_len = START_COMMAND_LENGTHS_DEFAULT;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <select_command_pair+0x8c>)
 80007f8:	2203      	movs	r2, #3
 80007fa:	601a      	str	r2, [r3, #0]
        selected_end_len = END_SIGNATURE_LENGTHS_DEFAULT;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <select_command_pair+0x90>)
 80007fe:	2203      	movs	r2, #3
 8000800:	601a      	str	r2, [r3, #0]
        selected_end_index = END_SIGNATURE_INDICES_DEFAULT;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <select_command_pair+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
        return;
 8000808:	e01d      	b.n	8000846 <select_command_pair+0x76>
    }
    // Lấy lệnh bắt đầu và kết thúc cùng độ dài từ các mảng macro
    selected_start_cmd = START_PRINT_COMMANDS[index];
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <select_command_pair+0x98>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <select_command_pair+0x80>)
 8000814:	6013      	str	r3, [r2, #0]
    selected_end_sig = END_PRINT_SIGNATURES[index];
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <select_command_pair+0x9c>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <select_command_pair+0x88>)
 8000820:	6013      	str	r3, [r2, #0]
    selected_start_len = START_COMMAND_LENGTHS[index];
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <select_command_pair+0xa0>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <select_command_pair+0x8c>)
 800082c:	6013      	str	r3, [r2, #0]
    selected_end_len = END_SIGNATURE_LENGTHS[index];
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <select_command_pair+0xa4>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <select_command_pair+0x90>)
 8000838:	6013      	str	r3, [r2, #0]
    selected_end_index = END_SIGNATURE_INDICES[index];  // Cập nhật chỉ số kết thúc từ mảng
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <select_command_pair+0xa8>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <select_command_pair+0x94>)
 8000844:	6013      	str	r3, [r2, #0]
}
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200000d8 	.word	0x200000d8
 8000854:	080065e8 	.word	0x080065e8
 8000858:	200000e0 	.word	0x200000e0
 800085c:	200000dc 	.word	0x200000dc
 8000860:	200000e4 	.word	0x200000e4
 8000864:	200000e8 	.word	0x200000e8
 8000868:	20000000 	.word	0x20000000
 800086c:	20000010 	.word	0x20000010
 8000870:	08006b7c 	.word	0x08006b7c
 8000874:	08006b8c 	.word	0x08006b8c
 8000878:	08006b9c 	.word	0x08006b9c

0800087c <check_start_condition>:

// Hàm kiểm tra điều kiện bắt đầu
static int check_start_condition(const uint8_t *data, int length)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    if (length >= selected_start_len && memcmp(data, selected_start_cmd, selected_start_len) == 0) {
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <check_start_condition+0x38>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	db0c      	blt.n	80008aa <check_start_condition+0x2e>
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <check_start_condition+0x3c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <check_start_condition+0x38>)
 8000896:	6812      	ldr	r2, [r2, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f004 fc36 	bl	800510c <memcmp>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <check_start_condition+0x2e>
        return 1; // Điều kiện bắt đầu in thỏa mãn
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <check_start_condition+0x30>
    }
    return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000dc 	.word	0x200000dc
 80008b8:	200000d8 	.word	0x200000d8

080008bc <check_end_condition>:

// Hàm kiểm tra điều kiện kết thúc
static int check_end_condition(const uint8_t *data, int length)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
    if (length >= selected_end_len && memcmp(&data[length - selected_end_index], selected_end_sig, selected_end_len) == 0) {
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <check_end_condition+0x44>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	db12      	blt.n	80008f6 <check_end_condition+0x3a>
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <check_end_condition+0x48>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <check_end_condition+0x4c>)
 80008e0:	6811      	ldr	r1, [r2, #0]
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <check_end_condition+0x44>)
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fc10 	bl	800510c <memcmp>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <check_end_condition+0x3a>
        return 1; // Điều kiện kết thúc in thỏa mãn
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <check_end_condition+0x3c>
#if (0)
    else if (length >= 0 && length < 64 && memcmp(END_PRINT_SIGNATURES_DEFAULT, selected_end_sig, selected_end_len) == 0) {
        return 1; // Điều kiện kết thúc in thỏa mãn
    }
#endif
    return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000e4 	.word	0x200000e4
 8000904:	200000e8 	.word	0x200000e8
 8000908:	200000e0 	.word	0x200000e0

0800090c <initialize_command_pair>:


// Gọi hàm select_command_pair tại một điểm khởi tạo trong chương trình
void initialize_command_pair(int command_pair_index)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    select_command_pair(command_pair_index);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff5b 	bl	80007d0 <select_command_pair>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc (int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);
 800092c:	1d39      	adds	r1, r7, #4
 800092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000932:	2201      	movs	r2, #1
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <__io_putchar+0x20>)
 8000936:	f003 fcbd 	bl	80042b4 <HAL_UART_Transmit>

return ch;
 800093a:	687b      	ldr	r3, [r7, #4]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000ec 	.word	0x200000ec

08000948 <PrintUart3Data>:

uint32_t ui32_counter_send_status =0 ;

#if 1
void PrintUart3Data(uint8_t* data, uint16_t size)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
	for (int j = 0; j < size; j++)
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e148      	b.n	8000bec <PrintUart3Data+0x2a4>
	{
		switch (data[j])
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b5f      	cmp	r3, #95	; 0x5f
 8000964:	f000 80e7 	beq.w	8000b36 <PrintUart3Data+0x1ee>
 8000968:	2b5f      	cmp	r3, #95	; 0x5f
 800096a:	f300 8131 	bgt.w	8000bd0 <PrintUart3Data+0x288>
 800096e:	2b5c      	cmp	r3, #92	; 0x5c
 8000970:	d077      	beq.n	8000a62 <PrintUart3Data+0x11a>
 8000972:	2b5c      	cmp	r3, #92	; 0x5c
 8000974:	f300 812c 	bgt.w	8000bd0 <PrintUart3Data+0x288>
 8000978:	2b3c      	cmp	r3, #60	; 0x3c
 800097a:	d008      	beq.n	800098e <PrintUart3Data+0x46>
 800097c:	2b3c      	cmp	r3, #60	; 0x3c
 800097e:	f300 8127 	bgt.w	8000bd0 <PrintUart3Data+0x288>
 8000982:	2b14      	cmp	r3, #20
 8000984:	d038      	beq.n	80009f8 <PrintUart3Data+0xb0>
 8000986:	2b1c      	cmp	r3, #28
 8000988:	f000 80a0 	beq.w	8000acc <PrintUart3Data+0x184>

            	ui8_printer_status =1;
            }
            break;
		default:
			break;
 800098c:	e120      	b.n	8000bd0 <PrintUart3Data+0x288>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3301      	adds	r3, #1
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d111      	bne.n	80009c0 <PrintUart3Data+0x78>
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3302      	adds	r3, #2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10a      	bne.n	80009c0 <PrintUart3Data+0x78>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3303      	adds	r3, #3
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d103      	bne.n	80009c0 <PrintUart3Data+0x78>
				printf("(Read Data): Mo nap may\n");
 80009b8:	4892      	ldr	r0, [pc, #584]	; (8000c04 <PrintUart3Data+0x2bc>)
 80009ba:	f004 fc67 	bl	800528c <puts>
			break;
 80009be:	e109      	b.n	8000bd4 <PrintUart3Data+0x28c>
			else if(data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f040 8102 	bne.w	8000bd4 <PrintUart3Data+0x28c>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3302      	adds	r3, #2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	f040 80fa 	bne.w	8000bd4 <PrintUart3Data+0x28c>
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3303      	adds	r3, #3
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	f040 80f2 	bne.w	8000bd4 <PrintUart3Data+0x28c>
				printf("(Read Data): Mo nap may (PAPER OUT)\n");
 80009f0:	4885      	ldr	r0, [pc, #532]	; (8000c08 <PrintUart3Data+0x2c0>)
 80009f2:	f004 fc4b 	bl	800528c <puts>
			break;
 80009f6:	e0ed      	b.n	8000bd4 <PrintUart3Data+0x28c>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d111      	bne.n	8000a2a <PrintUart3Data+0xe2>
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10a      	bne.n	8000a2a <PrintUart3Data+0xe2>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3303      	adds	r3, #3
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d103      	bne.n	8000a2a <PrintUart3Data+0xe2>
				printf("(Read Data): Dong nap may\n");
 8000a22:	487a      	ldr	r0, [pc, #488]	; (8000c0c <PrintUart3Data+0x2c4>)
 8000a24:	f004 fc32 	bl	800528c <puts>
			break;
 8000a28:	e0d6      	b.n	8000bd8 <PrintUart3Data+0x290>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f040 80cf 	bne.w	8000bd8 <PrintUart3Data+0x290>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	f040 80c7 	bne.w	8000bd8 <PrintUart3Data+0x290>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3303      	adds	r3, #3
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	f040 80bf 	bne.w	8000bd8 <PrintUart3Data+0x290>
				printf("(Read Data): Dong nap may (PAPER OUT)\n");
 8000a5a:	486d      	ldr	r0, [pc, #436]	; (8000c10 <PrintUart3Data+0x2c8>)
 8000a5c:	f004 fc16 	bl	800528c <puts>
			break;
 8000a60:	e0ba      	b.n	8000bd8 <PrintUart3Data+0x290>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d111      	bne.n	8000a94 <PrintUart3Data+0x14c>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3302      	adds	r3, #2
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10a      	bne.n	8000a94 <PrintUart3Data+0x14c>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3303      	adds	r3, #3
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d103      	bne.n	8000a94 <PrintUart3Data+0x14c>
				printf("(Read Data): FEED\n");
 8000a8c:	4861      	ldr	r0, [pc, #388]	; (8000c14 <PrintUart3Data+0x2cc>)
 8000a8e:	f004 fbfd 	bl	800528c <puts>
			break;
 8000a92:	e0a3      	b.n	8000bdc <PrintUart3Data+0x294>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 809c 	bne.w	8000bdc <PrintUart3Data+0x294>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	f040 8094 	bne.w	8000bdc <PrintUart3Data+0x294>
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	f040 808c 	bne.w	8000bdc <PrintUart3Data+0x294>
				printf("(Read Data): FEED (PAPER OUT)\n");
 8000ac4:	4854      	ldr	r0, [pc, #336]	; (8000c18 <PrintUart3Data+0x2d0>)
 8000ac6:	f004 fbe1 	bl	800528c <puts>
			break;
 8000aca:	e087      	b.n	8000bdc <PrintUart3Data+0x294>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d114      	bne.n	8000b04 <PrintUart3Data+0x1bc>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3302      	adds	r3, #2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10d      	bne.n	8000b04 <PrintUart3Data+0x1bc>
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3303      	adds	r3, #3
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d106      	bne.n	8000b04 <PrintUart3Data+0x1bc>
				printf("(Read Data): Turn off machine\n");
 8000af6:	4849      	ldr	r0, [pc, #292]	; (8000c1c <PrintUart3Data+0x2d4>)
 8000af8:	f004 fbc8 	bl	800528c <puts>
				ui8_printer_status =0;
 8000afc:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <PrintUart3Data+0x2d8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
			break;
 8000b02:	e06d      	b.n	8000be0 <PrintUart3Data+0x298>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d166      	bne.n	8000be0 <PrintUart3Data+0x298>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3302      	adds	r3, #2
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d15f      	bne.n	8000be0 <PrintUart3Data+0x298>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3303      	adds	r3, #3
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d158      	bne.n	8000be0 <PrintUart3Data+0x298>
				printf("(Read Data): Turn off machine (PAPER OUT)\n");
 8000b2e:	483d      	ldr	r0, [pc, #244]	; (8000c24 <PrintUart3Data+0x2dc>)
 8000b30:	f004 fbac 	bl	800528c <puts>
			break;
 8000b34:	e054      	b.n	8000be0 <PrintUart3Data+0x298>
            if (data[j+1] == 0x54 && data[j+2] == 0x4d && data[j+3] == 0x2d && data[j+4] == 0x54 &&
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b54      	cmp	r3, #84	; 0x54
 8000b42:	d14f      	bne.n	8000be4 <PrintUart3Data+0x29c>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3302      	adds	r3, #2
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b4d      	cmp	r3, #77	; 0x4d
 8000b50:	d148      	bne.n	8000be4 <PrintUart3Data+0x29c>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3303      	adds	r3, #3
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b2d      	cmp	r3, #45	; 0x2d
 8000b5e:	d141      	bne.n	8000be4 <PrintUart3Data+0x29c>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3304      	adds	r3, #4
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b54      	cmp	r3, #84	; 0x54
 8000b6c:	d13a      	bne.n	8000be4 <PrintUart3Data+0x29c>
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3305      	adds	r3, #5
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
            if (data[j+1] == 0x54 && data[j+2] == 0x4d && data[j+3] == 0x2d && data[j+4] == 0x54 &&
 8000b78:	2b38      	cmp	r3, #56	; 0x38
 8000b7a:	d133      	bne.n	8000be4 <PrintUart3Data+0x29c>
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3306      	adds	r3, #6
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b38      	cmp	r3, #56	; 0x38
 8000b88:	d12c      	bne.n	8000be4 <PrintUart3Data+0x29c>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3307      	adds	r3, #7
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b49      	cmp	r3, #73	; 0x49
 8000b96:	d125      	bne.n	8000be4 <PrintUart3Data+0x29c>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b49      	cmp	r3, #73	; 0x49
 8000ba4:	d11e      	bne.n	8000be4 <PrintUart3Data+0x29c>
                data[j+9] == 0x49 && data[j+10] == 0x00)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3309      	adds	r3, #9
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 8000bb0:	2b49      	cmp	r3, #73	; 0x49
 8000bb2:	d117      	bne.n	8000be4 <PrintUart3Data+0x29c>
                data[j+9] == 0x49 && data[j+10] == 0x00)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	330a      	adds	r3, #10
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d110      	bne.n	8000be4 <PrintUart3Data+0x29c>
            	printf("(Read Data): _TM-T88III.\n");
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <PrintUart3Data+0x2e0>)
 8000bc4:	f004 fb62 	bl	800528c <puts>
            	ui8_printer_status =1;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <PrintUart3Data+0x2d8>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
            break;
 8000bce:	e009      	b.n	8000be4 <PrintUart3Data+0x29c>
			break;
 8000bd0:	bf00      	nop
 8000bd2:	e008      	b.n	8000be6 <PrintUart3Data+0x29e>
			break;
 8000bd4:	bf00      	nop
 8000bd6:	e006      	b.n	8000be6 <PrintUart3Data+0x29e>
			break;
 8000bd8:	bf00      	nop
 8000bda:	e004      	b.n	8000be6 <PrintUart3Data+0x29e>
			break;
 8000bdc:	bf00      	nop
 8000bde:	e002      	b.n	8000be6 <PrintUart3Data+0x29e>
			break;
 8000be0:	bf00      	nop
 8000be2:	e000      	b.n	8000be6 <PrintUart3Data+0x29e>
            break;
 8000be4:	bf00      	nop
	for (int j = 0; j < size; j++)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	f6ff aeb2 	blt.w	800095a <PrintUart3Data+0x12>
		}
	}
	printf("\n");
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f004 fac6 	bl	8005188 <putchar>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	080065fc 	.word	0x080065fc
 8000c08:	08006614 	.word	0x08006614
 8000c0c:	08006638 	.word	0x08006638
 8000c10:	08006654 	.word	0x08006654
 8000c14:	0800667c 	.word	0x0800667c
 8000c18:	08006690 	.word	0x08006690
 8000c1c:	080066b0 	.word	0x080066b0
 8000c20:	20001a42 	.word	0x20001a42
 8000c24:	080066d0 	.word	0x080066d0
 8000c28:	080066fc 	.word	0x080066fc

08000c2c <wait_res_init>:
#endif

void wait_res_init(uint32_t timeout_wait_)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	ui32_timerxset = HAL_GetTick() + timeout_wait_;
 8000c34:	f002 f858 	bl	8002ce8 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <wait_res_init+0x24>)
 8000c40:	6013      	str	r3, [r2, #0]
	ui8_status_esp =1U;
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <wait_res_init+0x28>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20001a50 	.word	0x20001a50
 8000c54:	20001a4c 	.word	0x20001a4c

08000c58 <xuly_package_ESP>:

void xuly_package_ESP()
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0

 #F n$
 	 F: xóa flash
 	 n = 1 : xóa
 */
	if (quanlyESP.str[1] == 'G')
 8000c5e:	4b7c      	ldr	r3, [pc, #496]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000c60:	78db      	ldrb	r3, [r3, #3]
 8000c62:	2b47      	cmp	r3, #71	; 0x47
 8000c64:	d121      	bne.n	8000caa <xuly_package_ESP+0x52>
	{
		if (quanlyESP.str[3] == '1')
 8000c66:	4b7a      	ldr	r3, [pc, #488]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	2b31      	cmp	r3, #49	; 0x31
 8000c6c:	d106      	bne.n	8000c7c <xuly_package_ESP+0x24>
		{
			USBH_UsrLog("#CMD G1 Manufacture");
 8000c6e:	4879      	ldr	r0, [pc, #484]	; (8000e54 <xuly_package_ESP+0x1fc>)
 8000c70:	f004 fa72 	bl	8005158 <iprintf>
 8000c74:	200a      	movs	r0, #10
 8000c76:	f004 fa87 	bl	8005188 <putchar>
 8000c7a:	e167      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '2')
 8000c7c:	4b74      	ldr	r3, [pc, #464]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000c7e:	795b      	ldrb	r3, [r3, #5]
 8000c80:	2b32      	cmp	r3, #50	; 0x32
 8000c82:	d106      	bne.n	8000c92 <xuly_package_ESP+0x3a>
		{
			USBH_UsrLog("#CMD G2 Product");
 8000c84:	4874      	ldr	r0, [pc, #464]	; (8000e58 <xuly_package_ESP+0x200>)
 8000c86:	f004 fa67 	bl	8005158 <iprintf>
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f004 fa7c 	bl	8005188 <putchar>
 8000c90:	e15c      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '3')
 8000c92:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000c94:	795b      	ldrb	r3, [r3, #5]
 8000c96:	2b33      	cmp	r3, #51	; 0x33
 8000c98:	f040 8158 	bne.w	8000f4c <xuly_package_ESP+0x2f4>
		{
			USBH_UsrLog("#CMD G3 Serinumber");
 8000c9c:	486f      	ldr	r0, [pc, #444]	; (8000e5c <xuly_package_ESP+0x204>)
 8000c9e:	f004 fa5b 	bl	8005158 <iprintf>
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f004 fa70 	bl	8005188 <putchar>
 8000ca8:	e150      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
	}
	else if (quanlyESP.str[1] == 'R')
 8000caa:	4b69      	ldr	r3, [pc, #420]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000cac:	78db      	ldrb	r3, [r3, #3]
 8000cae:	2b52      	cmp	r3, #82	; 0x52
 8000cb0:	d137      	bne.n	8000d22 <xuly_package_ESP+0xca>
	{
		if (quanlyESP.str[3] == '0')
 8000cb2:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000cb4:	795b      	ldrb	r3, [r3, #5]
 8000cb6:	2b30      	cmp	r3, #48	; 0x30
 8000cb8:	d103      	bne.n	8000cc2 <xuly_package_ESP+0x6a>
		{
			ui8_status_esp =0U;/*ready*/
 8000cba:	4b69      	ldr	r3, [pc, #420]	; (8000e60 <xuly_package_ESP+0x208>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e144      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '1')
 8000cc2:	4b63      	ldr	r3, [pc, #396]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	2b31      	cmp	r3, #49	; 0x31
 8000cc8:	d103      	bne.n	8000cd2 <xuly_package_ESP+0x7a>
		{
			ui32_timerxset =0;// reset timeout
 8000cca:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <xuly_package_ESP+0x20c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e13c      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '2')
 8000cd2:	4b5f      	ldr	r3, [pc, #380]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000cd4:	795b      	ldrb	r3, [r3, #5]
 8000cd6:	2b32      	cmp	r3, #50	; 0x32
 8000cd8:	f040 8138 	bne.w	8000f4c <xuly_package_ESP+0x2f4>
		{
			ui32_timerxset =0;// reset timeout
 8000cdc:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <xuly_package_ESP+0x20c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]

			USBH_UsrLog(" resend package ");
 8000ce2:	4861      	ldr	r0, [pc, #388]	; (8000e68 <xuly_package_ESP+0x210>)
 8000ce4:	f004 fa38 	bl	8005158 <iprintf>
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f004 fa4d 	bl	8005188 <putchar>
			if (quanlyESP.index_pkg)
 8000cee:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <xuly_package_ESP+0xaa>
			{
				quanlyESP.index_pkg--;
 8000cf6:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000d00:	851a      	strh	r2, [r3, #40]	; 0x28
			}
			if (u32_addr_data_user >= lentosend)
 8000d02:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <xuly_package_ESP+0x214>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <xuly_package_ESP+0x218>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f200 811d 	bhi.w	8000f4c <xuly_package_ESP+0x2f4>
			{
				u32_addr_data_user -=lentosend;
 8000d12:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <xuly_package_ESP+0x218>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a55      	ldr	r2, [pc, #340]	; (8000e6c <xuly_package_ESP+0x214>)
 8000d18:	8812      	ldrh	r2, [r2, #0]
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	4a54      	ldr	r2, [pc, #336]	; (8000e70 <xuly_package_ESP+0x218>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e114      	b.n	8000f4c <xuly_package_ESP+0x2f4>
			}
		}
	}
	else if (quanlyESP.str[1] == 'T')
 8000d22:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000d24:	78db      	ldrb	r3, [r3, #3]
 8000d26:	2b54      	cmp	r3, #84	; 0x54
 8000d28:	d153      	bne.n	8000dd2 <xuly_package_ESP+0x17a>
	{
		if (quanlyESP.str[3] == '1')
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000d2c:	795b      	ldrb	r3, [r3, #5]
 8000d2e:	2b31      	cmp	r3, #49	; 0x31
 8000d30:	d115      	bne.n	8000d5e <xuly_package_ESP+0x106>
		{
			user_manage_request.number_printed++;
 8000d32:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <xuly_package_ESP+0x21c>)
 8000d34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <xuly_package_ESP+0x21c>)
 8000d3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			USBH_UsrLog(" test finish printed %d", user_manage_request.number_printed);
 8000d42:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <xuly_package_ESP+0x21c>)
 8000d44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d48:	4619      	mov	r1, r3
 8000d4a:	484b      	ldr	r0, [pc, #300]	; (8000e78 <xuly_package_ESP+0x220>)
 8000d4c:	f004 fa04 	bl	8005158 <iprintf>
 8000d50:	200a      	movs	r0, #10
 8000d52:	f004 fa19 	bl	8005188 <putchar>
			u32_addr_data_user =0U;
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <xuly_package_ESP+0x218>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e0f6      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '2')
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	2b32      	cmp	r3, #50	; 0x32
 8000d64:	d127      	bne.n	8000db6 <xuly_package_ESP+0x15e>
		{
			USBH_UsrLog(" test format flash ");
 8000d66:	4845      	ldr	r0, [pc, #276]	; (8000e7c <xuly_package_ESP+0x224>)
 8000d68:	f004 f9f6 	bl	8005158 <iprintf>
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f004 fa0b 	bl	8005188 <putchar>
			USBH_UsrLog("Format disk");
 8000d72:	4843      	ldr	r0, [pc, #268]	; (8000e80 <xuly_package_ESP+0x228>)
 8000d74:	f004 f9f0 	bl	8005158 <iprintf>
 8000d78:	200a      	movs	r0, #10
 8000d7a:	f004 fa05 	bl	8005188 <putchar>
				/*format disk*/
			Flash_Erase_sector(ADDR_FLASH_SECTOR_5);
 8000d7e:	4841      	ldr	r0, [pc, #260]	; (8000e84 <xuly_package_ESP+0x22c>)
 8000d80:	f7ff fc4a 	bl	8000618 <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_6);
 8000d84:	4840      	ldr	r0, [pc, #256]	; (8000e88 <xuly_package_ESP+0x230>)
 8000d86:	f7ff fc47 	bl	8000618 <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_7);
 8000d8a:	4840      	ldr	r0, [pc, #256]	; (8000e8c <xuly_package_ESP+0x234>)
 8000d8c:	f7ff fc44 	bl	8000618 <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_8);
 8000d90:	483f      	ldr	r0, [pc, #252]	; (8000e90 <xuly_package_ESP+0x238>)
 8000d92:	f7ff fc41 	bl	8000618 <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_9);
 8000d96:	483f      	ldr	r0, [pc, #252]	; (8000e94 <xuly_package_ESP+0x23c>)
 8000d98:	f7ff fc3e 	bl	8000618 <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_10);
 8000d9c:	483e      	ldr	r0, [pc, #248]	; (8000e98 <xuly_package_ESP+0x240>)
 8000d9e:	f7ff fc3b 	bl	8000618 <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_11);
 8000da2:	483e      	ldr	r0, [pc, #248]	; (8000e9c <xuly_package_ESP+0x244>)
 8000da4:	f7ff fc38 	bl	8000618 <Flash_Erase_sector>
			SERIAL_TO_SERVER("finished");
 8000da8:	483d      	ldr	r0, [pc, #244]	; (8000ea0 <xuly_package_ESP+0x248>)
 8000daa:	f004 f9d5 	bl	8005158 <iprintf>
 8000dae:	200a      	movs	r0, #10
 8000db0:	f004 f9ea 	bl	8005188 <putchar>
 8000db4:	e0ca      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '3')
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000db8:	795b      	ldrb	r3, [r3, #5]
 8000dba:	2b33      	cmp	r3, #51	; 0x33
 8000dbc:	f040 80c6 	bne.w	8000f4c <xuly_package_ESP+0x2f4>
		{
			USBH_UsrLog("test format");
 8000dc0:	4838      	ldr	r0, [pc, #224]	; (8000ea4 <xuly_package_ESP+0x24c>)
 8000dc2:	f004 f9c9 	bl	8005158 <iprintf>
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f004 f9de 	bl	8005188 <putchar>
			clear_flash();
 8000dcc:	f000 fd68 	bl	80018a0 <clear_flash>
 8000dd0:	e0bc      	b.n	8000f4c <xuly_package_ESP+0x2f4>
		}
	}
	else if (quanlyESP.str[1] == 'S')
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000dd4:	78db      	ldrb	r3, [r3, #3]
 8000dd6:	2b53      	cmp	r3, #83	; 0x53
 8000dd8:	f040 80b8 	bne.w	8000f4c <xuly_package_ESP+0x2f4>
	{
		if (quanlyESP.str[3] == '1')
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <xuly_package_ESP+0x1f8>)
 8000dde:	795b      	ldrb	r3, [r3, #5]
 8000de0:	2b31      	cmp	r3, #49	; 0x31
 8000de2:	d169      	bne.n	8000eb8 <xuly_package_ESP+0x260>
		{
			USBH_UsrLog("start sniff");
 8000de4:	4830      	ldr	r0, [pc, #192]	; (8000ea8 <xuly_package_ESP+0x250>)
 8000de6:	f004 f9b7 	bl	8005158 <iprintf>
 8000dea:	200a      	movs	r0, #10
 8000dec:	f004 f9cc 	bl	8005188 <putchar>

			/* thiết lập nhận data pringting */

			 int vitridoctin = pcommand->number_printed % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <xuly_package_ESP+0x254>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	603b      	str	r3, [r7, #0]

			 if(vitridoctin ==1)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <xuly_package_ESP+0x1be>
			 {
				 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR2;
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <xuly_package_ESP+0x254>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <xuly_package_ESP+0x258>)
 8000e0a:	615a      	str	r2, [r3, #20]
				 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR2;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	; (8000eac <xuly_package_ESP+0x254>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <xuly_package_ESP+0x23c>)
 8000e12:	619a      	str	r2, [r3, #24]
 8000e14:	e007      	b.n	8000e26 <xuly_package_ESP+0x1ce>
			 }
			 else
			 {
				 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <xuly_package_ESP+0x254>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <xuly_package_ESP+0x25c>)
 8000e1c:	615a      	str	r2, [r3, #20]
				 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <xuly_package_ESP+0x254>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <xuly_package_ESP+0x22c>)
 8000e24:	619a      	str	r2, [r3, #24]
			 }

			 pcommand->readytopausesniff =0U;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <xuly_package_ESP+0x254>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			 pcommand->data_print_size =0; //reset size
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <xuly_package_ESP+0x254>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
			 pcommand->chophepsniff =1U;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <xuly_package_ESP+0x254>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			 pcommand->timer_pausesniff = HAL_GetTick();
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <xuly_package_ESP+0x254>)
 8000e44:	681c      	ldr	r4, [r3, #0]
 8000e46:	f001 ff4f 	bl	8002ce8 <HAL_GetTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6563      	str	r3, [r4, #84]	; 0x54
 8000e4e:	e07d      	b.n	8000f4c <xuly_package_ESP+0x2f4>
 8000e50:	20000a18 	.word	0x20000a18
 8000e54:	08006718 	.word	0x08006718
 8000e58:	0800672c 	.word	0x0800672c
 8000e5c:	0800673c 	.word	0x0800673c
 8000e60:	20001a4c 	.word	0x20001a4c
 8000e64:	20001a50 	.word	0x20001a50
 8000e68:	08006750 	.word	0x08006750
 8000e6c:	200001c8 	.word	0x200001c8
 8000e70:	200001cc 	.word	0x200001cc
 8000e74:	20001a54 	.word	0x20001a54
 8000e78:	08006764 	.word	0x08006764
 8000e7c:	0800677c 	.word	0x0800677c
 8000e80:	08006790 	.word	0x08006790
 8000e84:	08020000 	.word	0x08020000
 8000e88:	08040000 	.word	0x08040000
 8000e8c:	08060000 	.word	0x08060000
 8000e90:	08080000 	.word	0x08080000
 8000e94:	080a0000 	.word	0x080a0000
 8000e98:	080c0000 	.word	0x080c0000
 8000e9c:	080e0000 	.word	0x080e0000
 8000ea0:	0800679c 	.word	0x0800679c
 8000ea4:	080067a8 	.word	0x080067a8
 8000ea8:	080067b4 	.word	0x080067b4
 8000eac:	20000020 	.word	0x20000020
 8000eb0:	080a0028 	.word	0x080a0028
 8000eb4:	08020028 	.word	0x08020028

		}
		else if (quanlyESP.str[3] == '2')
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <xuly_package_ESP+0x304>)
 8000eba:	795b      	ldrb	r3, [r3, #5]
 8000ebc:	2b32      	cmp	r3, #50	; 0x32
 8000ebe:	d145      	bne.n	8000f4c <xuly_package_ESP+0x2f4>
		{
			USBH_UsrLog("end sniff");
 8000ec0:	4827      	ldr	r0, [pc, #156]	; (8000f60 <xuly_package_ESP+0x308>)
 8000ec2:	f004 f949 	bl	8005158 <iprintf>
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f004 f95e 	bl	8005188 <putchar>
			pcommand->readytopausesniff =0U;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			pcommand->chophepsniff =0U;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			pcommand->ui8_startprint =0U;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	771a      	strb	r2, [r3, #28]
			pcommand->ui8_printing =0U;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	775a      	strb	r2, [r3, #29]
			pcommand->WAIT_SEND_TO_SERVER =1U;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	779a      	strb	r2, [r3, #30]
			pcommand->number_printed++;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000f00:	3201      	adds	r2, #1
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			uint32_t diachitam = pcommand->u32_addr_header_store;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	607b      	str	r3, [r7, #4]
			//chỉ có 1 gói duy nhất
			pcommand->package_index =1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2201      	movs	r2, #1
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24

			/* save total package */
			 Flash_Write_Data(diachitam, &pcommand->package_index, 1U);
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3324      	adds	r3, #36	; 0x24
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fbda 	bl	80006dc <Flash_Write_Data>

			 USBD_UsrLogCog(" total package = %ld \n", pcommand->package_index);
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <xuly_package_ESP+0x310>)
 8000f32:	f004 f911 	bl	8005158 <iprintf>

			 diachitam+=4;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	607b      	str	r3, [r7, #4]
			 /* save len package */
			Flash_Write_Data(diachitam, &pcommand->data_print_size, 1U);
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <xuly_package_ESP+0x30c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3310      	adds	r3, #16
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fbc8 	bl	80006dc <Flash_Write_Data>

		}
	}

	quanlyESP.busy =0;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <xuly_package_ESP+0x304>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	759a      	strb	r2, [r3, #22]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000a18 	.word	0x20000a18
 8000f60:	080067c0 	.word	0x080067c0
 8000f64:	20000020 	.word	0x20000020
 8000f68:	080067cc 	.word	0x080067cc

08000f6c <sosanhlenhfct>:

uint8_t sosanhlenhfct(USER_REQUESET_TypeDef *pmydata, int len, uint16_t *myRxDataLength)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
    uint8_t sosanhlenh = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	77fb      	strb	r3, [r7, #31]

    // Kiểm tra điều kiện bắt đầu hoặc kết thúc dựa trên trạng thái in
    if (pcommand->ui8_startprint == 0U)
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <sosanhlenhfct+0xf4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	7f1b      	ldrb	r3, [r3, #28]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10e      	bne.n	8000fa4 <sosanhlenhfct+0x38>
    {
        // Kiểm tra điều kiện bắt đầu in
        if (check_start_condition(pmydata->noidung_data, len))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fc75 	bl	800087c <check_start_condition>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d05e      	beq.n	8001056 <sosanhlenhfct+0xea>
        {
            sosanhlenh = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	77fb      	strb	r3, [r7, #31]
            USBD_UsrLogCog("\n start print 2\n");
 8000f9c:	4831      	ldr	r0, [pc, #196]	; (8001064 <sosanhlenhfct+0xf8>)
 8000f9e:	f004 f975 	bl	800528c <puts>
 8000fa2:	e058      	b.n	8001056 <sosanhlenhfct+0xea>
        }
    }
    else
    {
        // Kiểm tra điều kiện kết thúc in
        if (check_end_condition(pmydata->noidung_data, len))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc86 	bl	80008bc <check_end_condition>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d04f      	beq.n	8001056 <sosanhlenhfct+0xea>
        {
            /*  Kết thúc in */
            sosanhlenh = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	77fb      	strb	r3, [r7, #31]

            *myRxDataLength = len;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	801a      	strh	r2, [r3, #0]
            pcommand->data_print_size += *myRxDataLength;
 8000fc2:	4b27      	ldr	r3, [pc, #156]	; (8001060 <sosanhlenhfct+0xf4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <sosanhlenhfct+0xf4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	440a      	add	r2, r1
 8000fd4:	611a      	str	r2, [r3, #16]
            int numofwords = (*myRxDataLength / 4) + ((*myRxDataLength % 4) != 0);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bf14      	ite	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	2300      	moveq	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
            Flash_Write_Data(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, numofwords);
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <sosanhlenhfct+0xf4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6958      	ldr	r0, [r3, #20]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3302      	adds	r3, #2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	b292      	uxth	r2, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fb68 	bl	80006dc <Flash_Write_Data>
            pcommand->u32_addr_data_store += *myRxDataLength;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <sosanhlenhfct+0xf4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <sosanhlenhfct+0xf4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	440a      	add	r2, r1
 800101e:	615a      	str	r2, [r3, #20]

            uint8_t lastindex = pcommand->package_index;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <sosanhlenhfct+0xf4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	75fb      	strb	r3, [r7, #23]
            pcommand->chieudaitungfile[lastindex] = pcommand->data_print_size;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <sosanhlenhfct+0xf4>)
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <sosanhlenhfct+0xf4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	7dfa      	ldrb	r2, [r7, #23]
 8001032:	6909      	ldr	r1, [r1, #16]
 8001034:	320a      	adds	r2, #10
 8001036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            USBD_UsrLogCog(" save last = %d, len = %ld \n", lastindex, pcommand->chieudaitungfile[lastindex]);
 800103a:	7df9      	ldrb	r1, [r7, #23]
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <sosanhlenhfct+0xf4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	7dfa      	ldrb	r2, [r7, #23]
 8001042:	320a      	adds	r2, #10
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	461a      	mov	r2, r3
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <sosanhlenhfct+0xfc>)
 800104c:	f004 f884 	bl	8005158 <iprintf>

            USBD_UsrLogCog("\n end print 6\n");
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <sosanhlenhfct+0x100>)
 8001052:	f004 f91b 	bl	800528c <puts>
        }
    }

    return sosanhlenh;
 8001056:	7ffb      	ldrb	r3, [r7, #31]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000020 	.word	0x20000020
 8001064:	080067e4 	.word	0x080067e4
 8001068:	080067f4 	.word	0x080067f4
 800106c:	08006814 	.word	0x08006814

08001070 <kiemtra_request_tu_PC>:
	return sosanhlenh;
}
#endif

void kiemtra_request_tu_PC()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b092      	sub	sp, #72	; 0x48
 8001074:	af00      	add	r7, sp, #0
      if(user_manage_request.request_dang_thuc_thi < user_manage_request.request_tong_nhan)
 8001076:	4b9c      	ldr	r3, [pc, #624]	; (80012e8 <kiemtra_request_tu_PC+0x278>)
 8001078:	891a      	ldrh	r2, [r3, #8]
 800107a:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <kiemtra_request_tu_PC+0x278>)
 800107c:	88db      	ldrh	r3, [r3, #6]
 800107e:	429a      	cmp	r2, r3
 8001080:	f080 81fa 	bcs.w	8001478 <kiemtra_request_tu_PC+0x408>
      {
    	  USER_REQUESET_TypeDef *pmydata;
    	  int vitridoctin = user_manage_request.request_dang_thuc_thi % MAX_USER_GET_USB_REQUEST;
 8001084:	4b98      	ldr	r3, [pc, #608]	; (80012e8 <kiemtra_request_tu_PC+0x278>)
 8001086:	891a      	ldrh	r2, [r3, #8]
 8001088:	4b98      	ldr	r3, [pc, #608]	; (80012ec <kiemtra_request_tu_PC+0x27c>)
 800108a:	fba3 1302 	umull	r1, r3, r3, r2
 800108e:	08d9      	lsrs	r1, r3, #3
 8001090:	460b      	mov	r3, r1
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
    	  pmydata =&user_manage_request.request_noidung[vitridoctin];
 800109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a0:	2246      	movs	r2, #70	; 0x46
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	3358      	adds	r3, #88	; 0x58
 80010a8:	4a8f      	ldr	r2, [pc, #572]	; (80012e8 <kiemtra_request_tu_PC+0x278>)
 80010aa:	4413      	add	r3, r2
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    	  int len = pmydata->noidung_chieudai;
 80010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
    	  uint16_t myRxDataLength;
    	  user_manage_request.request_dang_thuc_thi++;
 80010b6:	4b8c      	ldr	r3, [pc, #560]	; (80012e8 <kiemtra_request_tu_PC+0x278>)
 80010b8:	891b      	ldrh	r3, [r3, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b8a      	ldr	r3, [pc, #552]	; (80012e8 <kiemtra_request_tu_PC+0x278>)
 80010c0:	811a      	strh	r2, [r3, #8]

    	  //lưu vào vùng flash
    	  if( pcommand->chophepsniff ==1U && len > 0U)
 80010c2:	4b8b      	ldr	r3, [pc, #556]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d14b      	bne.n	8001166 <kiemtra_request_tu_PC+0xf6>
 80010ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d048      	beq.n	8001166 <kiemtra_request_tu_PC+0xf6>
		  {
    		  int numofwords = (len/4)+((len%4)!=0);
 80010d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da00      	bge.n	80010dc <kiemtra_request_tu_PC+0x6c>
 80010da:	3303      	adds	r3, #3
 80010dc:	109b      	asrs	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    		  myRxDataLength = numofwords*4;
 80010f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	817b      	strh	r3, [r7, #10]

    		  // lưu chi�?u dài
    		  uint32_t j = (uint32_t)len;
 80010fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001100:	607b      	str	r3, [r7, #4]
    		  Flash_Write_Data(pcommand->u32_addr_data_store, &j, 1U);
 8001102:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	1d39      	adds	r1, r7, #4
 800110a:	2201      	movs	r2, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fae5 	bl	80006dc <Flash_Write_Data>

    		  pcommand->u32_addr_data_store += 4;
 8001112:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	4b75      	ldr	r3, [pc, #468]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3204      	adds	r2, #4
 800111e:	615a      	str	r2, [r3, #20]
    		  pcommand->data_print_size += 4;
 8001120:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3204      	adds	r2, #4
 800112c:	611a      	str	r2, [r3, #16]

    		//lưu data
			Flash_Write_Data(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, numofwords);
 800112e:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6958      	ldr	r0, [r3, #20]
 8001134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001136:	3302      	adds	r3, #2
 8001138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800113a:	b292      	uxth	r2, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff facd 	bl	80006dc <Flash_Write_Data>

			//cập nhật chi�?u dài tổng
			pcommand->data_print_size +=myRxDataLength;
 8001142:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	4619      	mov	r1, r3
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	440a      	add	r2, r1
 8001152:	611a      	str	r2, [r3, #16]
			pcommand->u32_addr_data_store +=myRxDataLength;
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	4619      	mov	r1, r3
 800115e:	4b64      	ldr	r3, [pc, #400]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	440a      	add	r2, r1
 8001164:	615a      	str	r2, [r3, #20]
		  }


    	  /* --------------- start so sanh de xu ly -------------------------------------*/
    	  uint8_t sosanhlenh =sosanhlenhfct(pmydata,len,&myRxDataLength);
 8001166:	f107 030a 	add.w	r3, r7, #10
 800116a:	461a      	mov	r2, r3
 800116c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800116e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001170:	f7ff fefc 	bl	8000f6c <sosanhlenhfct>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    	  if(sosanhlenh ==1)
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b01      	cmp	r3, #1
 8001180:	d155      	bne.n	800122e <kiemtra_request_tu_PC+0x1be>
    	  		{
    	  			 //so sánh bộ nhớ trống
    	  			 uint8_t tamnho = pcommand->number_printed - pcommand->number_printed_processing;
 8001182:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800118a:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    	  			 if (tamnho >= MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME)
 8001198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800119c:	2b01      	cmp	r3, #1
 800119e:	d906      	bls.n	80011ae <kiemtra_request_tu_PC+0x13e>
    	  			 {
    	  				 sosanhlenh =0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	  				 USBD_UsrLogCog("\n reach max printed support \n");
 80011a6:	4853      	ldr	r0, [pc, #332]	; (80012f4 <kiemtra_request_tu_PC+0x284>)
 80011a8:	f004 f870 	bl	800528c <puts>
 80011ac:	e0de      	b.n	800136c <kiemtra_request_tu_PC+0x2fc>
    	  			 }
    	  			 else
    	  			 {
    	  				//bắt đầu in
    	  				 if (pcommand->duocphepdebug ==DEBUG_OK)
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d105      	bne.n	80011c6 <kiemtra_request_tu_PC+0x156>
    	  				 {
    	  					 USBD_UsrLog("#CMD S1");
 80011ba:	484f      	ldr	r0, [pc, #316]	; (80012f8 <kiemtra_request_tu_PC+0x288>)
 80011bc:	f003 ffcc 	bl	8005158 <iprintf>
 80011c0:	200a      	movs	r0, #10
 80011c2:	f003 ffe1 	bl	8005188 <putchar>
    	  				 }

    	  				 /* reset các biến */
    	  				 pcommand->data_print_size = 0U;
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
    	  				 pcommand->ui8_startprint =1U;
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	771a      	strb	r2, [r3, #28]
    	  				 pcommand->dataprint_doing =0U;
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	805a      	strh	r2, [r3, #2]
    	  				 pcommand->dataprint_tonglenh =0U;
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
    	  				 pcommand->print_length_tam =0U;
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	809a      	strh	r2, [r3, #4]
    	  				 pcommand->package_index =0U;
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24


    	  				 /* thiết lập nhận data pringting */

    	  				 int vitridoctin = pcommand->number_printed % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	61fb      	str	r3, [r7, #28]

    	  				 if(vitridoctin ==1)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <kiemtra_request_tu_PC+0x1ac>
    	  				 {
    	  					 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR2;
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <kiemtra_request_tu_PC+0x28c>)
 8001210:	615a      	str	r2, [r3, #20]
    	  					 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR2;
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a3a      	ldr	r2, [pc, #232]	; (8001300 <kiemtra_request_tu_PC+0x290>)
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	e0a7      	b.n	800136c <kiemtra_request_tu_PC+0x2fc>
    	  				 }
    	  				 else
    	  				 {
    	  					 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR;
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <kiemtra_request_tu_PC+0x294>)
 8001222:	615a      	str	r2, [r3, #20]
    	  					 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a37      	ldr	r2, [pc, #220]	; (8001308 <kiemtra_request_tu_PC+0x298>)
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	e09e      	b.n	800136c <kiemtra_request_tu_PC+0x2fc>
    	  				 }
    	  			 }
    	  		}
    	  		else if(sosanhlenh ==2)
 800122e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001232:	2b02      	cmp	r3, #2
 8001234:	f040 809a 	bne.w	800136c <kiemtra_request_tu_PC+0x2fc>
    	  		{
    	  			USBD_UsrLogCog(" have end, stt = %x \n", pcommand->ui8_startprint);
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	7f1b      	ldrb	r3, [r3, #28]
 800123e:	4619      	mov	r1, r3
 8001240:	4832      	ldr	r0, [pc, #200]	; (800130c <kiemtra_request_tu_PC+0x29c>)
 8001242:	f003 ff89 	bl	8005158 <iprintf>
    	  			//kết thúc in
    	  			if(pcommand->ui8_startprint == 1U)
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7f1b      	ldrb	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	f040 808d 	bne.w	800136c <kiemtra_request_tu_PC+0x2fc>
    	  			{
    	  				pcommand->ui8_startprint =0U;
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	771a      	strb	r2, [r3, #28]
    	  				pcommand->ui8_printing =0U;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	775a      	strb	r2, [r3, #29]
    	  				 pcommand->WAIT_SEND_TO_SERVER =1U;
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	779a      	strb	r2, [r3, #30]
    	  				 pcommand->number_printed++;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001272:	3201      	adds	r2, #1
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22


    	  				 pcommand->package_index++;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	3201      	adds	r2, #1
 8001282:	625a      	str	r2, [r3, #36]	; 0x24

    	  				 /* tính tổng gói từ các gói thành phần */
    	  				 uint32_t pp = pcommand->package_index;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    	  				 uint32_t tamlen =0U;
 800128c:	2300      	movs	r3, #0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
    	  				 uint32_t diachitam = pcommand->u32_addr_header_store;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	643b      	str	r3, [r7, #64]	; 0x40

    	  				 /* save total package */
    	  				 Flash_Write_Data(diachitam, &pcommand->package_index, 1U);
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3324      	adds	r3, #36	; 0x24
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012a4:	f7ff fa1a 	bl	80006dc <Flash_Write_Data>
    	  				 USBD_UsrLogCog(" total package = %ld \n", pcommand->package_index);
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <kiemtra_request_tu_PC+0x2a0>)
 80012b2:	f003 ff51 	bl	8005158 <iprintf>

    	  				 diachitam+=4;
 80012b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b8:	3304      	adds	r3, #4
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
    	  				 /* save len package */
    	  				 if (pp ==1U)
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d10f      	bne.n	80012e2 <kiemtra_request_tu_PC+0x272>
    	  				 {
    	  					 USBD_UsrLogCog(" 1 package = %ld \n", pcommand->data_print_size);
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4812      	ldr	r0, [pc, #72]	; (8001314 <kiemtra_request_tu_PC+0x2a4>)
 80012cc:	f003 ff44 	bl	8005158 <iprintf>
    	  					 Flash_Write_Data(diachitam, &pcommand->data_print_size, 1U);
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <kiemtra_request_tu_PC+0x280>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3310      	adds	r3, #16
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012dc:	f7ff f9fe 	bl	80006dc <Flash_Write_Data>
 80012e0:	e03d      	b.n	800135e <kiemtra_request_tu_PC+0x2ee>
    	  				 }
    	  				 else
    	  				 {
    	  					 for (int k =0; k< pp;k++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e6:	e036      	b.n	8001356 <kiemtra_request_tu_PC+0x2e6>
 80012e8:	20001a54 	.word	0x20001a54
 80012ec:	cccccccd 	.word	0xcccccccd
 80012f0:	20000020 	.word	0x20000020
 80012f4:	08006824 	.word	0x08006824
 80012f8:	08006844 	.word	0x08006844
 80012fc:	080a0028 	.word	0x080a0028
 8001300:	080a0000 	.word	0x080a0000
 8001304:	08020028 	.word	0x08020028
 8001308:	08020000 	.word	0x08020000
 800130c:	0800684c 	.word	0x0800684c
 8001310:	080067cc 	.word	0x080067cc
 8001314:	08006864 	.word	0x08006864
    	  					 {
    	  						 tamlen += pcommand->chieudaitungfile[k];/* get save file*/
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800131e:	320a      	adds	r2, #10
 8001320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001326:	4413      	add	r3, r2
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
    	  						 Flash_Write_Data(diachitam, &pcommand->chieudaitungfile[k], 1U);
 800132a:	4b55      	ldr	r3, [pc, #340]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001330:	330a      	adds	r3, #10
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800133c:	f7ff f9ce 	bl	80006dc <Flash_Write_Data>
    	  						 diachitam += 4;
 8001340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001342:	3304      	adds	r3, #4
 8001344:	643b      	str	r3, [r7, #64]	; 0x40

    	  						 USBD_UsrLogCog(" index = %d, total = %ld \n", k, tamlen);
 8001346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800134a:	484e      	ldr	r0, [pc, #312]	; (8001484 <kiemtra_request_tu_PC+0x414>)
 800134c:	f003 ff04 	bl	8005158 <iprintf>
    	  					 for (int k =0; k< pp;k++)
 8001350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001352:	3301      	adds	r3, #1
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135a:	429a      	cmp	r2, r3
 800135c:	d8dc      	bhi.n	8001318 <kiemtra_request_tu_PC+0x2a8>
    	  				 }


    	 				/* reset timer*/
    	 				/* sau 1 giây mới bắt đầu xử lý bill mới */
    	 				timer_process_bill = HAL_GetTick() + 1000;
 800135e:	f001 fcc3 	bl	8002ce8 <HAL_GetTick>
 8001362:	4603      	mov	r3, r0
 8001364:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001368:	4a47      	ldr	r2, [pc, #284]	; (8001488 <kiemtra_request_tu_PC+0x418>)
 800136a:	6013      	str	r3, [r2, #0]


    	  		/* --------------- start copy data vào vùng nhớ -------------------------------------*/

    	  		/* xác định data bắt đầu in */
    	  		if((len == 0x40) && (pcommand->ui8_startprint ==1U))
 800136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136e:	2b40      	cmp	r3, #64	; 0x40
 8001370:	d108      	bne.n	8001384 <kiemtra_request_tu_PC+0x314>
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7f1b      	ldrb	r3, [r3, #28]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d103      	bne.n	8001384 <kiemtra_request_tu_PC+0x314>
    	  		{
    	  			pcommand->ui8_printing =1U;
 800137c:	4b40      	ldr	r3, [pc, #256]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	775a      	strb	r2, [r3, #29]
    	  		}

    	  		if (pcommand->ui8_printing ==1U)
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	7f5b      	ldrb	r3, [r3, #29]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d174      	bne.n	8001478 <kiemtra_request_tu_PC+0x408>
    	  		{
    	  			if(len > 0U)
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	2b00      	cmp	r3, #0
 8001392:	d071      	beq.n	8001478 <kiemtra_request_tu_PC+0x408>
    	  			{
    	  				myRxDataLength =len;
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	b29b      	uxth	r3, r3
 8001398:	817b      	strh	r3, [r7, #10]
    	  				pcommand->data_print_size +=myRxDataLength;
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	440a      	add	r2, r1
 80013aa:	611a      	str	r2, [r3, #16]

    	  				/* cập nhật chi�?u dài file */
    	  				uint8_t indenew = pcommand->package_index;
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	76fb      	strb	r3, [r7, #27]
    	  				pcommand->chieudaitungfile[indenew] = pcommand->data_print_size;
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	7efa      	ldrb	r2, [r7, #27]
 80013be:	6909      	ldr	r1, [r1, #16]
 80013c0:	320a      	adds	r2, #10
 80013c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    	  				/*store data to flash */
    	  				int u = len %4;
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	425a      	negs	r2, r3
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	bf58      	it	pl
 80013d4:	4253      	negpl	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
    	  				if (u)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02a      	beq.n	8001434 <kiemtra_request_tu_PC+0x3c4>
    	  				{
    	  					u = 4 -u;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f1c3 0304 	rsb	r3, r3, #4
 80013e4:	617b      	str	r3, [r7, #20]
    	  					myRxDataLength += u;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	817b      	strh	r3, [r7, #10]

    	  					/* lưu chi�?u dài file 1*/
    	  					uint8_t l = pcommand->package_index;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	74fb      	strb	r3, [r7, #19]
    	  					pcommand->chieudaitungfile[l] = pcommand->data_print_size;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	7cfa      	ldrb	r2, [r7, #19]
 8001404:	6909      	ldr	r1, [r1, #16]
 8001406:	320a      	adds	r2, #10
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    	  					USBD_UsrLogCog(" save index = %d, len = %ld \n", l, pcommand->chieudaitungfile[l]);
 800140c:	7cf9      	ldrb	r1, [r7, #19]
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	7cfa      	ldrb	r2, [r7, #19]
 8001414:	320a      	adds	r2, #10
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	461a      	mov	r2, r3
 800141c:	481b      	ldr	r0, [pc, #108]	; (800148c <kiemtra_request_tu_PC+0x41c>)
 800141e:	f003 fe9b 	bl	8005158 <iprintf>

    	  					pcommand->data_print_size =0U;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
    	  					pcommand->package_index++;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001430:	3201      	adds	r2, #1
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
    	  				}

    	  				int numofwords = (myRxDataLength/4)+((myRxDataLength%4)!=0);
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	897b      	ldrh	r3, [r7, #10]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	b29b      	uxth	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
    	  				Flash_Write_Data(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, numofwords);
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6958      	ldr	r0, [r3, #20]
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	3302      	adds	r3, #2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	b292      	uxth	r2, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff f93b 	bl	80006dc <Flash_Write_Data>

    	  //				Flash_Write_byte(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, myRxDataLength);

    	  				pcommand->u32_addr_data_store +=myRxDataLength;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	897b      	ldrh	r3, [r7, #10]
 800146e:	4619      	mov	r1, r3
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <kiemtra_request_tu_PC+0x410>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	440a      	add	r2, r1
 8001476:	615a      	str	r2, [r3, #20]
    	  		/* --------------- end copy data vào vùng nhớ -------------------------------------*/



      }
}
 8001478:	bf00      	nop
 800147a:	3748      	adds	r7, #72	; 0x48
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000020 	.word	0x20000020
 8001484:	08006878 	.word	0x08006878
 8001488:	20001a48 	.word	0x20001a48
 800148c:	08006894 	.word	0x08006894

08001490 <transmit_to_esp_process>:
 * dùng ngắt tx truy�?n qua ESP
 *
 *
 */
void transmit_to_esp_process()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	switch (quanlyESP.indextx)
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <transmit_to_esp_process+0xa0>)
 8001498:	7f1b      	ldrb	r3, [r3, #28]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d83b      	bhi.n	8001516 <transmit_to_esp_process+0x86>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <transmit_to_esp_process+0x14>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014db 	.word	0x080014db
 80014a8:	08001517 	.word	0x08001517
 80014ac:	080014fb 	.word	0x080014fb
 80014b0:	080014b9 	.word	0x080014b9
 80014b4:	080014c7 	.word	0x080014c7
	{
	  case ESP_INIT:
	  {
		  ui8_status_esp =1U;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <transmit_to_esp_process+0xa4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
		  quanlyESP.indextx =ESP_WAIT_ESPIDLE;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <transmit_to_esp_process+0xa0>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	771a      	strb	r2, [r3, #28]
		  break;
 80014c4:	e030      	b.n	8001528 <transmit_to_esp_process+0x98>
	  }
	  case ESP_WAIT_ESPIDLE:
	  {
		  /* ch�? esp rảnh */
		  check_status_esp();
 80014c6:	f000 f975 	bl	80017b4 <check_status_esp>
		  if (ui8_status_esp ==0U)
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <transmit_to_esp_process+0xa4>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d125      	bne.n	800151e <transmit_to_esp_process+0x8e>
		  {
			  quanlyESP.indextx =ESP_STATE_SETUP;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <transmit_to_esp_process+0xa0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	771a      	strb	r2, [r3, #28]
		  }
		  break;
 80014d8:	e021      	b.n	800151e <transmit_to_esp_process+0x8e>
	  }
	  case ESP_STATE_SETUP:/* idle */
	  {
		  HAL_StatusTypeDef tt = HAL_UART_Transmit_IT(&huart1,PRINTER_TX_Buffer,quanlyESP.lentx);
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <transmit_to_esp_process+0xa0>)
 80014dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014de:	461a      	mov	r2, r3
 80014e0:	4915      	ldr	r1, [pc, #84]	; (8001538 <transmit_to_esp_process+0xa8>)
 80014e2:	4816      	ldr	r0, [pc, #88]	; (800153c <transmit_to_esp_process+0xac>)
 80014e4:	f002 ff69 	bl	80043ba <HAL_UART_Transmit_IT>
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
		  if (tt == HAL_OK)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d117      	bne.n	8001522 <transmit_to_esp_process+0x92>
		  {
			  quanlyESP.indextx =ESP_WAITSEND;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <transmit_to_esp_process+0xa0>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	771a      	strb	r2, [r3, #28]
		  }
		  break;
 80014f8:	e013      	b.n	8001522 <transmit_to_esp_process+0x92>
	  }
	  case ESP_WAITSEND:
	  {
			if (quanlyESP.status_tx_datruyenxong == 1)
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <transmit_to_esp_process+0xa0>)
 80014fc:	7f5b      	ldrb	r3, [r3, #29]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d111      	bne.n	8001526 <transmit_to_esp_process+0x96>
			  {
#if (0)
				uint32_t tam1 = HAL_GetTick() - biendebug_code.u32_meas;
				USBH_UsrLog("#tx finish = %d %d time = %ld ms",user_manage_request.request_tx_to_esp,user_manage_request.request_tong_nhan,tam1);
#endif
				quanlyESP.cmd_tx =0U;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <transmit_to_esp_process+0xa0>)
 8001504:	2200      	movs	r2, #0
 8001506:	849a      	strh	r2, [r3, #36]	; 0x24
				quanlyESP.status_tx_datruyenxong =0;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <transmit_to_esp_process+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	775a      	strb	r2, [r3, #29]
				quanlyESP.indextx =ESP_INIT;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <transmit_to_esp_process+0xa0>)
 8001510:	2203      	movs	r2, #3
 8001512:	771a      	strb	r2, [r3, #28]
			  }
		  break;
 8001514:	e007      	b.n	8001526 <transmit_to_esp_process+0x96>
	  }

	  default:
		  quanlyESP.indextx =ESP_INIT;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <transmit_to_esp_process+0xa0>)
 8001518:	2203      	movs	r2, #3
 800151a:	771a      	strb	r2, [r3, #28]
		  break;
 800151c:	e004      	b.n	8001528 <transmit_to_esp_process+0x98>
		  break;
 800151e:	bf00      	nop
 8001520:	e002      	b.n	8001528 <transmit_to_esp_process+0x98>
		  break;
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <transmit_to_esp_process+0x98>
		  break;
 8001526:	bf00      	nop
	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000a18 	.word	0x20000a18
 8001534:	20001a4c 	.word	0x20001a4c
 8001538:	200001e4 	.word	0x200001e4
 800153c:	200000ec 	.word	0x200000ec

08001540 <get_header>:
int get_header()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af02      	add	r7, sp, #8
	int kq =0;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
	USBD_CongLog("--------------get_header------------------------------\n");
 800154a:	484e      	ldr	r0, [pc, #312]	; (8001684 <get_header+0x144>)
 800154c:	f003 fe04 	bl	8005158 <iprintf>
 8001550:	484d      	ldr	r0, [pc, #308]	; (8001688 <get_header+0x148>)
 8001552:	f003 fe9b 	bl	800528c <puts>

	 uint32_t totaltam =0;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]

	u32_addr_data_user =get_addr_header();
 800155a:	f000 f961 	bl	8001820 <get_addr_header>
 800155e:	4603      	mov	r3, r0
 8001560:	4a4a      	ldr	r2, [pc, #296]	; (800168c <get_header+0x14c>)
 8001562:	6013      	str	r3, [r2, #0]

	/*đ�?c tổng số package */

	uint32_t pp =0;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
	ui32_total_data_print =0;
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <get_header+0x150>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

	Flash_Read_Data(u32_addr_data_user, &pp, 1U);
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <get_header+0x14c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f107 011c 	add.w	r1, r7, #28
 8001576:	2201      	movs	r2, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f8e3 	bl	8000744 <Flash_Read_Data>
	ui32_package_index_total = pp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4a44      	ldr	r2, [pc, #272]	; (8001694 <get_header+0x154>)
 8001582:	6013      	str	r3, [r2, #0]

	u32_addr_data_user += 4; //địa chỉ gói đầu tiên
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <get_header+0x14c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3304      	adds	r3, #4
 800158a:	4a40      	ldr	r2, [pc, #256]	; (800168c <get_header+0x14c>)
 800158c:	6013      	str	r3, [r2, #0]
	USBD_CongLog("total package =%ld\n",pp);
 800158e:	483d      	ldr	r0, [pc, #244]	; (8001684 <get_header+0x144>)
 8001590:	f003 fde2 	bl	8005158 <iprintf>
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4619      	mov	r1, r3
 8001598:	483f      	ldr	r0, [pc, #252]	; (8001698 <get_header+0x158>)
 800159a:	f003 fddd 	bl	8005158 <iprintf>

	if(pp==1)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d111      	bne.n	80015c8 <get_header+0x88>
	{
		Flash_Read_Data(u32_addr_data_user, &totaltam, 1U);
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <get_header+0x14c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f107 0120 	add.w	r1, r7, #32
 80015ac:	2201      	movs	r2, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f8c8 	bl	8000744 <Flash_Read_Data>
		ui32_total_data_print = totaltam;
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	4a36      	ldr	r2, [pc, #216]	; (8001690 <get_header+0x150>)
 80015b8:	6013      	str	r3, [r2, #0]
		USBD_UsrLogCog(" read 1 package = %ld \n", ui32_total_data_print);
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <get_header+0x150>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4836      	ldr	r0, [pc, #216]	; (800169c <get_header+0x15c>)
 80015c2:	f003 fdc9 	bl	8005158 <iprintf>
 80015c6:	e03b      	b.n	8001640 <get_header+0x100>
	}
	else if (pp > 0 && pp < 10)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d036      	beq.n	800163c <get_header+0xfc>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d833      	bhi.n	800163c <get_header+0xfc>
	{
		ui32_total_data_print =0U;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <get_header+0x150>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
		uint32_t quai[6];
		Flash_Read_Data(u32_addr_data_user, quai, 5U);
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <get_header+0x14c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1d39      	adds	r1, r7, #4
 80015e0:	2205      	movs	r2, #5
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f8ae 	bl	8000744 <Flash_Read_Data>

		int uu = (int)pp;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
		for (int kk = 0; kk < uu; kk++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f0:	e01f      	b.n	8001632 <get_header+0xf2>
		 {
//			 Flash_Read_Data(u32_addr_data_user, &totaltam, 1U);

			totaltam=quai[kk];
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	3330      	adds	r3, #48	; 0x30
 80015f8:	443b      	add	r3, r7
 80015fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80015fe:	623b      	str	r3, [r7, #32]
			ui32_total_data_print += totaltam;
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <get_header+0x150>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	4413      	add	r3, r2
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <get_header+0x150>)
 800160a:	6013      	str	r3, [r2, #0]

			 u32_addr_data_user += 4;
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <get_header+0x14c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <get_header+0x14c>)
 8001614:	6013      	str	r3, [r2, #0]

			 USBD_UsrLogCog(" index = %d, addr = %lx, len1 = %ld, total = %ld \n", kk, u32_addr_data_user, totaltam, ui32_total_data_print);
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <get_header+0x14c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	6a39      	ldr	r1, [r7, #32]
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <get_header+0x150>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	460b      	mov	r3, r1
 8001624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001626:	481e      	ldr	r0, [pc, #120]	; (80016a0 <get_header+0x160>)
 8001628:	f003 fd96 	bl	8005158 <iprintf>
		for (int kk = 0; kk < uu; kk++)
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	3301      	adds	r3, #1
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
 8001632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	429a      	cmp	r2, r3
 8001638:	dbdb      	blt.n	80015f2 <get_header+0xb2>
	{
 800163a:	e001      	b.n	8001640 <get_header+0x100>
		 }
	}
	else
	{
		kq =1;
 800163c:	2301      	movs	r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (ui32_total_data_print > 3*128*1024)/* 3 sector *128k*/
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <get_header+0x150>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001648:	d907      	bls.n	800165a <get_header+0x11a>
	{
		ui32_total_data_print =0;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <get_header+0x150>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
		USBD_UsrLogCog(" set totallen = 0 \n");
 8001650:	4814      	ldr	r0, [pc, #80]	; (80016a4 <get_header+0x164>)
 8001652:	f003 fe1b 	bl	800528c <puts>
		kq=1;
 8001656:	2301      	movs	r3, #1
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	USBD_CongLog("Read =%ld\n",ui32_total_data_print);
 800165a:	480a      	ldr	r0, [pc, #40]	; (8001684 <get_header+0x144>)
 800165c:	f003 fd7c 	bl	8005158 <iprintf>
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <get_header+0x150>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <get_header+0x168>)
 8001668:	f003 fd76 	bl	8005158 <iprintf>

	USBD_CongLog("--------------End get_header------------------------------\n");
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <get_header+0x144>)
 800166e:	f003 fd73 	bl	8005158 <iprintf>
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <get_header+0x16c>)
 8001674:	f003 fe0a 	bl	800528c <puts>
	return kq;
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800167a:	4618      	mov	r0, r3
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	080068b4 	.word	0x080068b4
 8001688:	080068bc 	.word	0x080068bc
 800168c:	200001cc 	.word	0x200001cc
 8001690:	200001d0 	.word	0x200001d0
 8001694:	200001c4 	.word	0x200001c4
 8001698:	080068f4 	.word	0x080068f4
 800169c:	08006908 	.word	0x08006908
 80016a0:	08006920 	.word	0x08006920
 80016a4:	08006954 	.word	0x08006954
 80016a8:	08006968 	.word	0x08006968
 80016ac:	08006974 	.word	0x08006974

080016b0 <get_nextdata>:
int get_nextdata()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
	int kq =0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
	USBD_CongLog("--------------get_nextdata------------------------------\n");
 80016ba:	4833      	ldr	r0, [pc, #204]	; (8001788 <get_nextdata+0xd8>)
 80016bc:	f003 fd4c 	bl	8005158 <iprintf>
 80016c0:	4832      	ldr	r0, [pc, #200]	; (800178c <get_nextdata+0xdc>)
 80016c2:	f003 fde3 	bl	800528c <puts>
	/* offset cho data tiếp theo */
	u32_addr_data_user += ui32_data_offset;
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <get_nextdata+0xe0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b32      	ldr	r3, [pc, #200]	; (8001794 <get_nextdata+0xe4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <get_nextdata+0xe0>)
 80016d2:	6013      	str	r3, [r2, #0]
	USBD_UsrLogCog(" u32_addr_data_user = %lx \n", u32_addr_data_user);
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <get_nextdata+0xe0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	482f      	ldr	r0, [pc, #188]	; (8001798 <get_nextdata+0xe8>)
 80016dc:	f003 fd3c 	bl	8005158 <iprintf>

	 uint32_t totaltam =0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
	 uint32_t diachitam =0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
	 uint32_t tam =0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
	/*lấy địa chỉ tạm*/

	 diachitam = ui32_package_index_sending*4;
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <get_nextdata+0xec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
	 tam = get_addr_header();
 80016f4:	f000 f894 	bl	8001820 <get_addr_header>
 80016f8:	60f8      	str	r0, [r7, #12]
	 diachitam += tam;//offset
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
	 diachitam += 4;//b�? qua total package
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3304      	adds	r3, #4
 8001706:	613b      	str	r3, [r7, #16]

	 Flash_Read_Data(diachitam, &totaltam, 1U);
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	6938      	ldr	r0, [r7, #16]
 8001710:	f7ff f818 	bl	8000744 <Flash_Read_Data>

	 USBD_UsrLogCog(" new package %ld, len1 = %ld \n", ui32_package_index_sending, totaltam);
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <get_nextdata+0xec>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4619      	mov	r1, r3
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <get_nextdata+0xf0>)
 800171e:	f003 fd1b 	bl	8005158 <iprintf>

	 /* d�?i offset data */
	 int u = totaltam %4;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	60bb      	str	r3, [r7, #8]
	if (u)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <get_nextdata+0x98>
	{
		ui32_data_offset = 4 -u;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f1c3 0304 	rsb	r3, r3, #4
 8001736:	461a      	mov	r2, r3
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <get_nextdata+0xe4>)
 800173a:	601a      	str	r2, [r3, #0]
		USBD_UsrLogCog(" next offset data = %ld \n", ui32_data_offset);
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <get_nextdata+0xe4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	4818      	ldr	r0, [pc, #96]	; (80017a4 <get_nextdata+0xf4>)
 8001744:	f003 fd08 	bl	8005158 <iprintf>
	}


	 ui32_txprinterlength = totaltam;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <get_nextdata+0xf8>)
 800174c:	6013      	str	r3, [r2, #0]

	if (ui32_txprinterlength > 3*128*1024)/* 3 sector *128k*/
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <get_nextdata+0xf8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001756:	d907      	bls.n	8001768 <get_nextdata+0xb8>
	{
		ui32_txprinterlength =0;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <get_nextdata+0xf8>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
		USBD_UsrLogCog(" set len = 0 \n");
 800175e:	4813      	ldr	r0, [pc, #76]	; (80017ac <get_nextdata+0xfc>)
 8001760:	f003 fd94 	bl	800528c <puts>
		kq =1;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
	}

	 ui32_package_index_sending++; //chỉ tới gói tiếp theo
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <get_nextdata+0xec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <get_nextdata+0xec>)
 8001770:	6013      	str	r3, [r2, #0]
	USBD_CongLog("--------------End get_nextdata------------------------------\n");
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <get_nextdata+0xd8>)
 8001774:	f003 fcf0 	bl	8005158 <iprintf>
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <get_nextdata+0x100>)
 800177a:	f003 fd87 	bl	800528c <puts>
	return kq;
 800177e:	697b      	ldr	r3, [r7, #20]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	080068b4 	.word	0x080068b4
 800178c:	080069b0 	.word	0x080069b0
 8001790:	200001cc 	.word	0x200001cc
 8001794:	200001d8 	.word	0x200001d8
 8001798:	080069ec 	.word	0x080069ec
 800179c:	200001d4 	.word	0x200001d4
 80017a0:	08006a08 	.word	0x08006a08
 80017a4:	08006a28 	.word	0x08006a28
 80017a8:	200001e0 	.word	0x200001e0
 80017ac:	08006a44 	.word	0x08006a44
 80017b0:	08006a54 	.word	0x08006a54

080017b4 <check_status_esp>:
int check_status_esp()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	int kq =1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
	if (ui8_status_esp ==0U) return 0; /*idle*/
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <check_status_esp+0x5c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <check_status_esp+0x16>
 80017c6:	2300      	movs	r3, #0
 80017c8:	e01d      	b.n	8001806 <check_status_esp+0x52>

	uint32_t tam = HAL_GetTick();
 80017ca:	f001 fa8d 	bl	8002ce8 <HAL_GetTick>
 80017ce:	6038      	str	r0, [r7, #0]

	if(tam > ui32_timerxset)
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <check_status_esp+0x60>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d914      	bls.n	8001804 <check_status_esp+0x50>
	{
		/*
		 nếu timeout thì truy�?n lại gói check
		 đến khi nào ready mới xử lý truy�?n
		*/
		SERIAL_TO_SERVER("#CMD RD");
 80017da:	480f      	ldr	r0, [pc, #60]	; (8001818 <check_status_esp+0x64>)
 80017dc:	f003 fcbc 	bl	8005158 <iprintf>
 80017e0:	200a      	movs	r0, #10
 80017e2:	f003 fcd1 	bl	8005188 <putchar>
		ui32_timerxset = HAL_GetTick() + 1000;
 80017e6:	f001 fa7f 	bl	8002ce8 <HAL_GetTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <check_status_esp+0x60>)
 80017f2:	6013      	str	r3, [r2, #0]
		ui32_counter_send_status=HAL_GetTick() + 25000;
 80017f4:	f001 fa78 	bl	8002ce8 <HAL_GetTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80017fe:	3328      	adds	r3, #40	; 0x28
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <check_status_esp+0x68>)
 8001802:	6013      	str	r3, [r2, #0]
		//{
			//u32_addr_data_user =0;
		//}
	}

	return kq;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20001a4c 	.word	0x20001a4c
 8001814:	20001a50 	.word	0x20001a50
 8001818:	08006a94 	.word	0x08006a94
 800181c:	20002dc0 	.word	0x20002dc0

08001820 <get_addr_header>:
uint32_t get_addr_header()
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
	uint32_t kq=0;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
	int vitridoctin = user_manage_request.number_printed_processing % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <get_addr_header+0x34>)
 800182c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	603b      	str	r3, [r7, #0]

	 if(vitridoctin ==1)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <get_addr_header+0x22>
	 {
		 kq =FLASH_USER_HEADDER_ADDR2;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <get_addr_header+0x38>)
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	e001      	b.n	8001846 <get_addr_header+0x26>
	 }
	 else
	 {
		 kq =FLASH_USER_HEADDER_ADDR;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <get_addr_header+0x3c>)
 8001844:	607b      	str	r3, [r7, #4]
	 }
	 return kq;
 8001846:	687b      	ldr	r3, [r7, #4]
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20001a54 	.word	0x20001a54
 8001858:	080a0000 	.word	0x080a0000
 800185c:	08020000 	.word	0x08020000

08001860 <get_addr_data>:
uint32_t get_addr_data()
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
	uint32_t kq=0;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
	int vitridoctin = user_manage_request.number_printed_processing % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <get_addr_data+0x34>)
 800186c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	603b      	str	r3, [r7, #0]

	 if(vitridoctin ==1)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <get_addr_data+0x22>
	 {
		 kq =FLASH_USER_START_ADDR2;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <get_addr_data+0x38>)
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	e001      	b.n	8001886 <get_addr_data+0x26>
	 }
	 else
	 {
		 kq =FLASH_USER_START_ADDR;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <get_addr_data+0x3c>)
 8001884:	607b      	str	r3, [r7, #4]
	 }
	 return kq;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20001a54 	.word	0x20001a54
 8001898:	080a0028 	.word	0x080a0028
 800189c:	08020028 	.word	0x08020028

080018a0 <clear_flash>:
void clear_flash()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
#if (DEBUG_NO_ERASER_FLASH ==10U)
	USBD_UsrLog(" clear_flash: DEBUG_NO_ERASER_FLASH");

#else
	uint32_t diachicanxoa = get_addr_header();
 80018a6:	f7ff ffbb 	bl	8001820 <get_addr_header>
 80018aa:	6078      	str	r0, [r7, #4]
	uint16_t numberofwords = (ui32_total_data_print/4)+((ui32_total_data_print%4)!=0);
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <clear_flash+0x54>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <clear_flash+0x54>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	807b      	strh	r3, [r7, #2]
	Flash_Erase_sector_leng(diachicanxoa, numberofwords);
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	4619      	mov	r1, r3
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7fe fecb 	bl	800066c <Flash_Erase_sector_leng>
	SERIAL_TO_SERVER("clear @%lx, len = %ld", diachicanxoa, ui32_total_data_print);
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <clear_flash+0x54>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <clear_flash+0x58>)
 80018e0:	f003 fc3a 	bl	8005158 <iprintf>
 80018e4:	200a      	movs	r0, #10
 80018e6:	f003 fc4f 	bl	8005188 <putchar>
#endif
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200001d0 	.word	0x200001d0
 80018f8:	08006a9c 	.word	0x08006a9c

080018fc <set_erro>:
void set_erro()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	SERIAL_TO_SERVER(" set_erro ");
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <set_erro+0x34>)
 8001902:	f003 fc29 	bl	8005158 <iprintf>
 8001906:	200a      	movs	r0, #10
 8001908:	f003 fc3e 	bl	8005188 <putchar>
	/*xóa flash sau khi truy�?n qua esp*/
	clear_flash();
 800190c:	f7ff ffc8 	bl	80018a0 <clear_flash>
	ui8_finished_printer =0U;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <set_erro+0x38>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
	u32_addr_data_user = 0U;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <set_erro+0x3c>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
	user_manage_request.number_printed_processing++;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <set_erro+0x40>)
 800191e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <set_erro+0x40>)
 8001928:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	08006ab4 	.word	0x08006ab4
 8001934:	200001dc 	.word	0x200001dc
 8001938:	200001cc 	.word	0x200001cc
 800193c:	20001a54 	.word	0x20001a54

08001940 <check_data_print>:

void check_data_print()
{
 8001940:	b580      	push	{r7, lr}
 8001942:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	if (ui8_finished_printer)
 800194a:	4ba4      	ldr	r3, [pc, #656]	; (8001bdc <check_data_print+0x29c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8277 	beq.w	8001e42 <check_data_print+0x502>
		uint32_t Rx_Dataread[1024];
		 int numofwords;
		 uint8_t u[5];

		 //load giá trị ban đầu
		if (u32_addr_data_user == 0U)
 8001954:	4ba2      	ldr	r3, [pc, #648]	; (8001be0 <check_data_print+0x2a0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d13e      	bne.n	80019da <check_data_print+0x9a>
		{
			int eroo = get_header();
 800195c:	f7ff fdf0 	bl	8001540 <get_header>
 8001960:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001964:	f103 030c 	add.w	r3, r3, #12
 8001968:	6018      	str	r0, [r3, #0]
			if(eroo)
 800196a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800196e:	f103 030c 	add.w	r3, r3, #12
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <check_data_print+0x3e>
			{
				set_erro();
 8001978:	f7ff ffc0 	bl	80018fc <set_erro>
				return;
 800197c:	e27d      	b.n	8001e7a <check_data_print+0x53a>
			}
			else
			{
				ui32_package_index_sending =0U;
 800197e:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <check_data_print+0x2a4>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
				ui32_data_offset =0;
 8001984:	4b98      	ldr	r3, [pc, #608]	; (8001be8 <check_data_print+0x2a8>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
				eroo = get_nextdata();
 800198a:	f7ff fe91 	bl	80016b0 <get_nextdata>
 800198e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001992:	f103 030c 	add.w	r3, r3, #12
 8001996:	6018      	str	r0, [r3, #0]

				if (eroo)
 8001998:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800199c:	f103 030c 	add.w	r3, r3, #12
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <check_data_print+0x6c>
				{
					set_erro();
 80019a6:	f7ff ffa9 	bl	80018fc <set_erro>
					return;
 80019aa:	e266      	b.n	8001e7a <check_data_print+0x53a>
				}
				else
				{
					u32_addr_data_user = get_addr_data();
 80019ac:	f7ff ff58 	bl	8001860 <get_addr_data>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a8b      	ldr	r2, [pc, #556]	; (8001be0 <check_data_print+0x2a0>)
 80019b4:	6013      	str	r3, [r2, #0]
					quanlyESP.index_pkg =0U;
 80019b6:	4b8d      	ldr	r3, [pc, #564]	; (8001bec <check_data_print+0x2ac>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
					//bắt đầu in
		//			SERIAL_TO_SERVER("#CMD 11%d",ui32_total_data_print);
					quanlyESP.lentx = sprintf ((char *)PRINTER_TX_Buffer, "#CMD 11%ld\n", ui32_total_data_print);
 80019bc:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <check_data_print+0x2b0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	498c      	ldr	r1, [pc, #560]	; (8001bf4 <check_data_print+0x2b4>)
 80019c4:	488c      	ldr	r0, [pc, #560]	; (8001bf8 <check_data_print+0x2b8>)
 80019c6:	f003 fc69 	bl	800529c <siprintf>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b87      	ldr	r3, [pc, #540]	; (8001bec <check_data_print+0x2ac>)
 80019d0:	84da      	strh	r2, [r3, #38]	; 0x26
					quanlyESP.cmd_tx =1U;
 80019d2:	4b86      	ldr	r3, [pc, #536]	; (8001bec <check_data_print+0x2ac>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	849a      	strh	r2, [r3, #36]	; 0x24
					return;
 80019d8:	e24f      	b.n	8001e7a <check_data_print+0x53a>
				}
			}
		}

		if (ui32_txprinterlength > 0U)
 80019da:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <check_data_print+0x2bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8202 	beq.w	8001de8 <check_data_print+0x4a8>
		{
				/* truy�?n data*/
				if (ui32_txprinterlength > BUFFER_TX_SERVER_SIZE)
 80019e4:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <check_data_print+0x2bc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ec:	d90a      	bls.n	8001a04 <check_data_print+0xc4>
				{
					ui32_txprinterlength-=BUFFER_TX_SERVER_SIZE;
 80019ee:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <check_data_print+0x2bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80019f6:	4a81      	ldr	r2, [pc, #516]	; (8001bfc <check_data_print+0x2bc>)
 80019f8:	6013      	str	r3, [r2, #0]
					lentosend = BUFFER_TX_SERVER_SIZE;
 80019fa:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <check_data_print+0x2c0>)
 80019fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	e007      	b.n	8001a14 <check_data_print+0xd4>
				}
				else
				{
					lentosend = ui32_txprinterlength;
 8001a04:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <check_data_print+0x2bc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <check_data_print+0x2c0>)
 8001a0c:	801a      	strh	r2, [r3, #0]
					ui32_txprinterlength =0U;
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <check_data_print+0x2bc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
				}

				numofwords = (lentosend/4)+((lentosend%4)!=0);
 8001a14:	4b7a      	ldr	r3, [pc, #488]	; (8001c00 <check_data_print+0x2c0>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <check_data_print+0x2c0>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a38:	f102 0218 	add.w	r2, r2, #24
 8001a3c:	6013      	str	r3, [r2, #0]
				Flash_Read_Data(u32_addr_data_user, Rx_Dataread, numofwords);
 8001a3e:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <check_data_print+0x2a0>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a46:	f103 0318 	add.w	r3, r3, #24
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	3b04      	subs	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7fe fe75 	bl	8000744 <Flash_Read_Data>

				int so_byte_da_truyen = 4*(numofwords -1);
 8001a5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a5e:	f103 0318 	add.w	r3, r3, #24
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a6c:	f102 0214 	add.w	r2, r2, #20
 8001a70:	6013      	str	r3, [r2, #0]
				int so_byte_conphaitruyen = lentosend - so_byte_da_truyen;
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <check_data_print+0x2c0>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a7c:	f103 0314 	add.w	r3, r3, #20
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a88:	f102 0210 	add.w	r2, r2, #16
 8001a8c:	6013      	str	r3, [r2, #0]

				int tamtru = sprintf ((char *)PRINTER_TX_Buffer, "#CMD P%dL%04d", quanlyESP.index_pkg, (uint16_t)lentosend);
 8001a8e:	4b57      	ldr	r3, [pc, #348]	; (8001bec <check_data_print+0x2ac>)
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <check_data_print+0x2c0>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	495a      	ldr	r1, [pc, #360]	; (8001c04 <check_data_print+0x2c4>)
 8001a9a:	4857      	ldr	r0, [pc, #348]	; (8001bf8 <check_data_print+0x2b8>)
 8001a9c:	f003 fbfe 	bl	800529c <siprintf>
 8001aa0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001aa4:	f103 0304 	add.w	r3, r3, #4
 8001aa8:	6018      	str	r0, [r3, #0]

				PRINTER_TX_Buffer[tamtru]='\n';
 8001aaa:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <check_data_print+0x2b8>)
 8001aac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ab0:	f103 0304 	add.w	r3, r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	220a      	movs	r2, #10
 8001aba:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001abc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ac0:	f103 0304 	add.w	r3, r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001acc:	f102 0204 	add.w	r2, r2, #4
 8001ad0:	6013      	str	r3, [r2, #0]

				/*truy�?n khúc đầu*/
				for(int i =0; i< numofwords-1 ; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e058      	b.n	8001b8e <check_data_print+0x24e>
				{
					convertdata(Rx_Dataread[i] , u);
 8001adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001af0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001af4:	f102 0204 	add.w	r2, r2, #4
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fe3f 	bl	800077e <convertdata>
//					HAL_UART_Transmit(&huart1,u,4,0xFFFF);
					PRINTER_TX_Buffer[tamtru]=u[0];
 8001b00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001b04:	f103 0304 	add.w	r3, r3, #4
 8001b08:	7819      	ldrb	r1, [r3, #0]
 8001b0a:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <check_data_print+0x2b8>)
 8001b0c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b10:	f103 0304 	add.w	r3, r3, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	460a      	mov	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
					PRINTER_TX_Buffer[tamtru+1]=u[1];
 8001b1c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b20:	f103 0304 	add.w	r3, r3, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b2c:	f102 0205 	add.w	r2, r2, #5
 8001b30:	7811      	ldrb	r1, [r2, #0]
 8001b32:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <check_data_print+0x2b8>)
 8001b34:	54d1      	strb	r1, [r2, r3]
					PRINTER_TX_Buffer[tamtru+2]=u[2];
 8001b36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b3a:	f103 0304 	add.w	r3, r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3302      	adds	r3, #2
 8001b42:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b46:	f102 0206 	add.w	r2, r2, #6
 8001b4a:	7811      	ldrb	r1, [r2, #0]
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <check_data_print+0x2b8>)
 8001b4e:	54d1      	strb	r1, [r2, r3]
					PRINTER_TX_Buffer[tamtru+3]=u[3];
 8001b50:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b54:	f103 0304 	add.w	r3, r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3303      	adds	r3, #3
 8001b5c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b60:	f102 0207 	add.w	r2, r2, #7
 8001b64:	7811      	ldrb	r1, [r2, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <check_data_print+0x2b8>)
 8001b68:	54d1      	strb	r1, [r2, r3]
					tamtru += 4;
 8001b6a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b6e:	f103 0304 	add.w	r3, r3, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3304      	adds	r3, #4
 8001b76:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001b7a:	f102 0204 	add.w	r2, r2, #4
 8001b7e:	6013      	str	r3, [r2, #0]
				for(int i =0; i< numofwords-1 ; i++)
 8001b80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001b92:	f103 0318 	add.w	r3, r3, #24
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	db9b      	blt.n	8001adc <check_data_print+0x19c>
				}

				/*truy�?n khúc cuối*/

				convertdata(Rx_Dataread[numofwords-1] , u);
 8001ba4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ba8:	f103 0318 	add.w	r3, r3, #24
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001bbc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001bc0:	f102 0204 	add.w	r2, r2, #4
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fdd9 	bl	800077e <convertdata>
//				HAL_UART_Transmit(&huart1,u,so_byte_conphaitruyen,0xFFFF);
				for(int m =0;m<so_byte_conphaitruyen;m++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001bd2:	f102 021c 	add.w	r2, r2, #28
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e040      	b.n	8001c5c <check_data_print+0x31c>
 8001bda:	bf00      	nop
 8001bdc:	200001dc 	.word	0x200001dc
 8001be0:	200001cc 	.word	0x200001cc
 8001be4:	200001d4 	.word	0x200001d4
 8001be8:	200001d8 	.word	0x200001d8
 8001bec:	20000a18 	.word	0x20000a18
 8001bf0:	200001d0 	.word	0x200001d0
 8001bf4:	08006ac0 	.word	0x08006ac0
 8001bf8:	200001e4 	.word	0x200001e4
 8001bfc:	200001e0 	.word	0x200001e0
 8001c00:	200001c8 	.word	0x200001c8
 8001c04:	08006acc 	.word	0x08006acc
				{
					PRINTER_TX_Buffer[tamtru]=u[m];
 8001c08:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001c0c:	f102 0204 	add.w	r2, r2, #4
 8001c10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001c14:	f103 031c 	add.w	r3, r3, #28
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	7819      	ldrb	r1, [r3, #0]
 8001c1e:	4a99      	ldr	r2, [pc, #612]	; (8001e84 <check_data_print+0x544>)
 8001c20:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c24:	f103 0304 	add.w	r3, r3, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	701a      	strb	r2, [r3, #0]
					tamtru++;
 8001c30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c34:	f103 0304 	add.w	r3, r3, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c40:	f102 0204 	add.w	r2, r2, #4
 8001c44:	6013      	str	r3, [r2, #0]
				for(int m =0;m<so_byte_conphaitruyen;m++)
 8001c46:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001c4a:	f103 031c 	add.w	r3, r3, #28
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001c56:	f102 021c 	add.w	r2, r2, #28
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001c60:	f103 031c 	add.w	r3, r3, #28
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001c6a:	f103 0310 	add.w	r3, r3, #16
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbc9      	blt.n	8001c08 <check_data_print+0x2c8>
				}
//				SERIAL_TO_SERVER("EOP");
//				SERIAL_TO_SERVER("endpackage");

				PRINTER_TX_Buffer[tamtru]='E';
 8001c74:	4a83      	ldr	r2, [pc, #524]	; (8001e84 <check_data_print+0x544>)
 8001c76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c7a:	f103 0304 	add.w	r3, r3, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	2245      	movs	r2, #69	; 0x45
 8001c84:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001c86:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c8a:	f103 0304 	add.w	r3, r3, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c96:	f102 0204 	add.w	r2, r2, #4
 8001c9a:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='O';
 8001c9c:	4a79      	ldr	r2, [pc, #484]	; (8001e84 <check_data_print+0x544>)
 8001c9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ca2:	f103 0304 	add.w	r3, r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	224f      	movs	r2, #79	; 0x4f
 8001cac:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001cae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001cb2:	f103 0304 	add.w	r3, r3, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cbe:	f102 0204 	add.w	r2, r2, #4
 8001cc2:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='P';
 8001cc4:	4a6f      	ldr	r2, [pc, #444]	; (8001e84 <check_data_print+0x544>)
 8001cc6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001cca:	f103 0304 	add.w	r3, r3, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2250      	movs	r2, #80	; 0x50
 8001cd4:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001cd6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001cda:	f103 0304 	add.w	r3, r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ce6:	f102 0204 	add.w	r2, r2, #4
 8001cea:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='\n';
 8001cec:	4a65      	ldr	r2, [pc, #404]	; (8001e84 <check_data_print+0x544>)
 8001cee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001cf2:	f103 0304 	add.w	r3, r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	220a      	movs	r2, #10
 8001cfc:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001cfe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d02:	f103 0304 	add.w	r3, r3, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d0e:	f102 0204 	add.w	r2, r2, #4
 8001d12:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='e';
 8001d14:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <check_data_print+0x544>)
 8001d16:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d1a:	f103 0304 	add.w	r3, r3, #4
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	2265      	movs	r2, #101	; 0x65
 8001d24:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d26:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d2a:	f103 0304 	add.w	r3, r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d36:	f102 0204 	add.w	r2, r2, #4
 8001d3a:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='o';
 8001d3c:	4a51      	ldr	r2, [pc, #324]	; (8001e84 <check_data_print+0x544>)
 8001d3e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d42:	f103 0304 	add.w	r3, r3, #4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	226f      	movs	r2, #111	; 0x6f
 8001d4c:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d4e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d52:	f103 0304 	add.w	r3, r3, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d5e:	f102 0204 	add.w	r2, r2, #4
 8001d62:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='p';
 8001d64:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <check_data_print+0x544>)
 8001d66:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d6a:	f103 0304 	add.w	r3, r3, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	2270      	movs	r2, #112	; 0x70
 8001d74:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d7a:	f103 0304 	add.w	r3, r3, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d86:	f102 0204 	add.w	r2, r2, #4
 8001d8a:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='\n';
 8001d8c:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <check_data_print+0x544>)
 8001d8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d92:	f103 0304 	add.w	r3, r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	220a      	movs	r2, #10
 8001d9c:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001da2:	f103 0304 	add.w	r3, r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001dae:	f102 0204 	add.w	r2, r2, #4
 8001db2:	6013      	str	r3, [r2, #0]

				quanlyESP.index_pkg ++;
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <check_data_print+0x548>)
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db8:	3301      	adds	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <check_data_print+0x548>)
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28
				u32_addr_data_user +=lentosend;
 8001dc0:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <check_data_print+0x54c>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <check_data_print+0x550>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <check_data_print+0x550>)
 8001dce:	6013      	str	r3, [r2, #0]
				quanlyESP.lentx =tamtru;
 8001dd0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001dd4:	f103 0304 	add.w	r3, r3, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <check_data_print+0x548>)
 8001dde:	84da      	strh	r2, [r3, #38]	; 0x26
				quanlyESP.cmd_tx =1U;
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <check_data_print+0x548>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	849a      	strh	r2, [r3, #36]	; 0x24
 8001de6:	e048      	b.n	8001e7a <check_data_print+0x53a>
		}
		else
		{
			/*kiểm tra xem còn gói package nào không*/
			if (ui32_package_index_sending < ui32_package_index_total)
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <check_data_print+0x554>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <check_data_print+0x558>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d202      	bcs.n	8001dfa <check_data_print+0x4ba>
			{
				/*get next package*/
				get_nextdata();
 8001df4:	f7ff fc5c 	bl	80016b0 <get_nextdata>
 8001df8:	e03f      	b.n	8001e7a <check_data_print+0x53a>
			else
			{
				/* kết thúc truy�?n*/
//				SERIAL_TO_SERVER("#CMD 10");

				quanlyESP.lentx = sprintf ((char *)PRINTER_TX_Buffer, "#CMD 10\n");
 8001dfa:	4928      	ldr	r1, [pc, #160]	; (8001e9c <check_data_print+0x55c>)
 8001dfc:	4821      	ldr	r0, [pc, #132]	; (8001e84 <check_data_print+0x544>)
 8001dfe:	f003 fa4d 	bl	800529c <siprintf>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <check_data_print+0x548>)
 8001e08:	84da      	strh	r2, [r3, #38]	; 0x26
				quanlyESP.cmd_tx =1U;
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <check_data_print+0x548>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	849a      	strh	r2, [r3, #36]	; 0x24

				/*xóa flash sau khi truy�?n qua esp*/
//				USBD_UsrLog(" !!!!!!!!!!! ------------debug 1957: uncomment this line");

				clear_flash();
 8001e10:	f7ff fd46 	bl	80018a0 <clear_flash>

				wait_res_init(1000);
 8001e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e18:	f7fe ff08 	bl	8000c2c <wait_res_init>

				ui8_finished_printer =0U;
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <check_data_print+0x560>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
				u32_addr_data_user = 0U;
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <check_data_print+0x550>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
				user_manage_request.number_printed_processing++;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <check_data_print+0x564>)
 8001e2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <check_data_print+0x564>)
 8001e34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				user_manage_request.duocphepdebug =DEBUG_OK;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <check_data_print+0x564>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001e40:	e01b      	b.n	8001e7a <check_data_print+0x53a>
			}
		}
	}
	else
	{
		ui8_status_esp =1U;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <check_data_print+0x568>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
		quanlyESP.cmd_tx =0U;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <check_data_print+0x548>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	849a      	strh	r2, [r3, #36]	; 0x24
		//kiểm tra xem có data in hay không
		if (user_manage_request.number_printed_processing < user_manage_request.number_printed)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <check_data_print+0x564>)
 8001e50:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <check_data_print+0x564>)
 8001e56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20d      	bcs.n	8001e7a <check_data_print+0x53a>
		{
			if(HAL_GetTick() > timer_process_bill )
 8001e5e:	f000 ff43 	bl	8002ce8 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <check_data_print+0x56c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d906      	bls.n	8001e7a <check_data_print+0x53a>
			{
				ui8_finished_printer =1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <check_data_print+0x560>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
				user_manage_request.duocphepdebug =DEBUG_BUSY;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <check_data_print+0x564>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			}
		}
	}
}
 8001e7a:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200001e4 	.word	0x200001e4
 8001e88:	20000a18 	.word	0x20000a18
 8001e8c:	200001c8 	.word	0x200001c8
 8001e90:	200001cc 	.word	0x200001cc
 8001e94:	200001d4 	.word	0x200001d4
 8001e98:	200001c4 	.word	0x200001c4
 8001e9c:	08006adc 	.word	0x08006adc
 8001ea0:	200001dc 	.word	0x200001dc
 8001ea4:	20001a54 	.word	0x20001a54
 8001ea8:	20001a4c 	.word	0x20001a4c
 8001eac:	20001a48 	.word	0x20001a48

08001eb0 <xuly_data_print_itx>:
 * xuly_data_print_itx()
 *
 *
 */
void xuly_data_print_itx()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	if (quanlyESP.cmd_tx == 1U)
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <xuly_data_print_itx+0x1c>)
 8001eb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d102      	bne.n	8001ec2 <xuly_data_print_itx+0x12>
	{
		transmit_to_esp_process();
 8001ebc:	f7ff fae8 	bl	8001490 <transmit_to_esp_process>
	}
	else
	{
		check_data_print();
	}
}
 8001ec0:	e001      	b.n	8001ec6 <xuly_data_print_itx+0x16>
		check_data_print();
 8001ec2:	f7ff fd3d 	bl	8001940 <check_data_print>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000a18 	.word	0x20000a18

08001ed0 <chuyentiepPrintertoPC>:
  * @param
  * @Note:
  */

void chuyentiepPrintertoPC()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
	//nhan data tu uart 3 gui cho uart2
	if(xulyUart.uart3_receivedData == 1 && xulyUart.uart2_processingData == 0)
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d15d      	bne.n	8001f9e <chuyentiepPrintertoPC+0xce>
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d157      	bne.n	8001f9e <chuyentiepPrintertoPC+0xce>
	  {
			HAL_UART_Transmit_IT(&huart2, xulyUart.ui8_tx2Data, xulyUart.ui16_tx2Size);
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef8:	461a      	mov	r2, r3
 8001efa:	492c      	ldr	r1, [pc, #176]	; (8001fac <chuyentiepPrintertoPC+0xdc>)
 8001efc:	482c      	ldr	r0, [pc, #176]	; (8001fb0 <chuyentiepPrintertoPC+0xe0>)
 8001efe:	f002 fa5c 	bl	80043ba <HAL_UART_Transmit_IT>
			xulyUart.uart2_processingData = 1;
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
			xulyUart.uart3_receivedData = 0;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	461a      	mov	r2, r3
 8001f16:	2300      	movs	r3, #0
 8001f18:	63d3      	str	r3, [r2, #60]	; 0x3c

			printf("to PC Size = %d : ", xulyUart.ui16_tx2Size);
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f24:	4619      	mov	r1, r3
 8001f26:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <chuyentiepPrintertoPC+0xe4>)
 8001f28:	f003 f916 	bl	8005158 <iprintf>
			for (int i = 0; i < xulyUart.ui16_tx2Size; i++) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	e020      	b.n	8001f74 <chuyentiepPrintertoPC+0xa4>
					printf("%02x ", xulyUart.ui8_tx2Data[i]);
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	f603 0321 	addw	r3, r3, #2081	; 0x821
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	481d      	ldr	r0, [pc, #116]	; (8001fb8 <chuyentiepPrintertoPC+0xe8>)
 8001f42:	f003 f909 	bl	8005158 <iprintf>

					if (i>0 && i % 20 == 0) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	dd10      	ble.n	8001f6e <chuyentiepPrintertoPC+0x9e>
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <chuyentiepPrintertoPC+0xec>)
 8001f50:	fb83 2301 	smull	r2, r3, r3, r1
 8001f54:	10da      	asrs	r2, r3, #3
 8001f56:	17cb      	asrs	r3, r1, #31
 8001f58:	1ad2      	subs	r2, r2, r3
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	1aca      	subs	r2, r1, r3
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d102      	bne.n	8001f6e <chuyentiepPrintertoPC+0x9e>
						printf("\n");
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f003 f90d 	bl	8005188 <putchar>
			for (int i = 0; i < xulyUart.ui16_tx2Size; i++) {
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3301      	adds	r3, #1
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dbd5      	blt.n	8001f32 <chuyentiepPrintertoPC+0x62>
					}
			  }
			printf("\n");
 8001f86:	200a      	movs	r0, #10
 8001f88:	f003 f8fe 	bl	8005188 <putchar>

			PrintUart3Data(xulyUart.ui8_rx3Data, xulyUart.ui16_tx2Size);
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <chuyentiepPrintertoPC+0xd8>)
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f96:	4619      	mov	r1, r3
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <chuyentiepPrintertoPC+0xf0>)
 8001f9a:	f7fe fcd5 	bl	8000948 <PrintUart3Data>
	  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20001d6c 	.word	0x20001d6c
 8001fac:	2000258d 	.word	0x2000258d
 8001fb0:	20000134 	.word	0x20000134
 8001fb4:	08006ae8 	.word	0x08006ae8
 8001fb8:	08006afc 	.word	0x08006afc
 8001fbc:	66666667 	.word	0x66666667
 8001fc0:	2000218d 	.word	0x2000218d

08001fc4 <chuyentiepPCtoPrinter>:
  *         Gửi dữ liệu nhận được từ PC, chuyển cho Printer
  * @param
  * @retval none
  */
void chuyentiepPCtoPrinter()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
	if (xulyUart.uart3_processingData == 1)return;	/* đang gửi tin */
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <chuyentiepPCtoPrinter+0x84>)
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d033      	beq.n	800203e <chuyentiepPCtoPrinter+0x7a>

		if(user_manage_request.request_dang_guitin < user_manage_request.request_tong_nhan)
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <chuyentiepPCtoPrinter+0x88>)
 8001fd8:	895a      	ldrh	r2, [r3, #10]
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <chuyentiepPCtoPrinter+0x88>)
 8001fdc:	88db      	ldrh	r3, [r3, #6]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d22e      	bcs.n	8002040 <chuyentiepPCtoPrinter+0x7c>
		{
			USER_REQUESET_TypeDef *pmydata;
			  int vitridoctin = user_manage_request.request_dang_guitin % MAX_USER_GET_USB_REQUEST;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <chuyentiepPCtoPrinter+0x88>)
 8001fe4:	895a      	ldrh	r2, [r3, #10]
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <chuyentiepPCtoPrinter+0x8c>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	08d9      	lsrs	r1, r3, #3
 8001fee:	460b      	mov	r3, r1
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
			  pmydata =&user_manage_request.request_noidung[vitridoctin];
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2246      	movs	r2, #70	; 0x46
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	3358      	adds	r3, #88	; 0x58
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <chuyentiepPCtoPrinter+0x88>)
 8002008:	4413      	add	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
			  int len = pmydata->noidung_chieudai;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002012:	607b      	str	r3, [r7, #4]
			  user_manage_request.request_dang_guitin++;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <chuyentiepPCtoPrinter+0x88>)
 8002016:	895b      	ldrh	r3, [r3, #10]
 8002018:	3301      	adds	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <chuyentiepPCtoPrinter+0x88>)
 800201e:	815a      	strh	r2, [r3, #10]

			  /* chuyển tiếp tin */
//			  printf("to prt : %d \n", len);
			  HAL_UART_Transmit_IT(&huart3, pmydata->noidung_data, len);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3302      	adds	r3, #2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	b292      	uxth	r2, r2
 8002028:	4619      	mov	r1, r3
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <chuyentiepPCtoPrinter+0x90>)
 800202c:	f002 f9c5 	bl	80043ba <HAL_UART_Transmit_IT>
			  xulyUart.uart3_processingData = 1;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <chuyentiepPCtoPrinter+0x84>)
 8002032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002036:	461a      	mov	r2, r3
 8002038:	2301      	movs	r3, #1
 800203a:	6353      	str	r3, [r2, #52]	; 0x34
 800203c:	e000      	b.n	8002040 <chuyentiepPCtoPrinter+0x7c>
	if (xulyUart.uart3_processingData == 1)return;	/* đang gửi tin */
 800203e:	bf00      	nop
		  HAL_UART_Transmit_IT(&huart3, xulyUart.ui8_tx3Data, xulyUart.ui16_tx3Size);
		  xulyUart.uart3_processingData = 1;
		  xulyUart.uart2_receivedData = 0;
	  }
#endif
}
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20001d6c 	.word	0x20001d6c
 800204c:	20001a54 	.word	0x20001a54
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	2000017c 	.word	0x2000017c

08002058 <inmainstatus>:

void inmainstatus()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	if ( HAL_GetTick() > ui32_counter_led )
 800205c:	f000 fe44 	bl	8002ce8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <inmainstatus+0xbc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d951      	bls.n	800210e <inmainstatus+0xb6>
	{

		if (status_led == 1U) {
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <inmainstatus+0xc0>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d126      	bne.n	80020c0 <inmainstatus+0x68>
			status_led =0;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <inmainstatus+0xc0>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,LED_Pin,1);
 8002078:	2201      	movs	r2, #1
 800207a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800207e:	4827      	ldr	r0, [pc, #156]	; (800211c <inmainstatus+0xc4>)
 8002080:	f001 fc5c 	bl	800393c <HAL_GPIO_WritePin>
			if(ui8_finished_printer == 1U)
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <inmainstatus+0xc8>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <inmainstatus+0x42>
			{
				ui32_counter_led=HAL_GetTick() + 100;
 800208c:	f000 fe2c 	bl	8002ce8 <HAL_GetTick>
 8002090:	4603      	mov	r3, r0
 8002092:	3364      	adds	r3, #100	; 0x64
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <inmainstatus+0xbc>)
 8002096:	6013      	str	r3, [r2, #0]
					ui32_counter_led=HAL_GetTick() + 500;
				}
			}
		}
	}
}
 8002098:	e039      	b.n	800210e <inmainstatus+0xb6>
				if(ui8_printer_status ==1U)
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <inmainstatus+0xcc>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d106      	bne.n	80020b0 <inmainstatus+0x58>
					ui32_counter_led=HAL_GetTick() + 50;
 80020a2:	f000 fe21 	bl	8002ce8 <HAL_GetTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	3332      	adds	r3, #50	; 0x32
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <inmainstatus+0xbc>)
 80020ac:	6013      	str	r3, [r2, #0]
}
 80020ae:	e02e      	b.n	800210e <inmainstatus+0xb6>
					ui32_counter_led=HAL_GetTick() + 500;
 80020b0:	f000 fe1a 	bl	8002ce8 <HAL_GetTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <inmainstatus+0xbc>)
 80020bc:	6013      	str	r3, [r2, #0]
}
 80020be:	e026      	b.n	800210e <inmainstatus+0xb6>
			status_led =1;
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <inmainstatus+0xc0>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,LED_Pin,0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020cc:	4813      	ldr	r0, [pc, #76]	; (800211c <inmainstatus+0xc4>)
 80020ce:	f001 fc35 	bl	800393c <HAL_GPIO_WritePin>
			if(ui8_finished_printer ==1U )
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <inmainstatus+0xc8>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d106      	bne.n	80020e8 <inmainstatus+0x90>
				ui32_counter_led=HAL_GetTick() + 100;
 80020da:	f000 fe05 	bl	8002ce8 <HAL_GetTick>
 80020de:	4603      	mov	r3, r0
 80020e0:	3364      	adds	r3, #100	; 0x64
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <inmainstatus+0xbc>)
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	e012      	b.n	800210e <inmainstatus+0xb6>
				if(ui8_printer_status ==1U)
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <inmainstatus+0xcc>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <inmainstatus+0xa8>
					ui32_counter_led=HAL_GetTick() + 950;
 80020f0:	f000 fdfa 	bl	8002ce8 <HAL_GetTick>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 80020fa:	4a06      	ldr	r2, [pc, #24]	; (8002114 <inmainstatus+0xbc>)
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	e006      	b.n	800210e <inmainstatus+0xb6>
					ui32_counter_led=HAL_GetTick() + 500;
 8002100:	f000 fdf2 	bl	8002ce8 <HAL_GetTick>
 8002104:	4603      	mov	r3, r0
 8002106:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800210a:	4a02      	ldr	r2, [pc, #8]	; (8002114 <inmainstatus+0xbc>)
 800210c:	6013      	str	r3, [r2, #0]
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20001a44 	.word	0x20001a44
 8002118:	20001a43 	.word	0x20001a43
 800211c:	40020c00 	.word	0x40020c00
 8002120:	200001dc 	.word	0x200001dc
 8002124:	20001a42 	.word	0x20001a42

08002128 <send_satatus>:

void send_satatus()
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af02      	add	r7, sp, #8
	if(ui8_finished_printer ==1U )
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <send_satatus+0x5c>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <send_satatus+0x20>
	{
		ui32_counter_send_status=HAL_GetTick() + 25000;
 8002136:	f000 fdd7 	bl	8002ce8 <HAL_GetTick>
 800213a:	4603      	mov	r3, r0
 800213c:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8002140:	3328      	adds	r3, #40	; 0x28
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <send_satatus+0x60>)
 8002144:	6013      	str	r3, [r2, #0]
		return;
 8002146:	e01b      	b.n	8002180 <send_satatus+0x58>
	}

	if ( HAL_GetTick() > ui32_counter_send_status )
 8002148:	f000 fdce 	bl	8002ce8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <send_satatus+0x60>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d914      	bls.n	8002180 <send_satatus+0x58>
	{
		ui32_counter_send_status=HAL_GetTick() + 25000;
 8002156:	f000 fdc7 	bl	8002ce8 <HAL_GetTick>
 800215a:	4603      	mov	r3, r0
 800215c:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8002160:	3328      	adds	r3, #40	; 0x28
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <send_satatus+0x60>)
 8002164:	6013      	str	r3, [r2, #0]
		SERIAL_TO_SERVER("CMD I%d %d.%d.%d", ui8_printer_status,HWVERSION,PRINTER_MODEL,RELEASEVS);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <send_satatus+0x64>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	2304      	movs	r3, #4
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2305      	movs	r3, #5
 8002172:	2203      	movs	r2, #3
 8002174:	4806      	ldr	r0, [pc, #24]	; (8002190 <send_satatus+0x68>)
 8002176:	f002 ffef 	bl	8005158 <iprintf>
 800217a:	200a      	movs	r0, #10
 800217c:	f003 f804 	bl	8005188 <putchar>
	}

}
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200001dc 	.word	0x200001dc
 8002188:	20002dc0 	.word	0x20002dc0
 800218c:	20001a42 	.word	0x20001a42
 8002190:	08006b04 	.word	0x08006b04

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219a:	f000 fd41 	bl	8002c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219e:	f000 f8ed 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a2:	f000 f9af 	bl	8002504 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80021a6:	f000 f92f 	bl	8002408 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021aa:	f000 f957 	bl	800245c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021ae:	f000 f97f 	bl	80024b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin, 1);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2110      	movs	r1, #16
 80021b6:	485d      	ldr	r0, [pc, #372]	; (800232c <main+0x198>)
 80021b8:	f001 fbc0 	bl	800393c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN2_Pin, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	485a      	ldr	r0, [pc, #360]	; (800232c <main+0x198>)
 80021c2:	f001 fbbb 	bl	800393c <HAL_GPIO_WritePin>

  xulyUart.CountTX = 0;
 80021c6:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <main+0x19c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
  xulyUart.ui8_indexUart = 0;
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <main+0x19c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	761a      	strb	r2, [r3, #24]

  HAL_UART_Receive_IT(&huart1, xulyUart.ui8_RX_buf, 1);
 80021d2:	2201      	movs	r2, #1
 80021d4:	4956      	ldr	r1, [pc, #344]	; (8002330 <main+0x19c>)
 80021d6:	4857      	ldr	r0, [pc, #348]	; (8002334 <main+0x1a0>)
 80021d8:	f002 f924 	bl	8004424 <HAL_UART_Receive_IT>

  /* thiết lập buffer nhận data từ PC */
  int i = pcommand->request_tong_nhan % MAX_USER_GET_USB_REQUEST;
 80021dc:	4b56      	ldr	r3, [pc, #344]	; (8002338 <main+0x1a4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	88da      	ldrh	r2, [r3, #6]
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <main+0x1a8>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	08d9      	lsrs	r1, r3, #3
 80021ea:	460b      	mov	r3, r1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	607b      	str	r3, [r7, #4]
  pmydataglobal =&pcommand->request_noidung[i];
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <main+0x1a4>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2146      	movs	r1, #70	; 0x46
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	3358      	adds	r3, #88	; 0x58
 8002206:	4413      	add	r3, r2
 8002208:	4a4d      	ldr	r2, [pc, #308]	; (8002340 <main+0x1ac>)
 800220a:	6013      	str	r3, [r2, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, pmydataglobal->noidung_data, CHUNK_SIZE);
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <main+0x1ac>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3302      	adds	r3, #2
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	4619      	mov	r1, r3
 8002216:	484b      	ldr	r0, [pc, #300]	; (8002344 <main+0x1b0>)
 8002218:	f002 f929 	bl	800446e <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_UARTEx_ReceiveToIdle_IT(&huart3, xulyUart.ui8_rx3Data, CHUNK_SIZE);
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	494a      	ldr	r1, [pc, #296]	; (8002348 <main+0x1b4>)
 8002220:	484a      	ldr	r0, [pc, #296]	; (800234c <main+0x1b8>)
 8002222:	f002 f924 	bl	800446e <HAL_UARTEx_ReceiveToIdle_IT>

//  uint32_t flash_write_start_time = 0;

  initialize_command_pair(0);
 8002226:	2000      	movs	r0, #0
 8002228:	f7fe fb70 	bl	800090c <initialize_command_pair>
  USBD_UsrLogCog("\n init values: \n");
 800222c:	4848      	ldr	r0, [pc, #288]	; (8002350 <main+0x1bc>)
 800222e:	f003 f82d 	bl	800528c <puts>
  USBD_UsrLogCog(" selected_start_cmd: %d \n",0);
 8002232:	2100      	movs	r1, #0
 8002234:	4847      	ldr	r0, [pc, #284]	; (8002354 <main+0x1c0>)
 8002236:	f002 ff8f 	bl	8005158 <iprintf>

  printf("selected_start_cmd = %d : ", selected_start_len);
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <main+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4619      	mov	r1, r3
 8002240:	4846      	ldr	r0, [pc, #280]	; (800235c <main+0x1c8>)
 8002242:	f002 ff89 	bl	8005158 <iprintf>
  			for (int i = 0; i < selected_start_len; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e01f      	b.n	800228c <main+0xf8>
  					printf("%02x ", selected_start_cmd[i]);
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <main+0x1cc>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	4842      	ldr	r0, [pc, #264]	; (8002364 <main+0x1d0>)
 800225a:	f002 ff7d 	bl	8005158 <iprintf>

  					if (i>0 && i % 20 == 0) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	dd10      	ble.n	8002286 <main+0xf2>
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <main+0x1d4>)
 8002268:	fb83 2301 	smull	r2, r3, r3, r1
 800226c:	10da      	asrs	r2, r3, #3
 800226e:	17cb      	asrs	r3, r1, #31
 8002270:	1ad2      	subs	r2, r2, r3
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	1aca      	subs	r2, r1, r3
 800227c:	2a00      	cmp	r2, #0
 800227e:	d102      	bne.n	8002286 <main+0xf2>
  						printf("\n");
 8002280:	200a      	movs	r0, #10
 8002282:	f002 ff81 	bl	8005188 <putchar>
  			for (int i = 0; i < selected_start_len; i++) {
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3301      	adds	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <main+0x1c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	429a      	cmp	r2, r3
 8002294:	dbda      	blt.n	800224c <main+0xb8>
  					}
  			  }
  			printf("\n");
 8002296:	200a      	movs	r0, #10
 8002298:	f002 ff76 	bl	8005188 <putchar>

  		  printf("selected_end_sig = %d : ", selected_end_len);
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <main+0x1d8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4833      	ldr	r0, [pc, #204]	; (8002370 <main+0x1dc>)
 80022a4:	f002 ff58 	bl	8005158 <iprintf>
  		  			for (int i = 0; i < selected_end_len; i++) {
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	e01f      	b.n	80022ee <main+0x15a>
  		  					printf("%02x ", selected_end_sig[i]);
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <main+0x1e0>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	482a      	ldr	r0, [pc, #168]	; (8002364 <main+0x1d0>)
 80022bc:	f002 ff4c 	bl	8005158 <iprintf>

  		  					if (i>0 && i % 20 == 0) {
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	dd10      	ble.n	80022e8 <main+0x154>
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <main+0x1d4>)
 80022ca:	fb83 2301 	smull	r2, r3, r3, r1
 80022ce:	10da      	asrs	r2, r3, #3
 80022d0:	17cb      	asrs	r3, r1, #31
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	1aca      	subs	r2, r1, r3
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d102      	bne.n	80022e8 <main+0x154>
  		  						printf("\n");
 80022e2:	200a      	movs	r0, #10
 80022e4:	f002 ff50 	bl	8005188 <putchar>
  		  			for (int i = 0; i < selected_end_len; i++) {
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3301      	adds	r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <main+0x1d8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbda      	blt.n	80022ae <main+0x11a>
  		  					}
  		  			  }
  		  			printf("\n");
 80022f8:	200a      	movs	r0, #10
 80022fa:	f002 ff45 	bl	8005188 <putchar>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  inmainstatus();
 80022fe:	f7ff feab 	bl	8002058 <inmainstatus>
	  send_satatus();
 8002302:	f7ff ff11 	bl	8002128 <send_satatus>
      kiemtra_request_tu_PC();
 8002306:	f7fe feb3 	bl	8001070 <kiemtra_request_tu_PC>
      xuly_data_print_itx();
 800230a:	f7ff fdd1 	bl	8001eb0 <xuly_data_print_itx>

      chuyentiepPCtoPrinter();
 800230e:	f7ff fe59 	bl	8001fc4 <chuyentiepPCtoPrinter>
      chuyentiepPrintertoPC();
 8002312:	f7ff fddd 	bl	8001ed0 <chuyentiepPrintertoPC>

	  if(quanlyESP.newcmd == 1)
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <main+0x1e4>)
 8002318:	7edb      	ldrb	r3, [r3, #27]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d1ef      	bne.n	80022fe <main+0x16a>
	  {
		  quanlyESP.newcmd = 0;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <main+0x1e4>)
 8002320:	2200      	movs	r2, #0
 8002322:	76da      	strb	r2, [r3, #27]
		  xuly_package_ESP();
 8002324:	f7fe fc98 	bl	8000c58 <xuly_package_ESP>
	  inmainstatus();
 8002328:	e7e9      	b.n	80022fe <main+0x16a>
 800232a:	bf00      	nop
 800232c:	40020800 	.word	0x40020800
 8002330:	20001d6c 	.word	0x20001d6c
 8002334:	200000ec 	.word	0x200000ec
 8002338:	20000020 	.word	0x20000020
 800233c:	cccccccd 	.word	0xcccccccd
 8002340:	20001d68 	.word	0x20001d68
 8002344:	20000134 	.word	0x20000134
 8002348:	2000218d 	.word	0x2000218d
 800234c:	2000017c 	.word	0x2000017c
 8002350:	08006b18 	.word	0x08006b18
 8002354:	08006b28 	.word	0x08006b28
 8002358:	200000dc 	.word	0x200000dc
 800235c:	08006b44 	.word	0x08006b44
 8002360:	200000d8 	.word	0x200000d8
 8002364:	08006afc 	.word	0x08006afc
 8002368:	66666667 	.word	0x66666667
 800236c:	200000e4 	.word	0x200000e4
 8002370:	08006b60 	.word	0x08006b60
 8002374:	200000e0 	.word	0x200000e0
 8002378:	20000a18 	.word	0x20000a18

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b092      	sub	sp, #72	; 0x48
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	2230      	movs	r2, #48	; 0x30
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fedc 	bl	8005148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a6:	2302      	movs	r3, #2
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 20;
 80023b0:	2314      	movs	r3, #20
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80023b4:	23c0      	movs	r3, #192	; 0xc0
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b8:	2302      	movs	r3, #2
 80023ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023bc:	2304      	movs	r3, #4
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fad1 	bl	800396c <HAL_RCC_OscConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023d0:	f000 fa18 	bl	8002804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d4:	230f      	movs	r3, #15
 80023d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d8:	2302      	movs	r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2103      	movs	r1, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fd0f 	bl	8003e14 <HAL_RCC_ClockConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023fc:	f000 fa02 	bl	8002804 <Error_Handler>
  }
}
 8002400:	bf00      	nop
 8002402:	3748      	adds	r7, #72	; 0x48
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <MX_USART1_UART_Init+0x50>)
 8002410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002440:	f001 fee8 	bl	8004214 <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800244a:	f000 f9db 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200000ec 	.word	0x200000ec
 8002458:	40011000 	.word	0x40011000

0800245c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART2_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002494:	f001 febe 	bl	8004214 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f000 f9b1 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000134 	.word	0x20000134
 80024ac:	40004400 	.word	0x40004400

080024b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_USART3_UART_Init+0x50>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_USART3_UART_Init+0x4c>)
 80024e8:	f001 fe94 	bl	8004214 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024f2:	f000 f987 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000017c 	.word	0x2000017c
 8002500:	40004800 	.word	0x40004800

08002504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a37      	ldr	r2, [pc, #220]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b35      	ldr	r3, [pc, #212]	; (8002600 <MX_GPIO_Init+0xfc>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <MX_GPIO_Init+0xfc>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a29      	ldr	r2, [pc, #164]	; (8002600 <MX_GPIO_Init+0xfc>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b27      	ldr	r3, [pc, #156]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a22      	ldr	r2, [pc, #136]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <MX_GPIO_Init+0xfc>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	2130      	movs	r1, #48	; 0x30
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <MX_GPIO_Init+0x100>)
 8002590:	f001 f9d4 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800259a:	481b      	ldr	r0, [pc, #108]	; (8002608 <MX_GPIO_Init+0x104>)
 800259c:	f001 f9ce 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 80025a0:	2310      	movs	r3, #16
 80025a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_GPIO_Init+0x100>)
 80025b8:	f001 f822 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 80025bc:	2320      	movs	r3, #32
 80025be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4619      	mov	r1, r3
 80025d2:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_GPIO_Init+0x100>)
 80025d4:	f001 f814 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80025d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	2301      	movs	r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_GPIO_Init+0x104>)
 80025f2:	f001 f805 	bl	8003600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00

0800260c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

	//	#data$
#if (1)
	 if(huart->Instance == USART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a24      	ldr	r2, [pc, #144]	; (80026ac <HAL_UART_RxCpltCallback+0xa0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d142      	bne.n	80026a4 <HAL_UART_RxCpltCallback+0x98>
	 {

	/*xử lý nhận uart theo gói*/
		 	 uint8_t inchar = quanlyESP.RX_buf[0];
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	73fb      	strb	r3, [r7, #15]

		 	if (quanlyESP.busy == 0)
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002626:	7d9b      	ldrb	r3, [r3, #22]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d136      	bne.n	800269a <HAL_UART_RxCpltCallback+0x8e>
		 	{
				 if(inchar =='#')
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b23      	cmp	r3, #35	; 0x23
 8002630:	d105      	bne.n	800263e <HAL_UART_RxCpltCallback+0x32>
				{
					quanlyESP.RX=1;
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002634:	2201      	movs	r2, #1
 8002636:	761a      	strb	r2, [r3, #24]
					quanlyESP.index_uarrt =0;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 800263a:	2200      	movs	r2, #0
 800263c:	765a      	strb	r2, [r3, #25]
				}

				if(quanlyESP.RX ==1)
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002640:	7e1b      	ldrb	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d123      	bne.n	800268e <HAL_UART_RxCpltCallback+0x82>
				{
						quanlyESP.str[quanlyESP.index_uarrt]=inchar;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002648:	7e5b      	ldrb	r3, [r3, #25]
 800264a:	461a      	mov	r2, r3
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 800264e:	4413      	add	r3, r2
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	709a      	strb	r2, [r3, #2]
						quanlyESP.index_uarrt++;
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002656:	7e5b      	ldrb	r3, [r3, #25]
 8002658:	3301      	adds	r3, #1
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 800265e:	765a      	strb	r2, [r3, #25]

						if (quanlyESP.index_uarrt > MAX_BUFFER_CMD_ESP -1 )
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002662:	7e5b      	ldrb	r3, [r3, #25]
 8002664:	2b13      	cmp	r3, #19
 8002666:	d905      	bls.n	8002674 <HAL_UART_RxCpltCallback+0x68>
						{
							/*tràn buffer*/
							quanlyESP.RX=0;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 800266a:	2200      	movs	r2, #0
 800266c:	761a      	strb	r2, [r3, #24]
							quanlyESP.index_uarrt =0;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	765a      	strb	r2, [r3, #25]
						}
						if (inchar =='$')
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b24      	cmp	r3, #36	; 0x24
 8002678:	d10f      	bne.n	800269a <HAL_UART_RxCpltCallback+0x8e>
						{
							quanlyESP.newcmd =1;
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 800267c:	2201      	movs	r2, #1
 800267e:	76da      	strb	r2, [r3, #27]
							quanlyESP.RX=0;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002682:	2200      	movs	r2, #0
 8002684:	761a      	strb	r2, [r3, #24]
							quanlyESP.busy =1;
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002688:	2201      	movs	r2, #1
 800268a:	759a      	strb	r2, [r3, #22]
 800268c:	e005      	b.n	800269a <HAL_UART_RxCpltCallback+0x8e>
						}
				}
				else
				{
					quanlyESP.newpagkage =1;
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002690:	2201      	movs	r2, #1
 8002692:	769a      	strb	r2, [r3, #26]
					quanlyESP.newinchar=inchar;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	75d3      	strb	r3, [r2, #23]
				}
		 	}

			HAL_UART_Receive_IT(&huart1, quanlyESP.RX_buf,1);
 800269a:	2201      	movs	r2, #1
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_UART_RxCpltCallback+0xa4>)
 800269e:	4805      	ldr	r0, [pc, #20]	; (80026b4 <HAL_UART_RxCpltCallback+0xa8>)
 80026a0:	f001 fec0 	bl	8004424 <HAL_UART_Receive_IT>
	 }
#endif

}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40011000 	.word	0x40011000
 80026b0:	20000a18 	.word	0x20000a18
 80026b4:	200000ec 	.word	0x200000ec

080026b8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
	static int vitriluutin;

	if (huart->Instance == USART2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <HAL_UARTEx_RxEventCallback+0xbc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12d      	bne.n	800272a <HAL_UARTEx_RxEventCallback+0x72>
			printf("\n");
		}
#endif

		/* thông báo có data mới */
		pmydataglobal->noidung_chieudai = Size;
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_UARTEx_RxEventCallback+0xc0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pcommand->request_tong_nhan++;
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_UARTEx_RxEventCallback+0xc4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	88da      	ldrh	r2, [r3, #6]
 80026de:	3201      	adds	r2, #1
 80026e0:	b292      	uxth	r2, r2
 80026e2:	80da      	strh	r2, [r3, #6]

		/* chuẩn bị buffer để lưu data mới */
		vitriluutin = pcommand->request_tong_nhan % MAX_USER_GET_USB_REQUEST;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_UARTEx_RxEventCallback+0xc4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	88da      	ldrh	r2, [r3, #6]
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_UARTEx_RxEventCallback+0xc8>)
 80026ec:	fba3 1302 	umull	r1, r3, r3, r2
 80026f0:	08d9      	lsrs	r1, r3, #3
 80026f2:	460b      	mov	r3, r1
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002702:	601a      	str	r2, [r3, #0]
		pmydataglobal =&pcommand->request_noidung[vitriluutin];
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_UARTEx_RxEventCallback+0xcc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2146      	movs	r1, #70	; 0x46
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	3358      	adds	r3, #88	; 0x58
 8002714:	4413      	add	r3, r2
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002718:	6013      	str	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, pmydataglobal->noidung_data, CHUNK_SIZE);
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_UARTEx_RxEventCallback+0xc0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3302      	adds	r3, #2
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	4619      	mov	r1, r3
 8002724:	4818      	ldr	r0, [pc, #96]	; (8002788 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002726:	f001 fea2 	bl	800446e <HAL_UARTEx_ReceiveToIdle_IT>

	}
	if (huart->Instance == USART3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d11b      	bne.n	800276c <HAL_UARTEx_RxEventCallback+0xb4>
	{
		/* thông báo có data mới */
		xulyUart.ui16_tx2Size = Size;
 8002734:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273a:	461a      	mov	r2, r3
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		memcpy(xulyUart.ui8_tx2Data, xulyUart.ui8_rx3Data, xulyUart.ui16_tx2Size);
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800274c:	461a      	mov	r2, r3
 800274e:	4911      	ldr	r1, [pc, #68]	; (8002794 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002750:	4811      	ldr	r0, [pc, #68]	; (8002798 <HAL_UARTEx_RxEventCallback+0xe0>)
 8002752:	f002 fceb 	bl	800512c <memcpy>
		xulyUart.uart3_receivedData = 1;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	63d3      	str	r3, [r2, #60]	; 0x3c

		/* chuẩn bị buffer để lưu data mới */
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, xulyUart.ui8_rx3Data, CHUNK_SIZE);
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	490b      	ldr	r1, [pc, #44]	; (8002794 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002766:	480d      	ldr	r0, [pc, #52]	; (800279c <HAL_UARTEx_RxEventCallback+0xe4>)
 8002768:	f001 fe81 	bl	800446e <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40004400 	.word	0x40004400
 8002778:	20001d68 	.word	0x20001d68
 800277c:	20000020 	.word	0x20000020
 8002780:	cccccccd 	.word	0xcccccccd
 8002784:	20002dc4 	.word	0x20002dc4
 8002788:	20000134 	.word	0x20000134
 800278c:	40004800 	.word	0x40004800
 8002790:	20001d6c 	.word	0x20001d6c
 8002794:	2000218d 	.word	0x2000218d
 8002798:	2000258d 	.word	0x2000258d
 800279c:	2000017c 	.word	0x2000017c

080027a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_UART_TxCpltCallback+0x50>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d102      	bne.n	80027b8 <HAL_UART_TxCpltCallback+0x18>
	{
		quanlyESP.status_tx_datruyenxong = 1;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_UART_TxCpltCallback+0x54>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	775a      	strb	r2, [r3, #29]
	}
	if (huart->Instance == USART2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_UART_TxCpltCallback+0x58>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d105      	bne.n	80027ce <HAL_UART_TxCpltCallback+0x2e>
	{
		xulyUart.uart2_processingData = 0;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_UART_TxCpltCallback+0x5c>)
 80027c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c8:	461a      	mov	r2, r3
 80027ca:	2300      	movs	r3, #0
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if (huart->Instance == USART3)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_UART_TxCpltCallback+0x60>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d105      	bne.n	80027e4 <HAL_UART_TxCpltCallback+0x44>
	{
		xulyUart.uart3_processingData = 0;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_UART_TxCpltCallback+0x5c>)
 80027da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027de:	461a      	mov	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40011000 	.word	0x40011000
 80027f4:	20000a18 	.word	0x20000a18
 80027f8:	40004400 	.word	0x40004400
 80027fc:	20001d6c 	.word	0x20001d6c
 8002800:	40004800 	.word	0x40004800

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800280c:	e7fe      	b.n	800280c <Error_Handler+0x8>
	...

08002810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_MspInit+0x48>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_MspInit+0x48>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_MspInit+0x48>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_MspInit+0x48>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_MspInit+0x48>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_MspInit+0x48>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	; 0x38
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_UART_MspInit+0x180>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d135      	bne.n	80028ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a56      	ldr	r2, [pc, #344]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002888:	f043 0310 	orr.w	r3, r3, #16
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_UART_MspInit+0x184>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_UART_MspInit+0x184>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_UART_MspInit+0x184>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c8:	2307      	movs	r3, #7
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	4619      	mov	r1, r3
 80028d2:	4844      	ldr	r0, [pc, #272]	; (80029e4 <HAL_UART_MspInit+0x188>)
 80028d4:	f000 fe94 	bl	8003600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	2025      	movs	r0, #37	; 0x25
 80028de:	f000 fae4 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028e2:	2025      	movs	r0, #37	; 0x25
 80028e4:	f000 fafd 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028e8:	e073      	b.n	80029d2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a3e      	ldr	r2, [pc, #248]	; (80029e8 <HAL_UART_MspInit+0x18c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d134      	bne.n	800295e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_UART_MspInit+0x184>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <HAL_UART_MspInit+0x184>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <HAL_UART_MspInit+0x184>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800292c:	230c      	movs	r3, #12
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002938:	2303      	movs	r3, #3
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293c:	2307      	movs	r3, #7
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4827      	ldr	r0, [pc, #156]	; (80029e4 <HAL_UART_MspInit+0x188>)
 8002948:	f000 fe5a 	bl	8003600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2026      	movs	r0, #38	; 0x26
 8002952:	f000 faaa 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002956:	2026      	movs	r0, #38	; 0x26
 8002958:	f000 fac3 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
}
 800295c:	e039      	b.n	80029d2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_UART_MspInit+0x190>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d134      	bne.n	80029d2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_UART_MspInit+0x184>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002976:	6413      	str	r3, [r2, #64]	; 0x40
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_UART_MspInit+0x184>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_UART_MspInit+0x184>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0x184>)
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_UART_MspInit+0x184>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029b2:	2307      	movs	r3, #7
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <HAL_UART_MspInit+0x194>)
 80029be:	f000 fe1f 	bl	8003600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2027      	movs	r0, #39	; 0x27
 80029c8:	f000 fa6f 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029cc:	2027      	movs	r0, #39	; 0x27
 80029ce:	f000 fa88 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3738      	adds	r7, #56	; 0x38
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020000 	.word	0x40020000
 80029e8:	40004400 	.word	0x40004400
 80029ec:	40004800 	.word	0x40004800
 80029f0:	40020c00 	.word	0x40020c00

080029f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f8:	e7fe      	b.n	80029f8 <NMI_Handler+0x4>

080029fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <HardFault_Handler+0x4>

08002a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <MemManage_Handler+0x4>

08002a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <BusFault_Handler+0x4>

08002a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <UsageFault_Handler+0x4>

08002a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3a:	f000 f943 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <USART1_IRQHandler+0x10>)
 8002a4a:	f001 fd6d 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200000ec 	.word	0x200000ec

08002a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <USART2_IRQHandler+0x10>)
 8002a5e:	f001 fd63 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000134 	.word	0x20000134

08002a6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <USART3_IRQHandler+0x10>)
 8002a72:	f001 fd59 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000017c 	.word	0x2000017c

08002a80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e00a      	b.n	8002aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a92:	f3af 8000 	nop.w
 8002a96:	4601      	mov	r1, r0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf0      	blt.n	8002a92 <_read+0x12>
  }

  return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e009      	b.n	8002ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd ff25 	bl	8000924 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbf1      	blt.n	8002acc <_write+0x12>
  }
  return len;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_close>:

int _close(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b18:	605a      	str	r2, [r3, #4]
  return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <_isatty>:

int _isatty(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <_sbrk+0x5c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_sbrk+0x60>)
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <_sbrk+0x64>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <_sbrk+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b84:	f002 fa98 	bl	80050b8 <__errno>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	e009      	b.n	8002ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <_sbrk+0x64>)
 8002ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20020000 	.word	0x20020000
 8002bb4:	00000400 	.word	0x00000400
 8002bb8:	20002dc8 	.word	0x20002dc8
 8002bbc:	20002e00 	.word	0x20002e00

08002bc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002bd0:	f7ff fff6 	bl	8002bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bec:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f002 fa63 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfe:	f7ff fac9 	bl	8002194 <main>
  bx  lr    
 8002c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002c10:	08006c6c 	.word	0x08006c6c
  ldr r2, =_sbss
 8002c14:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002c18:	20002e00 	.word	0x20002e00

08002c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_Init+0x40>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_Init+0x40>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_Init+0x40>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f000 f923 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fddc 	bl	8002810 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f93b 	bl	8002efe <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f000 f903 	bl	8002eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000024 	.word	0x20000024
 8002cbc:	2000002c 	.word	0x2000002c
 8002cc0:	20000028 	.word	0x20000028

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	2000002c 	.word	0x2000002c
 8002ce4:	20002dcc 	.word	0x20002dcc

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <HAL_GetTick+0x10>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20002dcc 	.word	0x20002dcc

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4906      	ldr	r1, [pc, #24]	; (8002d94 <__NVIC_EnableIRQ+0x34>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f7ff ff90 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff2d 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebc:	f7ff ff42 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff90 	bl	8002dec <NVIC_EncodePriority>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff5f 	bl	8002d98 <__NVIC_SetPriority>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff35 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ffa2 	bl	8002e50 <SysTick_Config>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7ff fee0 	bl	8002ce8 <HAL_GetTick>
 8002f28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d008      	beq.n	8002f48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e052      	b.n	8002fee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0216 	bic.w	r2, r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <HAL_DMA_Abort+0x62>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0208 	bic.w	r2, r2, #8
 8002f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f98:	e013      	b.n	8002fc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9a:	f7ff fea5 	bl	8002ce8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d90c      	bls.n	8002fc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e015      	b.n	8002fee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e4      	bne.n	8002f9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d004      	beq.n	8003014 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e00c      	b.n	800302e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2205      	movs	r2, #5
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_FLASH_Program+0xa0>)
 800304c:	7e1b      	ldrb	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_FLASH_Program+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e03b      	b.n	80030ce <HAL_FLASH_Program+0x96>
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_FLASH_Program+0xa0>)
 8003058:	2201      	movs	r2, #1
 800305a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800305c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003060:	f000 f87a 	bl	8003158 <FLASH_WaitForLastOperation>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d12b      	bne.n	80030c6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003074:	783b      	ldrb	r3, [r7, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	68b8      	ldr	r0, [r7, #8]
 800307a:	f000 f923 	bl	80032c4 <FLASH_Program_Byte>
 800307e:	e016      	b.n	80030ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003086:	883b      	ldrh	r3, [r7, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f000 f8f8 	bl	8003280 <FLASH_Program_HalfWord>
 8003090:	e00d      	b.n	80030ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d105      	bne.n	80030a4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	68b8      	ldr	r0, [r7, #8]
 800309e:	f000 f8cd 	bl	800323c <FLASH_Program_Word>
 80030a2:	e004      	b.n	80030ae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80030a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f000 f895 	bl	80031d8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030b2:	f000 f851 	bl	8003158 <FLASH_WaitForLastOperation>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_FLASH_Program+0xa4>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <HAL_FLASH_Program+0xa4>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <HAL_FLASH_Program+0xa0>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	761a      	strb	r2, [r3, #24]
  
  return status;
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20002dd0 	.word	0x20002dd0
 80030dc:	40023c00 	.word	0x40023c00

080030e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_FLASH_Unlock+0x38>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0b      	bge.n	800310a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_FLASH_Unlock+0x38>)
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_FLASH_Unlock+0x3c>)
 80030f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_FLASH_Unlock+0x38>)
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <HAL_FLASH_Unlock+0x40>)
 80030fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_FLASH_Unlock+0x38>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da01      	bge.n	800310a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800310a:	79fb      	ldrb	r3, [r7, #7]
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00
 800311c:	45670123 	.word	0x45670123
 8003120:	cdef89ab 	.word	0xcdef89ab

08003124 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_FLASH_Lock+0x1c>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_FLASH_Lock+0x1c>)
 800312e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003132:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00

08003144 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <HAL_FLASH_GetError+0x10>)
 800314a:	69db      	ldr	r3, [r3, #28]
}  
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	20002dd0 	.word	0x20002dd0

08003158 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <FLASH_WaitForLastOperation+0x78>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800316a:	f7ff fdbd 	bl	8002ce8 <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003170:	e010      	b.n	8003194 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d00c      	beq.n	8003194 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <FLASH_WaitForLastOperation+0x38>
 8003180:	f7ff fdb2 	bl	8002ce8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d201      	bcs.n	8003194 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e019      	b.n	80031c8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e8      	bne.n	8003172 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <FLASH_WaitForLastOperation+0x7c>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80031be:	f000 f8a1 	bl	8003304 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
  
}  
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20002dd0 	.word	0x20002dd0
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4a10      	ldr	r2, [pc, #64]	; (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <FLASH_Program_DoubleWord+0x60>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <FLASH_Program_DoubleWord+0x60>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800320e:	f3bf 8f6f 	isb	sy
}
 8003212:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	000a      	movs	r2, r1
 8003222:	2300      	movs	r3, #0
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	3104      	adds	r1, #4
 8003228:	4613      	mov	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <FLASH_Program_Word+0x40>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <FLASH_Program_Word+0x40>)
 800324c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003250:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <FLASH_Program_Word+0x40>)
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <FLASH_Program_Word+0x40>)
 8003258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <FLASH_Program_Word+0x40>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	4a06      	ldr	r2, [pc, #24]	; (800327c <FLASH_Program_Word+0x40>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00

08003280 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <FLASH_Program_HalfWord+0x40>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <FLASH_Program_HalfWord+0x40>)
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <FLASH_Program_HalfWord+0x40>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <FLASH_Program_HalfWord+0x40>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <FLASH_Program_HalfWord+0x40>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <FLASH_Program_HalfWord+0x40>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	801a      	strh	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40023c00 	.word	0x40023c00

080032c4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <FLASH_Program_Byte+0x3c>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <FLASH_Program_Byte+0x3c>)
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <FLASH_Program_Byte+0x3c>)
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <FLASH_Program_Byte+0x3c>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <FLASH_Program_Byte+0x3c>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4a05      	ldr	r2, [pc, #20]	; (8003300 <FLASH_Program_Byte+0x3c>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	701a      	strb	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40023c00 	.word	0x40023c00

08003304 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 800331e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 8003322:	2210      	movs	r2, #16
 8003324:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 800333c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 8003340:	2220      	movs	r2, #32
 8003342:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 800335a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 8003378:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f043 0310 	orr.w	r3, r3, #16
 8003394:	4a05      	ldr	r2, [pc, #20]	; (80033ac <FLASH_SetErrorCode+0xa8>)
 8003396:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <FLASH_SetErrorCode+0xa4>)
 800339a:	2202      	movs	r2, #2
 800339c:	60da      	str	r2, [r3, #12]
  }
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	20002dd0 	.word	0x20002dd0

080033b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_FLASHEx_Erase+0xd8>)
 80033c4:	7e1b      	ldrb	r3, [r3, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_FLASHEx_Erase+0x1e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e058      	b.n	8003480 <HAL_FLASHEx_Erase+0xd0>
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_FLASHEx_Erase+0xd8>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033d8:	f7ff febe 	bl	8003158 <FLASH_WaitForLastOperation>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d148      	bne.n	8003478 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d115      	bne.n	8003422 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 f8da 	bl	80035bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003408:	f24c 3050 	movw	r0, #50000	; 0xc350
 800340c:	f7ff fea4 	bl	8003158 <FLASH_WaitForLastOperation>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_FLASHEx_Erase+0xdc>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_FLASHEx_Erase+0xdc>)
 800341a:	f023 0304 	bic.w	r3, r3, #4
 800341e:	6113      	str	r3, [r2, #16]
 8003420:	e028      	b.n	8003474 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e01c      	b.n	8003464 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f000 f82c 	bl	8003490 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800343c:	f7ff fe8c 	bl	8003158 <FLASH_WaitForLastOperation>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_FLASHEx_Erase+0xdc>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_FLASHEx_Erase+0xdc>)
 800344a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800344e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	601a      	str	r2, [r3, #0]
          break;
 800345c:	e00a      	b.n	8003474 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3301      	adds	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4413      	add	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d3da      	bcc.n	800342a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003474:	f000 f85e 	bl	8003534 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_FLASHEx_Erase+0xd8>)
 800347a:	2200      	movs	r2, #0
 800347c:	761a      	strb	r2, [r3, #24]

  return status;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20002dd0 	.word	0x20002dd0
 800348c:	40023c00 	.word	0x40023c00

08003490 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e010      	b.n	80034ce <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d103      	bne.n	80034ba <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80034b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e009      	b.n	80034ce <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d103      	bne.n	80034c8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80034c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e002      	b.n	80034ce <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80034c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034cc:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 80034d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	4914      	ldr	r1, [pc, #80]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	4a11      	ldr	r2, [pc, #68]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 80034ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034f0:	6113      	str	r3, [r2, #16]
 80034f2:	23f8      	movs	r3, #248	; 0xf8
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034fe:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4093      	lsls	r3, r2
 800350c:	f043 0202 	orr.w	r2, r3, #2
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	4906      	ldr	r1, [pc, #24]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <FLASH_Erase_Sector+0xa0>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6113      	str	r3, [r2, #16]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40023c00 	.word	0x40023c00

08003534 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003540:	2b00      	cmp	r3, #0
 8003542:	d017      	beq.n	8003574 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800354a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800354e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003566:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003568:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800356e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003572:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <FLASH_FlushCaches+0x84>)
 8003592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <FLASH_FlushCaches+0x84>)
 800359e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <FLASH_FlushCaches+0x84>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <FLASH_FlushCaches+0x84>)
 80035aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ae:	6013      	str	r3, [r2, #0]
  }
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40023c00 	.word	0x40023c00

080035bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <FLASH_MassErase+0x40>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <FLASH_MassErase+0x40>)
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <FLASH_MassErase+0x40>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	4a08      	ldr	r2, [pc, #32]	; (80035fc <FLASH_MassErase+0x40>)
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <FLASH_MassErase+0x40>)
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4313      	orrs	r3, r2
 80035ea:	4a04      	ldr	r2, [pc, #16]	; (80035fc <FLASH_MassErase+0x40>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6113      	str	r3, [r2, #16]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40023c00 	.word	0x40023c00

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360e:	e16f      	b.n	80038f0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	4013      	ands	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8161 	beq.w	80038ea <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d005      	beq.n	8003640 <HAL_GPIO_Init+0x40>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d130      	bne.n	80036a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003676:	2201      	movs	r2, #1
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 0201 	and.w	r2, r3, #1
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d017      	beq.n	80036de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	2203      	movs	r2, #3
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d123      	bne.n	8003732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	08da      	lsrs	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3208      	adds	r2, #8
 80036f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4013      	ands	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	08da      	lsrs	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3208      	adds	r2, #8
 800372c:	6939      	ldr	r1, [r7, #16]
 800372e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0203 	and.w	r2, r3, #3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80bb 	beq.w	80038ea <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	4b64      	ldr	r3, [pc, #400]	; (800390c <HAL_GPIO_Init+0x30c>)
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	4a63      	ldr	r2, [pc, #396]	; (800390c <HAL_GPIO_Init+0x30c>)
 800377e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003782:	6453      	str	r3, [r2, #68]	; 0x44
 8003784:	4b61      	ldr	r3, [pc, #388]	; (800390c <HAL_GPIO_Init+0x30c>)
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003790:	4a5f      	ldr	r2, [pc, #380]	; (8003910 <HAL_GPIO_Init+0x310>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	3302      	adds	r3, #2
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a57      	ldr	r2, [pc, #348]	; (8003914 <HAL_GPIO_Init+0x314>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d031      	beq.n	8003820 <HAL_GPIO_Init+0x220>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a56      	ldr	r2, [pc, #344]	; (8003918 <HAL_GPIO_Init+0x318>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02b      	beq.n	800381c <HAL_GPIO_Init+0x21c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a55      	ldr	r2, [pc, #340]	; (800391c <HAL_GPIO_Init+0x31c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d025      	beq.n	8003818 <HAL_GPIO_Init+0x218>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a54      	ldr	r2, [pc, #336]	; (8003920 <HAL_GPIO_Init+0x320>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d01f      	beq.n	8003814 <HAL_GPIO_Init+0x214>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_GPIO_Init+0x324>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d019      	beq.n	8003810 <HAL_GPIO_Init+0x210>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_GPIO_Init+0x328>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_GPIO_Init+0x20c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_GPIO_Init+0x32c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00d      	beq.n	8003808 <HAL_GPIO_Init+0x208>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_GPIO_Init+0x330>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <HAL_GPIO_Init+0x204>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a4f      	ldr	r2, [pc, #316]	; (8003934 <HAL_GPIO_Init+0x334>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_GPIO_Init+0x200>
 80037fc:	2308      	movs	r3, #8
 80037fe:	e010      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003800:	2309      	movs	r3, #9
 8003802:	e00e      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003804:	2307      	movs	r3, #7
 8003806:	e00c      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003808:	2306      	movs	r3, #6
 800380a:	e00a      	b.n	8003822 <HAL_GPIO_Init+0x222>
 800380c:	2305      	movs	r3, #5
 800380e:	e008      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003810:	2304      	movs	r3, #4
 8003812:	e006      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003814:	2303      	movs	r3, #3
 8003816:	e004      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003818:	2302      	movs	r3, #2
 800381a:	e002      	b.n	8003822 <HAL_GPIO_Init+0x222>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_GPIO_Init+0x222>
 8003820:	2300      	movs	r3, #0
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	f002 0203 	and.w	r2, r2, #3
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	4093      	lsls	r3, r2
 800382c:	461a      	mov	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003834:	4936      	ldr	r1, [pc, #216]	; (8003910 <HAL_GPIO_Init+0x310>)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_GPIO_Init+0x338>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43db      	mvns	r3, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003866:	4a34      	ldr	r2, [pc, #208]	; (8003938 <HAL_GPIO_Init+0x338>)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <HAL_GPIO_Init+0x338>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	43db      	mvns	r3, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <HAL_GPIO_Init+0x338>)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <HAL_GPIO_Init+0x338>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038ba:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <HAL_GPIO_Init+0x338>)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_GPIO_Init+0x338>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_GPIO_Init+0x338>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f47f ae88 	bne.w	8003610 <HAL_GPIO_Init+0x10>
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40023800 	.word	0x40023800
 8003910:	40013800 	.word	0x40013800
 8003914:	40020000 	.word	0x40020000
 8003918:	40020400 	.word	0x40020400
 800391c:	40020800 	.word	0x40020800
 8003920:	40020c00 	.word	0x40020c00
 8003924:	40021000 	.word	0x40021000
 8003928:	40021400 	.word	0x40021400
 800392c:	40021800 	.word	0x40021800
 8003930:	40021c00 	.word	0x40021c00
 8003934:	40022000 	.word	0x40022000
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395a:	887b      	ldrh	r3, [r7, #2]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e23b      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d050      	beq.n	8003a2c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	4b9e      	ldr	r3, [pc, #632]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b9b      	ldr	r3, [pc, #620]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b98      	ldr	r3, [pc, #608]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b94      	ldr	r3, [pc, #592]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d036      	beq.n	8003a2a <HAL_RCC_OscConfig+0xbe>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d132      	bne.n	8003a2a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e216      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4b8e      	ldr	r3, [pc, #568]	; (8003c08 <HAL_RCC_OscConfig+0x29c>)
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d013      	beq.n	8003a02 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7ff f985 	bl	8002ce8 <HAL_GetTick>
 80039de:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e2:	f7ff f981 	bl	8002ce8 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	; 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e200      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f4:	4b83      	ldr	r3, [pc, #524]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x76>
 8003a00:	e014      	b.n	8003a2c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7ff f971 	bl	8002ce8 <HAL_GetTick>
 8003a06:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0a:	f7ff f96d 	bl	8002ce8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b64      	cmp	r3, #100	; 0x64
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e1ec      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x9e>
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d077      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a38:	4b72      	ldr	r3, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d126      	bne.n	8003a9e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a50:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d120      	bne.n	8003a9e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5c:	4b69      	ldr	r3, [pc, #420]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e1c0      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	21f8      	movs	r1, #248	; 0xf8
 8003a82:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	fa91 f1a1 	rbit	r1, r1
 8003a8a:	6179      	str	r1, [r7, #20]
  return result;
 8003a8c:	6979      	ldr	r1, [r7, #20]
 8003a8e:	fab1 f181 	clz	r1, r1
 8003a92:	b2c9      	uxtb	r1, r1
 8003a94:	408b      	lsls	r3, r1
 8003a96:	495b      	ldr	r1, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9c:	e044      	b.n	8003b28 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02a      	beq.n	8003afc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa6:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCC_OscConfig+0x2a0>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7ff f91c 	bl	8002ce8 <HAL_GetTick>
 8003ab0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7ff f918 	bl	8002ce8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e197      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	21f8      	movs	r1, #248	; 0xf8
 8003ae0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6939      	ldr	r1, [r7, #16]
 8003ae4:	fa91 f1a1 	rbit	r1, r1
 8003ae8:	60f9      	str	r1, [r7, #12]
  return result;
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	fab1 f181 	clz	r1, r1
 8003af0:	b2c9      	uxtb	r1, r1
 8003af2:	408b      	lsls	r3, r1
 8003af4:	4943      	ldr	r1, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
 8003afa:	e015      	b.n	8003b28 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afc:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <HAL_RCC_OscConfig+0x2a0>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7ff f8f1 	bl	8002ce8 <HAL_GetTick>
 8003b06:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7ff f8ed 	bl	8002ce8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e16c      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d030      	beq.n	8003b96 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x2a4>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7ff f8d1 	bl	8002ce8 <HAL_GetTick>
 8003b46:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4a:	f7ff f8cd 	bl	8002ce8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e14c      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5c:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1de>
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCC_OscConfig+0x2a4>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b70:	f7ff f8ba 	bl	8002ce8 <HAL_GetTick>
 8003b74:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b78:	f7ff f8b6 	bl	8002ce8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e135      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8087 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d110      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_OscConfig+0x298>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_RCC_OscConfig+0x2a8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <HAL_RCC_OscConfig+0x2a8>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_OscConfig+0x2a8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d122      	bne.n	8003c36 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x2a8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <HAL_RCC_OscConfig+0x2a8>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfc:	f7ff f874 	bl	8002ce8 <HAL_GetTick>
 8003c00:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	e012      	b.n	8003c2a <HAL_RCC_OscConfig+0x2be>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40023802 	.word	0x40023802
 8003c0c:	42470000 	.word	0x42470000
 8003c10:	42470e80 	.word	0x42470e80
 8003c14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7ff f866 	bl	8002ce8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0e5      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <HAL_RCC_OscConfig+0x494>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	4b72      	ldr	r3, [pc, #456]	; (8003e04 <HAL_RCC_OscConfig+0x498>)
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7ff f84e 	bl	8002ce8 <HAL_GetTick>
 8003c4c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7ff f84a 	bl	8002ce8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0c7      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2e4>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7ff f838 	bl	8002ce8 <HAL_GetTick>
 8003c78:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7ff f834 	bl	8002ce8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0b1      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ee      	bne.n	8003c7c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a57      	ldr	r2, [pc, #348]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 809c 	beq.w	8003df4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cbc:	4b52      	ldr	r3, [pc, #328]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d061      	beq.n	8003d8c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d146      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <HAL_RCC_OscConfig+0x4a0>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7ff f807 	bl	8002ce8 <HAL_GetTick>
 8003cda:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7ff f803 	bl	8002ce8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e082      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfc:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <HAL_RCC_OscConfig+0x4a4>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	69d1      	ldr	r1, [r2, #28]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6a12      	ldr	r2, [r2, #32]
 8003d0c:	4311      	orrs	r1, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d12:	0192      	lsls	r2, r2, #6
 8003d14:	4311      	orrs	r1, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d1a:	0612      	lsls	r2, r2, #24
 8003d1c:	4311      	orrs	r1, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d22:	0852      	lsrs	r2, r2, #1
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0412      	lsls	r2, r2, #16
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	4937      	ldr	r1, [pc, #220]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x4a0>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fe ffd7 	bl	8002ce8 <HAL_GetTick>
 8003d3a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fe ffd3 	bl	8002ce8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	; 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e052      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
 8003d5c:	e04a      	b.n	8003df4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x4a0>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe ffc0 	bl	8002ce8 <HAL_GetTick>
 8003d68:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fe ffbc 	bl	8002ce8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e03b      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x400>
 8003d8a:	e033      	b.n	8003df4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e02e      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x49c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d121      	bne.n	8003df0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d111      	bne.n	8003df0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3728      	adds	r7, #40	; 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40007000 	.word	0x40007000
 8003e04:	40023870 	.word	0x40023870
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470060 	.word	0x42470060
 8003e10:	f0bc8000 	.word	0xf0bc8000

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0d2      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b6b      	ldr	r3, [pc, #428]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d90c      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b66      	ldr	r3, [pc, #408]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0be      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e68:	4b5c      	ldr	r3, [pc, #368]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003e80:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a55      	ldr	r2, [pc, #340]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4950      	ldr	r1, [pc, #320]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d040      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d115      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e085      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e079      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e071      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b3c      	ldr	r3, [pc, #240]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4939      	ldr	r1, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fe fef4 	bl	8002ce8 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fe fef0 	bl	8002ce8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e059      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d20c      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e03c      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	491b      	ldr	r1, [pc, #108]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4913      	ldr	r1, [pc, #76]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f92:	f000 f82b 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003f96:	4601      	mov	r1, r0
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa0:	22f0      	movs	r2, #240	; 0xf0
 8003fa2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	fa92 f2a2 	rbit	r2, r2
 8003faa:	60fa      	str	r2, [r7, #12]
  return result;
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	fab2 f282 	clz	r2, r2
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	40d3      	lsrs	r3, r2
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	fa21 f303 	lsr.w	r3, r1, r3
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1d4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fe4c 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	08006bac 	.word	0x08006bac
 8003fe4:	20000024 	.word	0x20000024
 8003fe8:	20000028 	.word	0x20000028

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b090      	sub	sp, #64	; 0x40
 8003ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004004:	4b59      	ldr	r3, [pc, #356]	; (800416c <HAL_RCC_GetSysClockFreq+0x180>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d00d      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x40>
 8004010:	2b08      	cmp	r3, #8
 8004012:	f200 80a2 	bhi.w	800415a <HAL_RCC_GetSysClockFreq+0x16e>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x34>
 800401a:	2b04      	cmp	r3, #4
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x3a>
 800401e:	e09c      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_GetSysClockFreq+0x184>)
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004024:	e09c      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_GetSysClockFreq+0x188>)
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800402a:	e099      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402c:	4b4f      	ldr	r3, [pc, #316]	; (800416c <HAL_RCC_GetSysClockFreq+0x180>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004036:	4b4d      	ldr	r3, [pc, #308]	; (800416c <HAL_RCC_GetSysClockFreq+0x180>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d027      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCC_GetSysClockFreq+0x180>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	627a      	str	r2, [r7, #36]	; 0x24
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004054:	2100      	movs	r1, #0
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_GetSysClockFreq+0x188>)
 8004058:	fb03 f201 	mul.w	r2, r3, r1
 800405c:	2300      	movs	r3, #0
 800405e:	fb00 f303 	mul.w	r3, r0, r3
 8004062:	4413      	add	r3, r2
 8004064:	4a43      	ldr	r2, [pc, #268]	; (8004174 <HAL_RCC_GetSysClockFreq+0x188>)
 8004066:	fba0 2102 	umull	r2, r1, r0, r2
 800406a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800406c:	62ba      	str	r2, [r7, #40]	; 0x28
 800406e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004070:	4413      	add	r3, r2
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	2200      	movs	r2, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	61fa      	str	r2, [r7, #28]
 800407c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004080:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004084:	f7fc f89e 	bl	80001c4 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	e055      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCC_GetSysClockFreq+0x180>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	617a      	str	r2, [r7, #20]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040a4:	f04f 0b00 	mov.w	fp, #0
 80040a8:	4652      	mov	r2, sl
 80040aa:	465b      	mov	r3, fp
 80040ac:	f04f 0000 	mov.w	r0, #0
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	0159      	lsls	r1, r3, #5
 80040b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ba:	0150      	lsls	r0, r2, #5
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	ebb2 080a 	subs.w	r8, r2, sl
 80040c4:	eb63 090b 	sbc.w	r9, r3, fp
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040d4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040d8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040dc:	ebb2 0408 	subs.w	r4, r2, r8
 80040e0:	eb63 0509 	sbc.w	r5, r3, r9
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	00eb      	lsls	r3, r5, #3
 80040ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f2:	00e2      	lsls	r2, r4, #3
 80040f4:	4614      	mov	r4, r2
 80040f6:	461d      	mov	r5, r3
 80040f8:	eb14 030a 	adds.w	r3, r4, sl
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	eb45 030b 	adc.w	r3, r5, fp
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004110:	4629      	mov	r1, r5
 8004112:	028b      	lsls	r3, r1, #10
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	4604      	mov	r4, r0
 800411a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800411e:	4601      	mov	r1, r0
 8004120:	028a      	lsls	r2, r1, #10
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	2200      	movs	r2, #0
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	60fa      	str	r2, [r7, #12]
 800412e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004132:	f7fc f847 	bl	80001c4 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4613      	mov	r3, r2
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_GetSysClockFreq+0x180>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	3301      	adds	r3, #1
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800414e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004158:	e002      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetSysClockFreq+0x184>)
 800415c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800415e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004162:	4618      	mov	r0, r3
 8004164:	3740      	adds	r7, #64	; 0x40
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	00f42400 	.word	0x00f42400
 8004174:	017d7840 	.word	0x017d7840

08004178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800417c:	4b02      	ldr	r3, [pc, #8]	; (8004188 <HAL_RCC_GetHCLKFreq+0x10>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	20000024 	.word	0x20000024

0800418c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004192:	f7ff fff1 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 8004196:	4601      	mov	r1, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80041a0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80041a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	fa92 f2a2 	rbit	r2, r2
 80041ac:	603a      	str	r2, [r7, #0]
  return result;
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	fab2 f282 	clz	r2, r2
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	40d3      	lsrs	r3, r2
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80041ba:	5cd3      	ldrb	r3, [r2, r3]
 80041bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08006bbc 	.word	0x08006bbc

080041d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80041d6:	f7ff ffcf 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 80041da:	4601      	mov	r1, r0
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80041e4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80041e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	fa92 f2a2 	rbit	r2, r2
 80041f0:	603a      	str	r2, [r7, #0]
  return result;
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	fab2 f282 	clz	r2, r2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	40d3      	lsrs	r3, r2
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x40>)
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	08006bbc 	.word	0x08006bbc

08004214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e042      	b.n	80042ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe fb0e 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fe43 	bl	8004ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800426c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d16d      	bne.n	80043b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_UART_Transmit+0x2c>
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e066      	b.n	80043b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2221      	movs	r2, #33	; 0x21
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f2:	f7fe fcf9 	bl	8002ce8 <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d108      	bne.n	8004320 <HAL_UART_Transmit+0x6c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e003      	b.n	8004328 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004328:	e02a      	b.n	8004380 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb92 	bl	8004a5e <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e036      	b.n	80043b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	3302      	adds	r3, #2
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e007      	b.n	8004372 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	3301      	adds	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1cf      	bne.n	800432a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2140      	movs	r1, #64	; 0x40
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb62 	bl	8004a5e <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e006      	b.n	80043b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e000      	b.n	80043b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
  }
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d121      	bne.n	8004418 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_UART_Transmit_IT+0x26>
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e01a      	b.n	800441a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2221      	movs	r2, #33	; 0x21
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004412:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	d112      	bne.n	8004464 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_UART_Receive_IT+0x26>
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00b      	b.n	8004466 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	461a      	mov	r2, r3
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fb6d 	bl	8004b3a <UART_Start_Receive_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	e000      	b.n	8004466 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08c      	sub	sp, #48	; 0x30
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b20      	cmp	r3, #32
 8004486:	d14a      	bne.n	800451e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e043      	b.n	8004520 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fb45 	bl	8004b3a <UART_Start_Receive_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80044b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12c      	bne.n	8004518 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d125      	bne.n	8004512 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	617b      	str	r3, [r7, #20]
   return(result);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f043 0310 	orr.w	r3, r3, #16
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fc:	627a      	str	r2, [r7, #36]	; 0x24
 80044fe:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	61fb      	str	r3, [r7, #28]
   return(result);
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004510:	e002      	b.n	8004518 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800451c:	e000      	b.n	8004520 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0ba      	sub	sp, #232	; 0xe8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fbed 	bl	8004d66 <UART_Receive_IT>
      return;
 800458c:	e25b      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800458e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80de 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
 8004598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80d1 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d011      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 81f2 	beq.w	8004a3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fb78 	bl	8004d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_UART_IRQHandler+0x17a>
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04f      	beq.n	8004742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa82 	bl	8004bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d141      	bne.n	800473a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1d9      	bne.n	80046b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d013      	beq.n	8004732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	4a7e      	ldr	r2, [pc, #504]	; (8004908 <HAL_UART_IRQHandler+0x3e0>)
 8004710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fc6d 	bl	8002ff6 <HAL_DMA_Abort_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800472c:	4610      	mov	r0, r2
 800472e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00e      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f98a 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00a      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f986 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e006      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f982 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800474e:	e175      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	bf00      	nop
    return;
 8004752:	e173      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 814f 	bne.w	80049fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8148 	beq.w	80049fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8141 	beq.w	80049fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	f040 80b6 	bne.w	800490c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8145 	beq.w	8004a40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	429a      	cmp	r2, r3
 80047c0:	f080 813e 	bcs.w	8004a40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	f000 8088 	beq.w	80048ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1d9      	bne.n	80047da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800484a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800484e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800485c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e1      	bne.n	8004826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800488c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e3      	bne.n	8004862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e3      	bne.n	80048a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe fb16 	bl	8002f16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fd fed9 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004906:	e09b      	b.n	8004a40 <HAL_UART_IRQHandler+0x518>
 8004908:	08004c71 	.word	0x08004c71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004914:	b29b      	uxth	r3, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 808e 	beq.w	8004a44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8089 	beq.w	8004a44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004956:	647a      	str	r2, [r7, #68]	; 0x44
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800495c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e3      	bne.n	8004932 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	623b      	str	r3, [r7, #32]
   return(result);
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3314      	adds	r3, #20
 800498a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800498e:	633a      	str	r2, [r7, #48]	; 0x30
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e3      	bne.n	800496a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0310 	bic.w	r3, r3, #16
 80049c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049d4:	61fa      	str	r2, [r7, #28]
 80049d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	617b      	str	r3, [r7, #20]
   return(result);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e3      	bne.n	80049b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fd fe5f 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049fa:	e023      	b.n	8004a44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_UART_IRQHandler+0x4f4>
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f93f 	bl	8004c98 <UART_Transmit_IT>
    return;
 8004a1a:	e014      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <HAL_UART_IRQHandler+0x51e>
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f97e 	bl	8004d36 <UART_EndTransmit_IT>
    return;
 8004a3a:	e004      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a3c:	bf00      	nop
 8004a3e:	e002      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a44:	bf00      	nop
  }
}
 8004a46:	37e8      	adds	r7, #232	; 0xe8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b090      	sub	sp, #64	; 0x40
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6e:	e050      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d04c      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7e:	f7fe f933 	bl	8002ce8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d241      	bcs.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aae:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae2:	623a      	str	r2, [r7, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00f      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d09f      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3740      	adds	r7, #64	; 0x40
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2222      	movs	r2, #34	; 0x22
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0220 	orr.w	r2, r2, #32
 8004b9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b095      	sub	sp, #84	; 0x54
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bd4:	643a      	str	r2, [r7, #64]	; 0x40
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d119      	bne.n	8004c58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f023 0310 	bic.w	r3, r3, #16
 8004c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c44:	61ba      	str	r2, [r7, #24]
 8004c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6979      	ldr	r1, [r7, #20]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	613b      	str	r3, [r7, #16]
   return(result);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c66:	bf00      	nop
 8004c68:	3754      	adds	r7, #84	; 0x54
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7ff fede 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b21      	cmp	r3, #33	; 0x21
 8004caa:	d13e      	bne.n	8004d2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d114      	bne.n	8004ce0 <UART_Transmit_IT+0x48>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d110      	bne.n	8004ce0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	1c9a      	adds	r2, r3, #2
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]
 8004cde:	e008      	b.n	8004cf2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	1c59      	adds	r1, r3, #1
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6211      	str	r1, [r2, #32]
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10f      	bne.n	8004d26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d2a:	2302      	movs	r3, #2
  }
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr

08004d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fd fd22 	bl	80027a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08c      	sub	sp, #48	; 0x30
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b22      	cmp	r3, #34	; 0x22
 8004d78:	f040 80ae 	bne.w	8004ed8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d117      	bne.n	8004db6 <UART_Receive_IT+0x50>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
 8004db4:	e026      	b.n	8004e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d007      	beq.n	8004dda <UART_Receive_IT+0x74>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <UART_Receive_IT+0x82>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e008      	b.n	8004dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d15d      	bne.n	8004ed4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0220 	bic.w	r2, r2, #32
 8004e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d135      	bne.n	8004eca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	613b      	str	r3, [r7, #16]
   return(result);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	623a      	str	r2, [r7, #32]
 8004e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	69f9      	ldr	r1, [r7, #28]
 8004e8a:	6a3a      	ldr	r2, [r7, #32]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d10a      	bne.n	8004ebc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fd fbf8 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
 8004ec8:	e002      	b.n	8004ed0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fd fb9e 	bl	800260c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e002      	b.n	8004eda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3730      	adds	r7, #48	; 0x30
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f24:	f023 030c 	bic.w	r3, r3, #12
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a57      	ldr	r2, [pc, #348]	; (80050ac <UART_SetConfig+0x1c8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <UART_SetConfig+0x78>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a56      	ldr	r2, [pc, #344]	; (80050b0 <UART_SetConfig+0x1cc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d103      	bne.n	8004f64 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7ff f938 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	e002      	b.n	8004f6a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7ff f912 	bl	800418c <HAL_RCC_GetPCLK1Freq>
 8004f68:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f72:	d14c      	bne.n	800500e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009a      	lsls	r2, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <UART_SetConfig+0x1d0>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	0119      	lsls	r1, r3, #4
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009a      	lsls	r2, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004faa:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <UART_SetConfig+0x1d0>)
 8004fac:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	2064      	movs	r0, #100	; 0x64
 8004fb4:	fb00 f303 	mul.w	r3, r0, r3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	3332      	adds	r3, #50	; 0x32
 8004fbe:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <UART_SetConfig+0x1d0>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fcc:	4419      	add	r1, r3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <UART_SetConfig+0x1d0>)
 8004fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2064      	movs	r0, #100	; 0x64
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <UART_SetConfig+0x1d0>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 0207 	and.w	r2, r3, #7
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	440a      	add	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800500c:	e04a      	b.n	80050a4 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009a      	lsls	r2, r3, #2
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	4a23      	ldr	r2, [pc, #140]	; (80050b4 <UART_SetConfig+0x1d0>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	0119      	lsls	r1, r3, #4
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009a      	lsls	r2, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	fbb2 f2f3 	udiv	r2, r2, r3
 8005044:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <UART_SetConfig+0x1d0>)
 8005046:	fba3 0302 	umull	r0, r3, r3, r2
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	2064      	movs	r0, #100	; 0x64
 800504e:	fb00 f303 	mul.w	r3, r0, r3
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	3332      	adds	r3, #50	; 0x32
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <UART_SetConfig+0x1d0>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005064:	4419      	add	r1, r3
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009a      	lsls	r2, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	fbb2 f2f3 	udiv	r2, r2, r3
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <UART_SetConfig+0x1d0>)
 800507e:	fba3 0302 	umull	r0, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	fb00 f303 	mul.w	r3, r0, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	3332      	adds	r3, #50	; 0x32
 8005090:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <UART_SetConfig+0x1d0>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	f003 020f 	and.w	r2, r3, #15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	440a      	add	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40011000 	.word	0x40011000
 80050b0:	40011400 	.word	0x40011400
 80050b4:	51eb851f 	.word	0x51eb851f

080050b8 <__errno>:
 80050b8:	4b01      	ldr	r3, [pc, #4]	; (80050c0 <__errno+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000030 	.word	0x20000030

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	2600      	movs	r6, #0
 80050c8:	4d0c      	ldr	r5, [pc, #48]	; (80050fc <__libc_init_array+0x38>)
 80050ca:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050cc:	1b64      	subs	r4, r4, r5
 80050ce:	10a4      	asrs	r4, r4, #2
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	f001 fa74 	bl	80065c0 <_init>
 80050d8:	2600      	movs	r6, #0
 80050da:	4d0a      	ldr	r5, [pc, #40]	; (8005104 <__libc_init_array+0x40>)
 80050dc:	4c0a      	ldr	r4, [pc, #40]	; (8005108 <__libc_init_array+0x44>)
 80050de:	1b64      	subs	r4, r4, r5
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	08006c64 	.word	0x08006c64
 8005100:	08006c64 	.word	0x08006c64
 8005104:	08006c64 	.word	0x08006c64
 8005108:	08006c68 	.word	0x08006c68

0800510c <memcmp>:
 800510c:	b510      	push	{r4, lr}
 800510e:	3901      	subs	r1, #1
 8005110:	4402      	add	r2, r0
 8005112:	4290      	cmp	r0, r2
 8005114:	d101      	bne.n	800511a <memcmp+0xe>
 8005116:	2000      	movs	r0, #0
 8005118:	e005      	b.n	8005126 <memcmp+0x1a>
 800511a:	7803      	ldrb	r3, [r0, #0]
 800511c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005120:	42a3      	cmp	r3, r4
 8005122:	d001      	beq.n	8005128 <memcmp+0x1c>
 8005124:	1b18      	subs	r0, r3, r4
 8005126:	bd10      	pop	{r4, pc}
 8005128:	3001      	adds	r0, #1
 800512a:	e7f2      	b.n	8005112 <memcmp+0x6>

0800512c <memcpy>:
 800512c:	440a      	add	r2, r1
 800512e:	4291      	cmp	r1, r2
 8005130:	f100 33ff 	add.w	r3, r0, #4294967295
 8005134:	d100      	bne.n	8005138 <memcpy+0xc>
 8005136:	4770      	bx	lr
 8005138:	b510      	push	{r4, lr}
 800513a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800513e:	4291      	cmp	r1, r2
 8005140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005144:	d1f9      	bne.n	800513a <memcpy+0xe>
 8005146:	bd10      	pop	{r4, pc}

08005148 <memset>:
 8005148:	4603      	mov	r3, r0
 800514a:	4402      	add	r2, r0
 800514c:	4293      	cmp	r3, r2
 800514e:	d100      	bne.n	8005152 <memset+0xa>
 8005150:	4770      	bx	lr
 8005152:	f803 1b01 	strb.w	r1, [r3], #1
 8005156:	e7f9      	b.n	800514c <memset+0x4>

08005158 <iprintf>:
 8005158:	b40f      	push	{r0, r1, r2, r3}
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <iprintf+0x2c>)
 800515c:	b513      	push	{r0, r1, r4, lr}
 800515e:	681c      	ldr	r4, [r3, #0]
 8005160:	b124      	cbz	r4, 800516c <iprintf+0x14>
 8005162:	69a3      	ldr	r3, [r4, #24]
 8005164:	b913      	cbnz	r3, 800516c <iprintf+0x14>
 8005166:	4620      	mov	r0, r4
 8005168:	f000 fa8e 	bl	8005688 <__sinit>
 800516c:	ab05      	add	r3, sp, #20
 800516e:	4620      	mov	r0, r4
 8005170:	9a04      	ldr	r2, [sp, #16]
 8005172:	68a1      	ldr	r1, [r4, #8]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	f000 fded 	bl	8005d54 <_vfiprintf_r>
 800517a:	b002      	add	sp, #8
 800517c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005180:	b004      	add	sp, #16
 8005182:	4770      	bx	lr
 8005184:	20000030 	.word	0x20000030

08005188 <putchar>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <putchar+0x24>)
 800518c:	4605      	mov	r5, r0
 800518e:	681c      	ldr	r4, [r3, #0]
 8005190:	b124      	cbz	r4, 800519c <putchar+0x14>
 8005192:	69a3      	ldr	r3, [r4, #24]
 8005194:	b913      	cbnz	r3, 800519c <putchar+0x14>
 8005196:	4620      	mov	r0, r4
 8005198:	f000 fa76 	bl	8005688 <__sinit>
 800519c:	4629      	mov	r1, r5
 800519e:	4620      	mov	r0, r4
 80051a0:	68a2      	ldr	r2, [r4, #8]
 80051a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051a6:	f001 b89b 	b.w	80062e0 <_putc_r>
 80051aa:	bf00      	nop
 80051ac:	20000030 	.word	0x20000030

080051b0 <_puts_r>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	460e      	mov	r6, r1
 80051b4:	4605      	mov	r5, r0
 80051b6:	b118      	cbz	r0, 80051c0 <_puts_r+0x10>
 80051b8:	6983      	ldr	r3, [r0, #24]
 80051ba:	b90b      	cbnz	r3, 80051c0 <_puts_r+0x10>
 80051bc:	f000 fa64 	bl	8005688 <__sinit>
 80051c0:	69ab      	ldr	r3, [r5, #24]
 80051c2:	68ac      	ldr	r4, [r5, #8]
 80051c4:	b913      	cbnz	r3, 80051cc <_puts_r+0x1c>
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 fa5e 	bl	8005688 <__sinit>
 80051cc:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <_puts_r+0xd0>)
 80051ce:	429c      	cmp	r4, r3
 80051d0:	d120      	bne.n	8005214 <_puts_r+0x64>
 80051d2:	686c      	ldr	r4, [r5, #4]
 80051d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d6:	07db      	lsls	r3, r3, #31
 80051d8:	d405      	bmi.n	80051e6 <_puts_r+0x36>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	0598      	lsls	r0, r3, #22
 80051de:	d402      	bmi.n	80051e6 <_puts_r+0x36>
 80051e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051e2:	f000 faef 	bl	80057c4 <__retarget_lock_acquire_recursive>
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	0719      	lsls	r1, r3, #28
 80051ea:	d51d      	bpl.n	8005228 <_puts_r+0x78>
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	b1db      	cbz	r3, 8005228 <_puts_r+0x78>
 80051f0:	3e01      	subs	r6, #1
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60a3      	str	r3, [r4, #8]
 80051fc:	bb39      	cbnz	r1, 800524e <_puts_r+0x9e>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da38      	bge.n	8005274 <_puts_r+0xc4>
 8005202:	4622      	mov	r2, r4
 8005204:	210a      	movs	r1, #10
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f868 	bl	80052dc <__swbuf_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d011      	beq.n	8005234 <_puts_r+0x84>
 8005210:	250a      	movs	r5, #10
 8005212:	e011      	b.n	8005238 <_puts_r+0x88>
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <_puts_r+0xd4>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d101      	bne.n	800521e <_puts_r+0x6e>
 800521a:	68ac      	ldr	r4, [r5, #8]
 800521c:	e7da      	b.n	80051d4 <_puts_r+0x24>
 800521e:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <_puts_r+0xd8>)
 8005220:	429c      	cmp	r4, r3
 8005222:	bf08      	it	eq
 8005224:	68ec      	ldreq	r4, [r5, #12]
 8005226:	e7d5      	b.n	80051d4 <_puts_r+0x24>
 8005228:	4621      	mov	r1, r4
 800522a:	4628      	mov	r0, r5
 800522c:	f000 f8a8 	bl	8005380 <__swsetup_r>
 8005230:	2800      	cmp	r0, #0
 8005232:	d0dd      	beq.n	80051f0 <_puts_r+0x40>
 8005234:	f04f 35ff 	mov.w	r5, #4294967295
 8005238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800523a:	07da      	lsls	r2, r3, #31
 800523c:	d405      	bmi.n	800524a <_puts_r+0x9a>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	059b      	lsls	r3, r3, #22
 8005242:	d402      	bmi.n	800524a <_puts_r+0x9a>
 8005244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005246:	f000 fabe 	bl	80057c6 <__retarget_lock_release_recursive>
 800524a:	4628      	mov	r0, r5
 800524c:	bd70      	pop	{r4, r5, r6, pc}
 800524e:	2b00      	cmp	r3, #0
 8005250:	da04      	bge.n	800525c <_puts_r+0xac>
 8005252:	69a2      	ldr	r2, [r4, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	dc06      	bgt.n	8005266 <_puts_r+0xb6>
 8005258:	290a      	cmp	r1, #10
 800525a:	d004      	beq.n	8005266 <_puts_r+0xb6>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	6022      	str	r2, [r4, #0]
 8005262:	7019      	strb	r1, [r3, #0]
 8005264:	e7c5      	b.n	80051f2 <_puts_r+0x42>
 8005266:	4622      	mov	r2, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 f837 	bl	80052dc <__swbuf_r>
 800526e:	3001      	adds	r0, #1
 8005270:	d1bf      	bne.n	80051f2 <_puts_r+0x42>
 8005272:	e7df      	b.n	8005234 <_puts_r+0x84>
 8005274:	250a      	movs	r5, #10
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	701d      	strb	r5, [r3, #0]
 800527e:	e7db      	b.n	8005238 <_puts_r+0x88>
 8005280:	08006be8 	.word	0x08006be8
 8005284:	08006c08 	.word	0x08006c08
 8005288:	08006bc8 	.word	0x08006bc8

0800528c <puts>:
 800528c:	4b02      	ldr	r3, [pc, #8]	; (8005298 <puts+0xc>)
 800528e:	4601      	mov	r1, r0
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	f7ff bf8d 	b.w	80051b0 <_puts_r>
 8005296:	bf00      	nop
 8005298:	20000030 	.word	0x20000030

0800529c <siprintf>:
 800529c:	b40e      	push	{r1, r2, r3}
 800529e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052a2:	b500      	push	{lr}
 80052a4:	b09c      	sub	sp, #112	; 0x70
 80052a6:	ab1d      	add	r3, sp, #116	; 0x74
 80052a8:	9002      	str	r0, [sp, #8]
 80052aa:	9006      	str	r0, [sp, #24]
 80052ac:	9107      	str	r1, [sp, #28]
 80052ae:	9104      	str	r1, [sp, #16]
 80052b0:	4808      	ldr	r0, [pc, #32]	; (80052d4 <siprintf+0x38>)
 80052b2:	4909      	ldr	r1, [pc, #36]	; (80052d8 <siprintf+0x3c>)
 80052b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	a902      	add	r1, sp, #8
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	f000 fc20 	bl	8005b04 <_svfiprintf_r>
 80052c4:	2200      	movs	r2, #0
 80052c6:	9b02      	ldr	r3, [sp, #8]
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	b01c      	add	sp, #112	; 0x70
 80052cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d0:	b003      	add	sp, #12
 80052d2:	4770      	bx	lr
 80052d4:	20000030 	.word	0x20000030
 80052d8:	ffff0208 	.word	0xffff0208

080052dc <__swbuf_r>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	460e      	mov	r6, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	4605      	mov	r5, r0
 80052e4:	b118      	cbz	r0, 80052ee <__swbuf_r+0x12>
 80052e6:	6983      	ldr	r3, [r0, #24]
 80052e8:	b90b      	cbnz	r3, 80052ee <__swbuf_r+0x12>
 80052ea:	f000 f9cd 	bl	8005688 <__sinit>
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <__swbuf_r+0x98>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	d12b      	bne.n	800534c <__swbuf_r+0x70>
 80052f4:	686c      	ldr	r4, [r5, #4]
 80052f6:	69a3      	ldr	r3, [r4, #24]
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	071a      	lsls	r2, r3, #28
 80052fe:	d52f      	bpl.n	8005360 <__swbuf_r+0x84>
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	b36b      	cbz	r3, 8005360 <__swbuf_r+0x84>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	b2f6      	uxtb	r6, r6
 800530a:	1ac0      	subs	r0, r0, r3
 800530c:	6963      	ldr	r3, [r4, #20]
 800530e:	4637      	mov	r7, r6
 8005310:	4283      	cmp	r3, r0
 8005312:	dc04      	bgt.n	800531e <__swbuf_r+0x42>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f922 	bl	8005560 <_fflush_r>
 800531c:	bb30      	cbnz	r0, 800536c <__swbuf_r+0x90>
 800531e:	68a3      	ldr	r3, [r4, #8]
 8005320:	3001      	adds	r0, #1
 8005322:	3b01      	subs	r3, #1
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	701e      	strb	r6, [r3, #0]
 800532e:	6963      	ldr	r3, [r4, #20]
 8005330:	4283      	cmp	r3, r0
 8005332:	d004      	beq.n	800533e <__swbuf_r+0x62>
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	07db      	lsls	r3, r3, #31
 8005338:	d506      	bpl.n	8005348 <__swbuf_r+0x6c>
 800533a:	2e0a      	cmp	r6, #10
 800533c:	d104      	bne.n	8005348 <__swbuf_r+0x6c>
 800533e:	4621      	mov	r1, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 f90d 	bl	8005560 <_fflush_r>
 8005346:	b988      	cbnz	r0, 800536c <__swbuf_r+0x90>
 8005348:	4638      	mov	r0, r7
 800534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <__swbuf_r+0x9c>)
 800534e:	429c      	cmp	r4, r3
 8005350:	d101      	bne.n	8005356 <__swbuf_r+0x7a>
 8005352:	68ac      	ldr	r4, [r5, #8]
 8005354:	e7cf      	b.n	80052f6 <__swbuf_r+0x1a>
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <__swbuf_r+0xa0>)
 8005358:	429c      	cmp	r4, r3
 800535a:	bf08      	it	eq
 800535c:	68ec      	ldreq	r4, [r5, #12]
 800535e:	e7ca      	b.n	80052f6 <__swbuf_r+0x1a>
 8005360:	4621      	mov	r1, r4
 8005362:	4628      	mov	r0, r5
 8005364:	f000 f80c 	bl	8005380 <__swsetup_r>
 8005368:	2800      	cmp	r0, #0
 800536a:	d0cb      	beq.n	8005304 <__swbuf_r+0x28>
 800536c:	f04f 37ff 	mov.w	r7, #4294967295
 8005370:	e7ea      	b.n	8005348 <__swbuf_r+0x6c>
 8005372:	bf00      	nop
 8005374:	08006be8 	.word	0x08006be8
 8005378:	08006c08 	.word	0x08006c08
 800537c:	08006bc8 	.word	0x08006bc8

08005380 <__swsetup_r>:
 8005380:	4b32      	ldr	r3, [pc, #200]	; (800544c <__swsetup_r+0xcc>)
 8005382:	b570      	push	{r4, r5, r6, lr}
 8005384:	681d      	ldr	r5, [r3, #0]
 8005386:	4606      	mov	r6, r0
 8005388:	460c      	mov	r4, r1
 800538a:	b125      	cbz	r5, 8005396 <__swsetup_r+0x16>
 800538c:	69ab      	ldr	r3, [r5, #24]
 800538e:	b913      	cbnz	r3, 8005396 <__swsetup_r+0x16>
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f979 	bl	8005688 <__sinit>
 8005396:	4b2e      	ldr	r3, [pc, #184]	; (8005450 <__swsetup_r+0xd0>)
 8005398:	429c      	cmp	r4, r3
 800539a:	d10f      	bne.n	80053bc <__swsetup_r+0x3c>
 800539c:	686c      	ldr	r4, [r5, #4]
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053a4:	0719      	lsls	r1, r3, #28
 80053a6:	d42c      	bmi.n	8005402 <__swsetup_r+0x82>
 80053a8:	06dd      	lsls	r5, r3, #27
 80053aa:	d411      	bmi.n	80053d0 <__swsetup_r+0x50>
 80053ac:	2309      	movs	r3, #9
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	e03e      	b.n	800543a <__swsetup_r+0xba>
 80053bc:	4b25      	ldr	r3, [pc, #148]	; (8005454 <__swsetup_r+0xd4>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d101      	bne.n	80053c6 <__swsetup_r+0x46>
 80053c2:	68ac      	ldr	r4, [r5, #8]
 80053c4:	e7eb      	b.n	800539e <__swsetup_r+0x1e>
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <__swsetup_r+0xd8>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	bf08      	it	eq
 80053cc:	68ec      	ldreq	r4, [r5, #12]
 80053ce:	e7e6      	b.n	800539e <__swsetup_r+0x1e>
 80053d0:	0758      	lsls	r0, r3, #29
 80053d2:	d512      	bpl.n	80053fa <__swsetup_r+0x7a>
 80053d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d6:	b141      	cbz	r1, 80053ea <__swsetup_r+0x6a>
 80053d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053dc:	4299      	cmp	r1, r3
 80053de:	d002      	beq.n	80053e6 <__swsetup_r+0x66>
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 fa57 	bl	8005894 <_free_r>
 80053e6:	2300      	movs	r3, #0
 80053e8:	6363      	str	r3, [r4, #52]	; 0x34
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	2300      	movs	r3, #0
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	f043 0308 	orr.w	r3, r3, #8
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	b94b      	cbnz	r3, 800541a <__swsetup_r+0x9a>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800540c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005410:	d003      	beq.n	800541a <__swsetup_r+0x9a>
 8005412:	4621      	mov	r1, r4
 8005414:	4630      	mov	r0, r6
 8005416:	f000 f9fd 	bl	8005814 <__smakebuf_r>
 800541a:	89a0      	ldrh	r0, [r4, #12]
 800541c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005420:	f010 0301 	ands.w	r3, r0, #1
 8005424:	d00a      	beq.n	800543c <__swsetup_r+0xbc>
 8005426:	2300      	movs	r3, #0
 8005428:	60a3      	str	r3, [r4, #8]
 800542a:	6963      	ldr	r3, [r4, #20]
 800542c:	425b      	negs	r3, r3
 800542e:	61a3      	str	r3, [r4, #24]
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	b943      	cbnz	r3, 8005446 <__swsetup_r+0xc6>
 8005434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005438:	d1ba      	bne.n	80053b0 <__swsetup_r+0x30>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	0781      	lsls	r1, r0, #30
 800543e:	bf58      	it	pl
 8005440:	6963      	ldrpl	r3, [r4, #20]
 8005442:	60a3      	str	r3, [r4, #8]
 8005444:	e7f4      	b.n	8005430 <__swsetup_r+0xb0>
 8005446:	2000      	movs	r0, #0
 8005448:	e7f7      	b.n	800543a <__swsetup_r+0xba>
 800544a:	bf00      	nop
 800544c:	20000030 	.word	0x20000030
 8005450:	08006be8 	.word	0x08006be8
 8005454:	08006c08 	.word	0x08006c08
 8005458:	08006bc8 	.word	0x08006bc8

0800545c <__sflush_r>:
 800545c:	898a      	ldrh	r2, [r1, #12]
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005460:	4605      	mov	r5, r0
 8005462:	0710      	lsls	r0, r2, #28
 8005464:	460c      	mov	r4, r1
 8005466:	d457      	bmi.n	8005518 <__sflush_r+0xbc>
 8005468:	684b      	ldr	r3, [r1, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	dc04      	bgt.n	8005478 <__sflush_r+0x1c>
 800546e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	dc01      	bgt.n	8005478 <__sflush_r+0x1c>
 8005474:	2000      	movs	r0, #0
 8005476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800547a:	2e00      	cmp	r6, #0
 800547c:	d0fa      	beq.n	8005474 <__sflush_r+0x18>
 800547e:	2300      	movs	r3, #0
 8005480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005484:	682f      	ldr	r7, [r5, #0]
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	d032      	beq.n	80054f0 <__sflush_r+0x94>
 800548a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	075a      	lsls	r2, r3, #29
 8005490:	d505      	bpl.n	800549e <__sflush_r+0x42>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	1ac0      	subs	r0, r0, r3
 8005496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005498:	b10b      	cbz	r3, 800549e <__sflush_r+0x42>
 800549a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800549c:	1ac0      	subs	r0, r0, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	4602      	mov	r2, r0
 80054a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a4:	4628      	mov	r0, r5
 80054a6:	6a21      	ldr	r1, [r4, #32]
 80054a8:	47b0      	blx	r6
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	d106      	bne.n	80054be <__sflush_r+0x62>
 80054b0:	6829      	ldr	r1, [r5, #0]
 80054b2:	291d      	cmp	r1, #29
 80054b4:	d82c      	bhi.n	8005510 <__sflush_r+0xb4>
 80054b6:	4a29      	ldr	r2, [pc, #164]	; (800555c <__sflush_r+0x100>)
 80054b8:	40ca      	lsrs	r2, r1
 80054ba:	07d6      	lsls	r6, r2, #31
 80054bc:	d528      	bpl.n	8005510 <__sflush_r+0xb4>
 80054be:	2200      	movs	r2, #0
 80054c0:	6062      	str	r2, [r4, #4]
 80054c2:	6922      	ldr	r2, [r4, #16]
 80054c4:	04d9      	lsls	r1, r3, #19
 80054c6:	6022      	str	r2, [r4, #0]
 80054c8:	d504      	bpl.n	80054d4 <__sflush_r+0x78>
 80054ca:	1c42      	adds	r2, r0, #1
 80054cc:	d101      	bne.n	80054d2 <__sflush_r+0x76>
 80054ce:	682b      	ldr	r3, [r5, #0]
 80054d0:	b903      	cbnz	r3, 80054d4 <__sflush_r+0x78>
 80054d2:	6560      	str	r0, [r4, #84]	; 0x54
 80054d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d6:	602f      	str	r7, [r5, #0]
 80054d8:	2900      	cmp	r1, #0
 80054da:	d0cb      	beq.n	8005474 <__sflush_r+0x18>
 80054dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e0:	4299      	cmp	r1, r3
 80054e2:	d002      	beq.n	80054ea <__sflush_r+0x8e>
 80054e4:	4628      	mov	r0, r5
 80054e6:	f000 f9d5 	bl	8005894 <_free_r>
 80054ea:	2000      	movs	r0, #0
 80054ec:	6360      	str	r0, [r4, #52]	; 0x34
 80054ee:	e7c2      	b.n	8005476 <__sflush_r+0x1a>
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	2301      	movs	r3, #1
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b0      	blx	r6
 80054f8:	1c41      	adds	r1, r0, #1
 80054fa:	d1c7      	bne.n	800548c <__sflush_r+0x30>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0c4      	beq.n	800548c <__sflush_r+0x30>
 8005502:	2b1d      	cmp	r3, #29
 8005504:	d001      	beq.n	800550a <__sflush_r+0xae>
 8005506:	2b16      	cmp	r3, #22
 8005508:	d101      	bne.n	800550e <__sflush_r+0xb2>
 800550a:	602f      	str	r7, [r5, #0]
 800550c:	e7b2      	b.n	8005474 <__sflush_r+0x18>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005514:	81a3      	strh	r3, [r4, #12]
 8005516:	e7ae      	b.n	8005476 <__sflush_r+0x1a>
 8005518:	690f      	ldr	r7, [r1, #16]
 800551a:	2f00      	cmp	r7, #0
 800551c:	d0aa      	beq.n	8005474 <__sflush_r+0x18>
 800551e:	0793      	lsls	r3, r2, #30
 8005520:	bf18      	it	ne
 8005522:	2300      	movne	r3, #0
 8005524:	680e      	ldr	r6, [r1, #0]
 8005526:	bf08      	it	eq
 8005528:	694b      	ldreq	r3, [r1, #20]
 800552a:	1bf6      	subs	r6, r6, r7
 800552c:	600f      	str	r7, [r1, #0]
 800552e:	608b      	str	r3, [r1, #8]
 8005530:	2e00      	cmp	r6, #0
 8005532:	dd9f      	ble.n	8005474 <__sflush_r+0x18>
 8005534:	4633      	mov	r3, r6
 8005536:	463a      	mov	r2, r7
 8005538:	4628      	mov	r0, r5
 800553a:	6a21      	ldr	r1, [r4, #32]
 800553c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005540:	47e0      	blx	ip
 8005542:	2800      	cmp	r0, #0
 8005544:	dc06      	bgt.n	8005554 <__sflush_r+0xf8>
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	e790      	b.n	8005476 <__sflush_r+0x1a>
 8005554:	4407      	add	r7, r0
 8005556:	1a36      	subs	r6, r6, r0
 8005558:	e7ea      	b.n	8005530 <__sflush_r+0xd4>
 800555a:	bf00      	nop
 800555c:	20400001 	.word	0x20400001

08005560 <_fflush_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	b913      	cbnz	r3, 8005570 <_fflush_r+0x10>
 800556a:	2500      	movs	r5, #0
 800556c:	4628      	mov	r0, r5
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	b118      	cbz	r0, 800557a <_fflush_r+0x1a>
 8005572:	6983      	ldr	r3, [r0, #24]
 8005574:	b90b      	cbnz	r3, 800557a <_fflush_r+0x1a>
 8005576:	f000 f887 	bl	8005688 <__sinit>
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <_fflush_r+0x6c>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d11b      	bne.n	80055b8 <_fflush_r+0x58>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ef      	beq.n	800556a <_fflush_r+0xa>
 800558a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800558c:	07d0      	lsls	r0, r2, #31
 800558e:	d404      	bmi.n	800559a <_fflush_r+0x3a>
 8005590:	0599      	lsls	r1, r3, #22
 8005592:	d402      	bmi.n	800559a <_fflush_r+0x3a>
 8005594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005596:	f000 f915 	bl	80057c4 <__retarget_lock_acquire_recursive>
 800559a:	4628      	mov	r0, r5
 800559c:	4621      	mov	r1, r4
 800559e:	f7ff ff5d 	bl	800545c <__sflush_r>
 80055a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a4:	4605      	mov	r5, r0
 80055a6:	07da      	lsls	r2, r3, #31
 80055a8:	d4e0      	bmi.n	800556c <_fflush_r+0xc>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	059b      	lsls	r3, r3, #22
 80055ae:	d4dd      	bmi.n	800556c <_fflush_r+0xc>
 80055b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b2:	f000 f908 	bl	80057c6 <__retarget_lock_release_recursive>
 80055b6:	e7d9      	b.n	800556c <_fflush_r+0xc>
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <_fflush_r+0x70>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d101      	bne.n	80055c2 <_fflush_r+0x62>
 80055be:	68ac      	ldr	r4, [r5, #8]
 80055c0:	e7df      	b.n	8005582 <_fflush_r+0x22>
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <_fflush_r+0x74>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	bf08      	it	eq
 80055c8:	68ec      	ldreq	r4, [r5, #12]
 80055ca:	e7da      	b.n	8005582 <_fflush_r+0x22>
 80055cc:	08006be8 	.word	0x08006be8
 80055d0:	08006c08 	.word	0x08006c08
 80055d4:	08006bc8 	.word	0x08006bc8

080055d8 <std>:
 80055d8:	2300      	movs	r3, #0
 80055da:	b510      	push	{r4, lr}
 80055dc:	4604      	mov	r4, r0
 80055de:	e9c0 3300 	strd	r3, r3, [r0]
 80055e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055e6:	6083      	str	r3, [r0, #8]
 80055e8:	8181      	strh	r1, [r0, #12]
 80055ea:	6643      	str	r3, [r0, #100]	; 0x64
 80055ec:	81c2      	strh	r2, [r0, #14]
 80055ee:	6183      	str	r3, [r0, #24]
 80055f0:	4619      	mov	r1, r3
 80055f2:	2208      	movs	r2, #8
 80055f4:	305c      	adds	r0, #92	; 0x5c
 80055f6:	f7ff fda7 	bl	8005148 <memset>
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <std+0x38>)
 80055fc:	6224      	str	r4, [r4, #32]
 80055fe:	6263      	str	r3, [r4, #36]	; 0x24
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <std+0x3c>)
 8005602:	62a3      	str	r3, [r4, #40]	; 0x28
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <std+0x40>)
 8005606:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <std+0x44>)
 800560a:	6323      	str	r3, [r4, #48]	; 0x30
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	08006391 	.word	0x08006391
 8005614:	080063b3 	.word	0x080063b3
 8005618:	080063eb 	.word	0x080063eb
 800561c:	0800640f 	.word	0x0800640f

08005620 <_cleanup_r>:
 8005620:	4901      	ldr	r1, [pc, #4]	; (8005628 <_cleanup_r+0x8>)
 8005622:	f000 b8af 	b.w	8005784 <_fwalk_reent>
 8005626:	bf00      	nop
 8005628:	08005561 	.word	0x08005561

0800562c <__sfmoreglue>:
 800562c:	2268      	movs	r2, #104	; 0x68
 800562e:	b570      	push	{r4, r5, r6, lr}
 8005630:	1e4d      	subs	r5, r1, #1
 8005632:	4355      	muls	r5, r2
 8005634:	460e      	mov	r6, r1
 8005636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800563a:	f000 f993 	bl	8005964 <_malloc_r>
 800563e:	4604      	mov	r4, r0
 8005640:	b140      	cbz	r0, 8005654 <__sfmoreglue+0x28>
 8005642:	2100      	movs	r1, #0
 8005644:	e9c0 1600 	strd	r1, r6, [r0]
 8005648:	300c      	adds	r0, #12
 800564a:	60a0      	str	r0, [r4, #8]
 800564c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005650:	f7ff fd7a 	bl	8005148 <memset>
 8005654:	4620      	mov	r0, r4
 8005656:	bd70      	pop	{r4, r5, r6, pc}

08005658 <__sfp_lock_acquire>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__sfp_lock_acquire+0x8>)
 800565a:	f000 b8b3 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 800565e:	bf00      	nop
 8005660:	20002df1 	.word	0x20002df1

08005664 <__sfp_lock_release>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__sfp_lock_release+0x8>)
 8005666:	f000 b8ae 	b.w	80057c6 <__retarget_lock_release_recursive>
 800566a:	bf00      	nop
 800566c:	20002df1 	.word	0x20002df1

08005670 <__sinit_lock_acquire>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__sinit_lock_acquire+0x8>)
 8005672:	f000 b8a7 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 8005676:	bf00      	nop
 8005678:	20002df2 	.word	0x20002df2

0800567c <__sinit_lock_release>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__sinit_lock_release+0x8>)
 800567e:	f000 b8a2 	b.w	80057c6 <__retarget_lock_release_recursive>
 8005682:	bf00      	nop
 8005684:	20002df2 	.word	0x20002df2

08005688 <__sinit>:
 8005688:	b510      	push	{r4, lr}
 800568a:	4604      	mov	r4, r0
 800568c:	f7ff fff0 	bl	8005670 <__sinit_lock_acquire>
 8005690:	69a3      	ldr	r3, [r4, #24]
 8005692:	b11b      	cbz	r3, 800569c <__sinit+0x14>
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f7ff bff0 	b.w	800567c <__sinit_lock_release>
 800569c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056a0:	6523      	str	r3, [r4, #80]	; 0x50
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <__sinit+0x68>)
 80056a4:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <__sinit+0x6c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	bf08      	it	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	4620      	mov	r0, r4
 80056b2:	bf08      	it	eq
 80056b4:	61a3      	streq	r3, [r4, #24]
 80056b6:	f000 f81f 	bl	80056f8 <__sfp>
 80056ba:	6060      	str	r0, [r4, #4]
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 f81b 	bl	80056f8 <__sfp>
 80056c2:	60a0      	str	r0, [r4, #8]
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 f817 	bl	80056f8 <__sfp>
 80056ca:	2200      	movs	r2, #0
 80056cc:	2104      	movs	r1, #4
 80056ce:	60e0      	str	r0, [r4, #12]
 80056d0:	6860      	ldr	r0, [r4, #4]
 80056d2:	f7ff ff81 	bl	80055d8 <std>
 80056d6:	2201      	movs	r2, #1
 80056d8:	2109      	movs	r1, #9
 80056da:	68a0      	ldr	r0, [r4, #8]
 80056dc:	f7ff ff7c 	bl	80055d8 <std>
 80056e0:	2202      	movs	r2, #2
 80056e2:	2112      	movs	r1, #18
 80056e4:	68e0      	ldr	r0, [r4, #12]
 80056e6:	f7ff ff77 	bl	80055d8 <std>
 80056ea:	2301      	movs	r3, #1
 80056ec:	61a3      	str	r3, [r4, #24]
 80056ee:	e7d1      	b.n	8005694 <__sinit+0xc>
 80056f0:	08006bc4 	.word	0x08006bc4
 80056f4:	08005621 	.word	0x08005621

080056f8 <__sfp>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	4607      	mov	r7, r0
 80056fc:	f7ff ffac 	bl	8005658 <__sfp_lock_acquire>
 8005700:	4b1e      	ldr	r3, [pc, #120]	; (800577c <__sfp+0x84>)
 8005702:	681e      	ldr	r6, [r3, #0]
 8005704:	69b3      	ldr	r3, [r6, #24]
 8005706:	b913      	cbnz	r3, 800570e <__sfp+0x16>
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff ffbd 	bl	8005688 <__sinit>
 800570e:	3648      	adds	r6, #72	; 0x48
 8005710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005714:	3b01      	subs	r3, #1
 8005716:	d503      	bpl.n	8005720 <__sfp+0x28>
 8005718:	6833      	ldr	r3, [r6, #0]
 800571a:	b30b      	cbz	r3, 8005760 <__sfp+0x68>
 800571c:	6836      	ldr	r6, [r6, #0]
 800571e:	e7f7      	b.n	8005710 <__sfp+0x18>
 8005720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005724:	b9d5      	cbnz	r5, 800575c <__sfp+0x64>
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <__sfp+0x88>)
 8005728:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800572c:	60e3      	str	r3, [r4, #12]
 800572e:	6665      	str	r5, [r4, #100]	; 0x64
 8005730:	f000 f847 	bl	80057c2 <__retarget_lock_init_recursive>
 8005734:	f7ff ff96 	bl	8005664 <__sfp_lock_release>
 8005738:	2208      	movs	r2, #8
 800573a:	4629      	mov	r1, r5
 800573c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005744:	6025      	str	r5, [r4, #0]
 8005746:	61a5      	str	r5, [r4, #24]
 8005748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800574c:	f7ff fcfc 	bl	8005148 <memset>
 8005750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005758:	4620      	mov	r0, r4
 800575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575c:	3468      	adds	r4, #104	; 0x68
 800575e:	e7d9      	b.n	8005714 <__sfp+0x1c>
 8005760:	2104      	movs	r1, #4
 8005762:	4638      	mov	r0, r7
 8005764:	f7ff ff62 	bl	800562c <__sfmoreglue>
 8005768:	4604      	mov	r4, r0
 800576a:	6030      	str	r0, [r6, #0]
 800576c:	2800      	cmp	r0, #0
 800576e:	d1d5      	bne.n	800571c <__sfp+0x24>
 8005770:	f7ff ff78 	bl	8005664 <__sfp_lock_release>
 8005774:	230c      	movs	r3, #12
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	e7ee      	b.n	8005758 <__sfp+0x60>
 800577a:	bf00      	nop
 800577c:	08006bc4 	.word	0x08006bc4
 8005780:	ffff0001 	.word	0xffff0001

08005784 <_fwalk_reent>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	4606      	mov	r6, r0
 800578a:	4688      	mov	r8, r1
 800578c:	2700      	movs	r7, #0
 800578e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005796:	f1b9 0901 	subs.w	r9, r9, #1
 800579a:	d505      	bpl.n	80057a8 <_fwalk_reent+0x24>
 800579c:	6824      	ldr	r4, [r4, #0]
 800579e:	2c00      	cmp	r4, #0
 80057a0:	d1f7      	bne.n	8005792 <_fwalk_reent+0xe>
 80057a2:	4638      	mov	r0, r7
 80057a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a8:	89ab      	ldrh	r3, [r5, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d907      	bls.n	80057be <_fwalk_reent+0x3a>
 80057ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b2:	3301      	adds	r3, #1
 80057b4:	d003      	beq.n	80057be <_fwalk_reent+0x3a>
 80057b6:	4629      	mov	r1, r5
 80057b8:	4630      	mov	r0, r6
 80057ba:	47c0      	blx	r8
 80057bc:	4307      	orrs	r7, r0
 80057be:	3568      	adds	r5, #104	; 0x68
 80057c0:	e7e9      	b.n	8005796 <_fwalk_reent+0x12>

080057c2 <__retarget_lock_init_recursive>:
 80057c2:	4770      	bx	lr

080057c4 <__retarget_lock_acquire_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_release_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <__swhatbuf_r>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	460e      	mov	r6, r1
 80057cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d0:	4614      	mov	r4, r2
 80057d2:	2900      	cmp	r1, #0
 80057d4:	461d      	mov	r5, r3
 80057d6:	b096      	sub	sp, #88	; 0x58
 80057d8:	da08      	bge.n	80057ec <__swhatbuf_r+0x24>
 80057da:	2200      	movs	r2, #0
 80057dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	061a      	lsls	r2, r3, #24
 80057e4:	d410      	bmi.n	8005808 <__swhatbuf_r+0x40>
 80057e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ea:	e00e      	b.n	800580a <__swhatbuf_r+0x42>
 80057ec:	466a      	mov	r2, sp
 80057ee:	f000 fe35 	bl	800645c <_fstat_r>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	dbf1      	blt.n	80057da <__swhatbuf_r+0x12>
 80057f6:	9a01      	ldr	r2, [sp, #4]
 80057f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005800:	425a      	negs	r2, r3
 8005802:	415a      	adcs	r2, r3
 8005804:	602a      	str	r2, [r5, #0]
 8005806:	e7ee      	b.n	80057e6 <__swhatbuf_r+0x1e>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	2000      	movs	r0, #0
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	b016      	add	sp, #88	; 0x58
 8005810:	bd70      	pop	{r4, r5, r6, pc}
	...

08005814 <__smakebuf_r>:
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005818:	079d      	lsls	r5, r3, #30
 800581a:	4606      	mov	r6, r0
 800581c:	460c      	mov	r4, r1
 800581e:	d507      	bpl.n	8005830 <__smakebuf_r+0x1c>
 8005820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	6123      	str	r3, [r4, #16]
 8005828:	2301      	movs	r3, #1
 800582a:	6163      	str	r3, [r4, #20]
 800582c:	b002      	add	sp, #8
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	466a      	mov	r2, sp
 8005832:	ab01      	add	r3, sp, #4
 8005834:	f7ff ffc8 	bl	80057c8 <__swhatbuf_r>
 8005838:	9900      	ldr	r1, [sp, #0]
 800583a:	4605      	mov	r5, r0
 800583c:	4630      	mov	r0, r6
 800583e:	f000 f891 	bl	8005964 <_malloc_r>
 8005842:	b948      	cbnz	r0, 8005858 <__smakebuf_r+0x44>
 8005844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005848:	059a      	lsls	r2, r3, #22
 800584a:	d4ef      	bmi.n	800582c <__smakebuf_r+0x18>
 800584c:	f023 0303 	bic.w	r3, r3, #3
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	e7e3      	b.n	8005820 <__smakebuf_r+0xc>
 8005858:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <__smakebuf_r+0x7c>)
 800585a:	62b3      	str	r3, [r6, #40]	; 0x28
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	6020      	str	r0, [r4, #0]
 8005860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	6120      	str	r0, [r4, #16]
 800586a:	6163      	str	r3, [r4, #20]
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	b15b      	cbz	r3, 8005888 <__smakebuf_r+0x74>
 8005870:	4630      	mov	r0, r6
 8005872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005876:	f000 fe03 	bl	8006480 <_isatty_r>
 800587a:	b128      	cbz	r0, 8005888 <__smakebuf_r+0x74>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	89a0      	ldrh	r0, [r4, #12]
 800588a:	4305      	orrs	r5, r0
 800588c:	81a5      	strh	r5, [r4, #12]
 800588e:	e7cd      	b.n	800582c <__smakebuf_r+0x18>
 8005890:	08005621 	.word	0x08005621

08005894 <_free_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4605      	mov	r5, r0
 8005898:	2900      	cmp	r1, #0
 800589a:	d040      	beq.n	800591e <_free_r+0x8a>
 800589c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a0:	1f0c      	subs	r4, r1, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bfb8      	it	lt
 80058a6:	18e4      	addlt	r4, r4, r3
 80058a8:	f000 fe34 	bl	8006514 <__malloc_lock>
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <_free_r+0x8c>)
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	b933      	cbnz	r3, 80058c0 <_free_r+0x2c>
 80058b2:	6063      	str	r3, [r4, #4]
 80058b4:	6014      	str	r4, [r2, #0]
 80058b6:	4628      	mov	r0, r5
 80058b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058bc:	f000 be30 	b.w	8006520 <__malloc_unlock>
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d908      	bls.n	80058d6 <_free_r+0x42>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	1821      	adds	r1, r4, r0
 80058c8:	428b      	cmp	r3, r1
 80058ca:	bf01      	itttt	eq
 80058cc:	6819      	ldreq	r1, [r3, #0]
 80058ce:	685b      	ldreq	r3, [r3, #4]
 80058d0:	1809      	addeq	r1, r1, r0
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	e7ed      	b.n	80058b2 <_free_r+0x1e>
 80058d6:	461a      	mov	r2, r3
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	b10b      	cbz	r3, 80058e0 <_free_r+0x4c>
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d9fa      	bls.n	80058d6 <_free_r+0x42>
 80058e0:	6811      	ldr	r1, [r2, #0]
 80058e2:	1850      	adds	r0, r2, r1
 80058e4:	42a0      	cmp	r0, r4
 80058e6:	d10b      	bne.n	8005900 <_free_r+0x6c>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	4401      	add	r1, r0
 80058ec:	1850      	adds	r0, r2, r1
 80058ee:	4283      	cmp	r3, r0
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	d1e0      	bne.n	80058b6 <_free_r+0x22>
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4401      	add	r1, r0
 80058fa:	6011      	str	r1, [r2, #0]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	e7da      	b.n	80058b6 <_free_r+0x22>
 8005900:	d902      	bls.n	8005908 <_free_r+0x74>
 8005902:	230c      	movs	r3, #12
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	e7d6      	b.n	80058b6 <_free_r+0x22>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	1821      	adds	r1, r4, r0
 800590c:	428b      	cmp	r3, r1
 800590e:	bf01      	itttt	eq
 8005910:	6819      	ldreq	r1, [r3, #0]
 8005912:	685b      	ldreq	r3, [r3, #4]
 8005914:	1809      	addeq	r1, r1, r0
 8005916:	6021      	streq	r1, [r4, #0]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	6054      	str	r4, [r2, #4]
 800591c:	e7cb      	b.n	80058b6 <_free_r+0x22>
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	20002df4 	.word	0x20002df4

08005924 <sbrk_aligned>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4e0e      	ldr	r6, [pc, #56]	; (8005960 <sbrk_aligned+0x3c>)
 8005928:	460c      	mov	r4, r1
 800592a:	6831      	ldr	r1, [r6, #0]
 800592c:	4605      	mov	r5, r0
 800592e:	b911      	cbnz	r1, 8005936 <sbrk_aligned+0x12>
 8005930:	f000 fd1e 	bl	8006370 <_sbrk_r>
 8005934:	6030      	str	r0, [r6, #0]
 8005936:	4621      	mov	r1, r4
 8005938:	4628      	mov	r0, r5
 800593a:	f000 fd19 	bl	8006370 <_sbrk_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d00a      	beq.n	8005958 <sbrk_aligned+0x34>
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d007      	beq.n	800595c <sbrk_aligned+0x38>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fd0e 	bl	8006370 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d101      	bne.n	800595c <sbrk_aligned+0x38>
 8005958:	f04f 34ff 	mov.w	r4, #4294967295
 800595c:	4620      	mov	r0, r4
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	20002df8 	.word	0x20002df8

08005964 <_malloc_r>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	1ccd      	adds	r5, r1, #3
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	2d00      	cmp	r5, #0
 8005978:	4607      	mov	r7, r0
 800597a:	db01      	blt.n	8005980 <_malloc_r+0x1c>
 800597c:	42a9      	cmp	r1, r5
 800597e:	d905      	bls.n	800598c <_malloc_r+0x28>
 8005980:	230c      	movs	r3, #12
 8005982:	2600      	movs	r6, #0
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4630      	mov	r0, r6
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	4e2e      	ldr	r6, [pc, #184]	; (8005a48 <_malloc_r+0xe4>)
 800598e:	f000 fdc1 	bl	8006514 <__malloc_lock>
 8005992:	6833      	ldr	r3, [r6, #0]
 8005994:	461c      	mov	r4, r3
 8005996:	bb34      	cbnz	r4, 80059e6 <_malloc_r+0x82>
 8005998:	4629      	mov	r1, r5
 800599a:	4638      	mov	r0, r7
 800599c:	f7ff ffc2 	bl	8005924 <sbrk_aligned>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	4604      	mov	r4, r0
 80059a4:	d14d      	bne.n	8005a42 <_malloc_r+0xde>
 80059a6:	6834      	ldr	r4, [r6, #0]
 80059a8:	4626      	mov	r6, r4
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	d140      	bne.n	8005a30 <_malloc_r+0xcc>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	4631      	mov	r1, r6
 80059b2:	4638      	mov	r0, r7
 80059b4:	eb04 0803 	add.w	r8, r4, r3
 80059b8:	f000 fcda 	bl	8006370 <_sbrk_r>
 80059bc:	4580      	cmp	r8, r0
 80059be:	d13a      	bne.n	8005a36 <_malloc_r+0xd2>
 80059c0:	6821      	ldr	r1, [r4, #0]
 80059c2:	3503      	adds	r5, #3
 80059c4:	1a6d      	subs	r5, r5, r1
 80059c6:	f025 0503 	bic.w	r5, r5, #3
 80059ca:	3508      	adds	r5, #8
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	bf38      	it	cc
 80059d0:	250c      	movcc	r5, #12
 80059d2:	4638      	mov	r0, r7
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7ff ffa5 	bl	8005924 <sbrk_aligned>
 80059da:	3001      	adds	r0, #1
 80059dc:	d02b      	beq.n	8005a36 <_malloc_r+0xd2>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	442b      	add	r3, r5
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	e00e      	b.n	8005a04 <_malloc_r+0xa0>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	1b52      	subs	r2, r2, r5
 80059ea:	d41e      	bmi.n	8005a2a <_malloc_r+0xc6>
 80059ec:	2a0b      	cmp	r2, #11
 80059ee:	d916      	bls.n	8005a1e <_malloc_r+0xba>
 80059f0:	1961      	adds	r1, r4, r5
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	bf18      	it	ne
 80059f8:	6059      	strne	r1, [r3, #4]
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	bf08      	it	eq
 80059fe:	6031      	streq	r1, [r6, #0]
 8005a00:	5162      	str	r2, [r4, r5]
 8005a02:	604b      	str	r3, [r1, #4]
 8005a04:	4638      	mov	r0, r7
 8005a06:	f104 060b 	add.w	r6, r4, #11
 8005a0a:	f000 fd89 	bl	8006520 <__malloc_unlock>
 8005a0e:	f026 0607 	bic.w	r6, r6, #7
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	1af2      	subs	r2, r6, r3
 8005a16:	d0b6      	beq.n	8005986 <_malloc_r+0x22>
 8005a18:	1b9b      	subs	r3, r3, r6
 8005a1a:	50a3      	str	r3, [r4, r2]
 8005a1c:	e7b3      	b.n	8005986 <_malloc_r+0x22>
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	bf0c      	ite	eq
 8005a24:	6032      	streq	r2, [r6, #0]
 8005a26:	605a      	strne	r2, [r3, #4]
 8005a28:	e7ec      	b.n	8005a04 <_malloc_r+0xa0>
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	6864      	ldr	r4, [r4, #4]
 8005a2e:	e7b2      	b.n	8005996 <_malloc_r+0x32>
 8005a30:	4634      	mov	r4, r6
 8005a32:	6876      	ldr	r6, [r6, #4]
 8005a34:	e7b9      	b.n	80059aa <_malloc_r+0x46>
 8005a36:	230c      	movs	r3, #12
 8005a38:	4638      	mov	r0, r7
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	f000 fd70 	bl	8006520 <__malloc_unlock>
 8005a40:	e7a1      	b.n	8005986 <_malloc_r+0x22>
 8005a42:	6025      	str	r5, [r4, #0]
 8005a44:	e7de      	b.n	8005a04 <_malloc_r+0xa0>
 8005a46:	bf00      	nop
 8005a48:	20002df4 	.word	0x20002df4

08005a4c <__ssputs_r>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	688e      	ldr	r6, [r1, #8]
 8005a52:	4682      	mov	sl, r0
 8005a54:	429e      	cmp	r6, r3
 8005a56:	460c      	mov	r4, r1
 8005a58:	4690      	mov	r8, r2
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	d838      	bhi.n	8005ad0 <__ssputs_r+0x84>
 8005a5e:	898a      	ldrh	r2, [r1, #12]
 8005a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a64:	d032      	beq.n	8005acc <__ssputs_r+0x80>
 8005a66:	6825      	ldr	r5, [r4, #0]
 8005a68:	6909      	ldr	r1, [r1, #16]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	eba5 0901 	sub.w	r9, r5, r1
 8005a70:	6965      	ldr	r5, [r4, #20]
 8005a72:	444b      	add	r3, r9
 8005a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a7c:	106d      	asrs	r5, r5, #1
 8005a7e:	429d      	cmp	r5, r3
 8005a80:	bf38      	it	cc
 8005a82:	461d      	movcc	r5, r3
 8005a84:	0553      	lsls	r3, r2, #21
 8005a86:	d531      	bpl.n	8005aec <__ssputs_r+0xa0>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f7ff ff6b 	bl	8005964 <_malloc_r>
 8005a8e:	4606      	mov	r6, r0
 8005a90:	b950      	cbnz	r0, 8005aa8 <__ssputs_r+0x5c>
 8005a92:	230c      	movs	r3, #12
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	f8ca 3000 	str.w	r3, [sl]
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa8:	464a      	mov	r2, r9
 8005aaa:	6921      	ldr	r1, [r4, #16]
 8005aac:	f7ff fb3e 	bl	800512c <memcpy>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	6126      	str	r6, [r4, #16]
 8005abe:	444e      	add	r6, r9
 8005ac0:	6026      	str	r6, [r4, #0]
 8005ac2:	463e      	mov	r6, r7
 8005ac4:	6165      	str	r5, [r4, #20]
 8005ac6:	eba5 0509 	sub.w	r5, r5, r9
 8005aca:	60a5      	str	r5, [r4, #8]
 8005acc:	42be      	cmp	r6, r7
 8005ace:	d900      	bls.n	8005ad2 <__ssputs_r+0x86>
 8005ad0:	463e      	mov	r6, r7
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	f000 fd02 	bl	80064e0 <memmove>
 8005adc:	68a3      	ldr	r3, [r4, #8]
 8005ade:	2000      	movs	r0, #0
 8005ae0:	1b9b      	subs	r3, r3, r6
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	4433      	add	r3, r6
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	e7db      	b.n	8005aa4 <__ssputs_r+0x58>
 8005aec:	462a      	mov	r2, r5
 8005aee:	f000 fd1d 	bl	800652c <_realloc_r>
 8005af2:	4606      	mov	r6, r0
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d1e1      	bne.n	8005abc <__ssputs_r+0x70>
 8005af8:	4650      	mov	r0, sl
 8005afa:	6921      	ldr	r1, [r4, #16]
 8005afc:	f7ff feca 	bl	8005894 <_free_r>
 8005b00:	e7c7      	b.n	8005a92 <__ssputs_r+0x46>
	...

08005b04 <_svfiprintf_r>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	4698      	mov	r8, r3
 8005b0a:	898b      	ldrh	r3, [r1, #12]
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	460d      	mov	r5, r1
 8005b12:	4614      	mov	r4, r2
 8005b14:	b09d      	sub	sp, #116	; 0x74
 8005b16:	d50e      	bpl.n	8005b36 <_svfiprintf_r+0x32>
 8005b18:	690b      	ldr	r3, [r1, #16]
 8005b1a:	b963      	cbnz	r3, 8005b36 <_svfiprintf_r+0x32>
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	f7ff ff21 	bl	8005964 <_malloc_r>
 8005b22:	6028      	str	r0, [r5, #0]
 8005b24:	6128      	str	r0, [r5, #16]
 8005b26:	b920      	cbnz	r0, 8005b32 <_svfiprintf_r+0x2e>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e0d1      	b.n	8005cd6 <_svfiprintf_r+0x1d2>
 8005b32:	2340      	movs	r3, #64	; 0x40
 8005b34:	616b      	str	r3, [r5, #20]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b40:	2330      	movs	r3, #48	; 0x30
 8005b42:	f04f 0901 	mov.w	r9, #1
 8005b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005cf0 <_svfiprintf_r+0x1ec>
 8005b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b52:	4623      	mov	r3, r4
 8005b54:	469a      	mov	sl, r3
 8005b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b5a:	b10a      	cbz	r2, 8005b60 <_svfiprintf_r+0x5c>
 8005b5c:	2a25      	cmp	r2, #37	; 0x25
 8005b5e:	d1f9      	bne.n	8005b54 <_svfiprintf_r+0x50>
 8005b60:	ebba 0b04 	subs.w	fp, sl, r4
 8005b64:	d00b      	beq.n	8005b7e <_svfiprintf_r+0x7a>
 8005b66:	465b      	mov	r3, fp
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff ff6d 	bl	8005a4c <__ssputs_r>
 8005b72:	3001      	adds	r0, #1
 8005b74:	f000 80aa 	beq.w	8005ccc <_svfiprintf_r+0x1c8>
 8005b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b7a:	445a      	add	r2, fp
 8005b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80a2 	beq.w	8005ccc <_svfiprintf_r+0x1c8>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b92:	f10a 0a01 	add.w	sl, sl, #1
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	9307      	str	r3, [sp, #28]
 8005b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005ba0:	4654      	mov	r4, sl
 8005ba2:	2205      	movs	r2, #5
 8005ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba8:	4851      	ldr	r0, [pc, #324]	; (8005cf0 <_svfiprintf_r+0x1ec>)
 8005baa:	f000 fc8b 	bl	80064c4 <memchr>
 8005bae:	9a04      	ldr	r2, [sp, #16]
 8005bb0:	b9d8      	cbnz	r0, 8005bea <_svfiprintf_r+0xe6>
 8005bb2:	06d0      	lsls	r0, r2, #27
 8005bb4:	bf44      	itt	mi
 8005bb6:	2320      	movmi	r3, #32
 8005bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bbc:	0711      	lsls	r1, r2, #28
 8005bbe:	bf44      	itt	mi
 8005bc0:	232b      	movmi	r3, #43	; 0x2b
 8005bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bca:	2b2a      	cmp	r3, #42	; 0x2a
 8005bcc:	d015      	beq.n	8005bfa <_svfiprintf_r+0xf6>
 8005bce:	4654      	mov	r4, sl
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f04f 0c0a 	mov.w	ip, #10
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bde:	3b30      	subs	r3, #48	; 0x30
 8005be0:	2b09      	cmp	r3, #9
 8005be2:	d94e      	bls.n	8005c82 <_svfiprintf_r+0x17e>
 8005be4:	b1b0      	cbz	r0, 8005c14 <_svfiprintf_r+0x110>
 8005be6:	9207      	str	r2, [sp, #28]
 8005be8:	e014      	b.n	8005c14 <_svfiprintf_r+0x110>
 8005bea:	eba0 0308 	sub.w	r3, r0, r8
 8005bee:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	46a2      	mov	sl, r4
 8005bf6:	9304      	str	r3, [sp, #16]
 8005bf8:	e7d2      	b.n	8005ba0 <_svfiprintf_r+0x9c>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	1d19      	adds	r1, r3, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfbb      	ittet	lt
 8005c06:	425b      	neglt	r3, r3
 8005c08:	f042 0202 	orrlt.w	r2, r2, #2
 8005c0c:	9307      	strge	r3, [sp, #28]
 8005c0e:	9307      	strlt	r3, [sp, #28]
 8005c10:	bfb8      	it	lt
 8005c12:	9204      	strlt	r2, [sp, #16]
 8005c14:	7823      	ldrb	r3, [r4, #0]
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d10c      	bne.n	8005c34 <_svfiprintf_r+0x130>
 8005c1a:	7863      	ldrb	r3, [r4, #1]
 8005c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1e:	d135      	bne.n	8005c8c <_svfiprintf_r+0x188>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	3402      	adds	r4, #2
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	9203      	str	r2, [sp, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfb8      	it	lt
 8005c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c32:	9305      	str	r3, [sp, #20]
 8005c34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005cf4 <_svfiprintf_r+0x1f0>
 8005c38:	2203      	movs	r2, #3
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	7821      	ldrb	r1, [r4, #0]
 8005c3e:	f000 fc41 	bl	80064c4 <memchr>
 8005c42:	b140      	cbz	r0, 8005c56 <_svfiprintf_r+0x152>
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	eba0 000a 	sub.w	r0, r0, sl
 8005c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	3401      	adds	r4, #1
 8005c52:	4303      	orrs	r3, r0
 8005c54:	9304      	str	r3, [sp, #16]
 8005c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5a:	2206      	movs	r2, #6
 8005c5c:	4826      	ldr	r0, [pc, #152]	; (8005cf8 <_svfiprintf_r+0x1f4>)
 8005c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c62:	f000 fc2f 	bl	80064c4 <memchr>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d038      	beq.n	8005cdc <_svfiprintf_r+0x1d8>
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <_svfiprintf_r+0x1f8>)
 8005c6c:	bb1b      	cbnz	r3, 8005cb6 <_svfiprintf_r+0x1b2>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	3307      	adds	r3, #7
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	3308      	adds	r3, #8
 8005c78:	9303      	str	r3, [sp, #12]
 8005c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7c:	4433      	add	r3, r6
 8005c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c80:	e767      	b.n	8005b52 <_svfiprintf_r+0x4e>
 8005c82:	460c      	mov	r4, r1
 8005c84:	2001      	movs	r0, #1
 8005c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c8a:	e7a5      	b.n	8005bd8 <_svfiprintf_r+0xd4>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f04f 0c0a 	mov.w	ip, #10
 8005c92:	4619      	mov	r1, r3
 8005c94:	3401      	adds	r4, #1
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c9e:	3a30      	subs	r2, #48	; 0x30
 8005ca0:	2a09      	cmp	r2, #9
 8005ca2:	d903      	bls.n	8005cac <_svfiprintf_r+0x1a8>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0c5      	beq.n	8005c34 <_svfiprintf_r+0x130>
 8005ca8:	9105      	str	r1, [sp, #20]
 8005caa:	e7c3      	b.n	8005c34 <_svfiprintf_r+0x130>
 8005cac:	4604      	mov	r4, r0
 8005cae:	2301      	movs	r3, #1
 8005cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb4:	e7f0      	b.n	8005c98 <_svfiprintf_r+0x194>
 8005cb6:	ab03      	add	r3, sp, #12
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	462a      	mov	r2, r5
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <_svfiprintf_r+0x1fc>)
 8005cc0:	a904      	add	r1, sp, #16
 8005cc2:	f3af 8000 	nop.w
 8005cc6:	1c42      	adds	r2, r0, #1
 8005cc8:	4606      	mov	r6, r0
 8005cca:	d1d6      	bne.n	8005c7a <_svfiprintf_r+0x176>
 8005ccc:	89ab      	ldrh	r3, [r5, #12]
 8005cce:	065b      	lsls	r3, r3, #25
 8005cd0:	f53f af2c 	bmi.w	8005b2c <_svfiprintf_r+0x28>
 8005cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd6:	b01d      	add	sp, #116	; 0x74
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_svfiprintf_r+0x1fc>)
 8005ce6:	a904      	add	r1, sp, #16
 8005ce8:	f000 f9d4 	bl	8006094 <_printf_i>
 8005cec:	e7eb      	b.n	8005cc6 <_svfiprintf_r+0x1c2>
 8005cee:	bf00      	nop
 8005cf0:	08006c28 	.word	0x08006c28
 8005cf4:	08006c2e 	.word	0x08006c2e
 8005cf8:	08006c32 	.word	0x08006c32
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005a4d 	.word	0x08005a4d

08005d04 <__sfputc_r>:
 8005d04:	6893      	ldr	r3, [r2, #8]
 8005d06:	b410      	push	{r4}
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	6093      	str	r3, [r2, #8]
 8005d0e:	da07      	bge.n	8005d20 <__sfputc_r+0x1c>
 8005d10:	6994      	ldr	r4, [r2, #24]
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	db01      	blt.n	8005d1a <__sfputc_r+0x16>
 8005d16:	290a      	cmp	r1, #10
 8005d18:	d102      	bne.n	8005d20 <__sfputc_r+0x1c>
 8005d1a:	bc10      	pop	{r4}
 8005d1c:	f7ff bade 	b.w	80052dc <__swbuf_r>
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	1c58      	adds	r0, r3, #1
 8005d24:	6010      	str	r0, [r2, #0]
 8005d26:	7019      	strb	r1, [r3, #0]
 8005d28:	4608      	mov	r0, r1
 8005d2a:	bc10      	pop	{r4}
 8005d2c:	4770      	bx	lr

08005d2e <__sfputs_r>:
 8005d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d30:	4606      	mov	r6, r0
 8005d32:	460f      	mov	r7, r1
 8005d34:	4614      	mov	r4, r2
 8005d36:	18d5      	adds	r5, r2, r3
 8005d38:	42ac      	cmp	r4, r5
 8005d3a:	d101      	bne.n	8005d40 <__sfputs_r+0x12>
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e007      	b.n	8005d50 <__sfputs_r+0x22>
 8005d40:	463a      	mov	r2, r7
 8005d42:	4630      	mov	r0, r6
 8005d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d48:	f7ff ffdc 	bl	8005d04 <__sfputc_r>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d1f3      	bne.n	8005d38 <__sfputs_r+0xa>
 8005d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d54 <_vfiprintf_r>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	460d      	mov	r5, r1
 8005d5a:	4614      	mov	r4, r2
 8005d5c:	4698      	mov	r8, r3
 8005d5e:	4606      	mov	r6, r0
 8005d60:	b09d      	sub	sp, #116	; 0x74
 8005d62:	b118      	cbz	r0, 8005d6c <_vfiprintf_r+0x18>
 8005d64:	6983      	ldr	r3, [r0, #24]
 8005d66:	b90b      	cbnz	r3, 8005d6c <_vfiprintf_r+0x18>
 8005d68:	f7ff fc8e 	bl	8005688 <__sinit>
 8005d6c:	4b89      	ldr	r3, [pc, #548]	; (8005f94 <_vfiprintf_r+0x240>)
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	d11b      	bne.n	8005daa <_vfiprintf_r+0x56>
 8005d72:	6875      	ldr	r5, [r6, #4]
 8005d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d76:	07d9      	lsls	r1, r3, #31
 8005d78:	d405      	bmi.n	8005d86 <_vfiprintf_r+0x32>
 8005d7a:	89ab      	ldrh	r3, [r5, #12]
 8005d7c:	059a      	lsls	r2, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_vfiprintf_r+0x32>
 8005d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d82:	f7ff fd1f 	bl	80057c4 <__retarget_lock_acquire_recursive>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	071b      	lsls	r3, r3, #28
 8005d8a:	d501      	bpl.n	8005d90 <_vfiprintf_r+0x3c>
 8005d8c:	692b      	ldr	r3, [r5, #16]
 8005d8e:	b9eb      	cbnz	r3, 8005dcc <_vfiprintf_r+0x78>
 8005d90:	4629      	mov	r1, r5
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7ff faf4 	bl	8005380 <__swsetup_r>
 8005d98:	b1c0      	cbz	r0, 8005dcc <_vfiprintf_r+0x78>
 8005d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d9c:	07dc      	lsls	r4, r3, #31
 8005d9e:	d50e      	bpl.n	8005dbe <_vfiprintf_r+0x6a>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	b01d      	add	sp, #116	; 0x74
 8005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	4b7b      	ldr	r3, [pc, #492]	; (8005f98 <_vfiprintf_r+0x244>)
 8005dac:	429d      	cmp	r5, r3
 8005dae:	d101      	bne.n	8005db4 <_vfiprintf_r+0x60>
 8005db0:	68b5      	ldr	r5, [r6, #8]
 8005db2:	e7df      	b.n	8005d74 <_vfiprintf_r+0x20>
 8005db4:	4b79      	ldr	r3, [pc, #484]	; (8005f9c <_vfiprintf_r+0x248>)
 8005db6:	429d      	cmp	r5, r3
 8005db8:	bf08      	it	eq
 8005dba:	68f5      	ldreq	r5, [r6, #12]
 8005dbc:	e7da      	b.n	8005d74 <_vfiprintf_r+0x20>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	0598      	lsls	r0, r3, #22
 8005dc2:	d4ed      	bmi.n	8005da0 <_vfiprintf_r+0x4c>
 8005dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dc6:	f7ff fcfe 	bl	80057c6 <__retarget_lock_release_recursive>
 8005dca:	e7e9      	b.n	8005da0 <_vfiprintf_r+0x4c>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dd6:	2330      	movs	r3, #48	; 0x30
 8005dd8:	f04f 0901 	mov.w	r9, #1
 8005ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fa0 <_vfiprintf_r+0x24c>
 8005de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005de8:	4623      	mov	r3, r4
 8005dea:	469a      	mov	sl, r3
 8005dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df0:	b10a      	cbz	r2, 8005df6 <_vfiprintf_r+0xa2>
 8005df2:	2a25      	cmp	r2, #37	; 0x25
 8005df4:	d1f9      	bne.n	8005dea <_vfiprintf_r+0x96>
 8005df6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dfa:	d00b      	beq.n	8005e14 <_vfiprintf_r+0xc0>
 8005dfc:	465b      	mov	r3, fp
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	4630      	mov	r0, r6
 8005e04:	f7ff ff93 	bl	8005d2e <__sfputs_r>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f000 80aa 	beq.w	8005f62 <_vfiprintf_r+0x20e>
 8005e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e10:	445a      	add	r2, fp
 8005e12:	9209      	str	r2, [sp, #36]	; 0x24
 8005e14:	f89a 3000 	ldrb.w	r3, [sl]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80a2 	beq.w	8005f62 <_vfiprintf_r+0x20e>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e28:	f10a 0a01 	add.w	sl, sl, #1
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e34:	931a      	str	r3, [sp, #104]	; 0x68
 8005e36:	4654      	mov	r4, sl
 8005e38:	2205      	movs	r2, #5
 8005e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3e:	4858      	ldr	r0, [pc, #352]	; (8005fa0 <_vfiprintf_r+0x24c>)
 8005e40:	f000 fb40 	bl	80064c4 <memchr>
 8005e44:	9a04      	ldr	r2, [sp, #16]
 8005e46:	b9d8      	cbnz	r0, 8005e80 <_vfiprintf_r+0x12c>
 8005e48:	06d1      	lsls	r1, r2, #27
 8005e4a:	bf44      	itt	mi
 8005e4c:	2320      	movmi	r3, #32
 8005e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e52:	0713      	lsls	r3, r2, #28
 8005e54:	bf44      	itt	mi
 8005e56:	232b      	movmi	r3, #43	; 0x2b
 8005e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e60:	2b2a      	cmp	r3, #42	; 0x2a
 8005e62:	d015      	beq.n	8005e90 <_vfiprintf_r+0x13c>
 8005e64:	4654      	mov	r4, sl
 8005e66:	2000      	movs	r0, #0
 8005e68:	f04f 0c0a 	mov.w	ip, #10
 8005e6c:	9a07      	ldr	r2, [sp, #28]
 8005e6e:	4621      	mov	r1, r4
 8005e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e74:	3b30      	subs	r3, #48	; 0x30
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d94e      	bls.n	8005f18 <_vfiprintf_r+0x1c4>
 8005e7a:	b1b0      	cbz	r0, 8005eaa <_vfiprintf_r+0x156>
 8005e7c:	9207      	str	r2, [sp, #28]
 8005e7e:	e014      	b.n	8005eaa <_vfiprintf_r+0x156>
 8005e80:	eba0 0308 	sub.w	r3, r0, r8
 8005e84:	fa09 f303 	lsl.w	r3, r9, r3
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	46a2      	mov	sl, r4
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	e7d2      	b.n	8005e36 <_vfiprintf_r+0xe2>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	1d19      	adds	r1, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	9103      	str	r1, [sp, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfbb      	ittet	lt
 8005e9c:	425b      	neglt	r3, r3
 8005e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea2:	9307      	strge	r3, [sp, #28]
 8005ea4:	9307      	strlt	r3, [sp, #28]
 8005ea6:	bfb8      	it	lt
 8005ea8:	9204      	strlt	r2, [sp, #16]
 8005eaa:	7823      	ldrb	r3, [r4, #0]
 8005eac:	2b2e      	cmp	r3, #46	; 0x2e
 8005eae:	d10c      	bne.n	8005eca <_vfiprintf_r+0x176>
 8005eb0:	7863      	ldrb	r3, [r4, #1]
 8005eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb4:	d135      	bne.n	8005f22 <_vfiprintf_r+0x1ce>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	3402      	adds	r4, #2
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	9203      	str	r2, [sp, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfb8      	it	lt
 8005ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ec8:	9305      	str	r3, [sp, #20]
 8005eca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005fa4 <_vfiprintf_r+0x250>
 8005ece:	2203      	movs	r2, #3
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	7821      	ldrb	r1, [r4, #0]
 8005ed4:	f000 faf6 	bl	80064c4 <memchr>
 8005ed8:	b140      	cbz	r0, 8005eec <_vfiprintf_r+0x198>
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	eba0 000a 	sub.w	r0, r0, sl
 8005ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	3401      	adds	r4, #1
 8005ee8:	4303      	orrs	r3, r0
 8005eea:	9304      	str	r3, [sp, #16]
 8005eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef0:	2206      	movs	r2, #6
 8005ef2:	482d      	ldr	r0, [pc, #180]	; (8005fa8 <_vfiprintf_r+0x254>)
 8005ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ef8:	f000 fae4 	bl	80064c4 <memchr>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d03f      	beq.n	8005f80 <_vfiprintf_r+0x22c>
 8005f00:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <_vfiprintf_r+0x258>)
 8005f02:	bb1b      	cbnz	r3, 8005f4c <_vfiprintf_r+0x1f8>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	3307      	adds	r3, #7
 8005f08:	f023 0307 	bic.w	r3, r3, #7
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	9303      	str	r3, [sp, #12]
 8005f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f12:	443b      	add	r3, r7
 8005f14:	9309      	str	r3, [sp, #36]	; 0x24
 8005f16:	e767      	b.n	8005de8 <_vfiprintf_r+0x94>
 8005f18:	460c      	mov	r4, r1
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f20:	e7a5      	b.n	8005e6e <_vfiprintf_r+0x11a>
 8005f22:	2300      	movs	r3, #0
 8005f24:	f04f 0c0a 	mov.w	ip, #10
 8005f28:	4619      	mov	r1, r3
 8005f2a:	3401      	adds	r4, #1
 8005f2c:	9305      	str	r3, [sp, #20]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f34:	3a30      	subs	r2, #48	; 0x30
 8005f36:	2a09      	cmp	r2, #9
 8005f38:	d903      	bls.n	8005f42 <_vfiprintf_r+0x1ee>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0c5      	beq.n	8005eca <_vfiprintf_r+0x176>
 8005f3e:	9105      	str	r1, [sp, #20]
 8005f40:	e7c3      	b.n	8005eca <_vfiprintf_r+0x176>
 8005f42:	4604      	mov	r4, r0
 8005f44:	2301      	movs	r3, #1
 8005f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4a:	e7f0      	b.n	8005f2e <_vfiprintf_r+0x1da>
 8005f4c:	ab03      	add	r3, sp, #12
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <_vfiprintf_r+0x25c>)
 8005f56:	a904      	add	r1, sp, #16
 8005f58:	f3af 8000 	nop.w
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	1c78      	adds	r0, r7, #1
 8005f60:	d1d6      	bne.n	8005f10 <_vfiprintf_r+0x1bc>
 8005f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f64:	07d9      	lsls	r1, r3, #31
 8005f66:	d405      	bmi.n	8005f74 <_vfiprintf_r+0x220>
 8005f68:	89ab      	ldrh	r3, [r5, #12]
 8005f6a:	059a      	lsls	r2, r3, #22
 8005f6c:	d402      	bmi.n	8005f74 <_vfiprintf_r+0x220>
 8005f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f70:	f7ff fc29 	bl	80057c6 <__retarget_lock_release_recursive>
 8005f74:	89ab      	ldrh	r3, [r5, #12]
 8005f76:	065b      	lsls	r3, r3, #25
 8005f78:	f53f af12 	bmi.w	8005da0 <_vfiprintf_r+0x4c>
 8005f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f7e:	e711      	b.n	8005da4 <_vfiprintf_r+0x50>
 8005f80:	ab03      	add	r3, sp, #12
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	462a      	mov	r2, r5
 8005f86:	4630      	mov	r0, r6
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_vfiprintf_r+0x25c>)
 8005f8a:	a904      	add	r1, sp, #16
 8005f8c:	f000 f882 	bl	8006094 <_printf_i>
 8005f90:	e7e4      	b.n	8005f5c <_vfiprintf_r+0x208>
 8005f92:	bf00      	nop
 8005f94:	08006be8 	.word	0x08006be8
 8005f98:	08006c08 	.word	0x08006c08
 8005f9c:	08006bc8 	.word	0x08006bc8
 8005fa0:	08006c28 	.word	0x08006c28
 8005fa4:	08006c2e 	.word	0x08006c2e
 8005fa8:	08006c32 	.word	0x08006c32
 8005fac:	00000000 	.word	0x00000000
 8005fb0:	08005d2f 	.word	0x08005d2f

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4616      	mov	r6, r2
 8005fba:	4699      	mov	r9, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	bfb8      	it	lt
 8005fc6:	4613      	movlt	r3, r2
 8005fc8:	6033      	str	r3, [r6, #0]
 8005fca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fce:	460c      	mov	r4, r1
 8005fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd4:	b10a      	cbz	r2, 8005fda <_printf_common+0x26>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	6833      	ldrmi	r3, [r6, #0]
 8005fe2:	3302      	addmi	r3, #2
 8005fe4:	6033      	strmi	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	f015 0506 	ands.w	r5, r5, #6
 8005fec:	d106      	bne.n	8005ffc <_printf_common+0x48>
 8005fee:	f104 0a19 	add.w	sl, r4, #25
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dc28      	bgt.n	800604e <_printf_common+0x9a>
 8005ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006000:	1e13      	subs	r3, r2, #0
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	bf18      	it	ne
 8006006:	2301      	movne	r3, #1
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d42d      	bmi.n	8006068 <_printf_common+0xb4>
 800600c:	4649      	mov	r1, r9
 800600e:	4638      	mov	r0, r7
 8006010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006014:	47c0      	blx	r8
 8006016:	3001      	adds	r0, #1
 8006018:	d020      	beq.n	800605c <_printf_common+0xa8>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	68e5      	ldr	r5, [r4, #12]
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf18      	it	ne
 8006026:	2500      	movne	r5, #0
 8006028:	6832      	ldr	r2, [r6, #0]
 800602a:	f04f 0600 	mov.w	r6, #0
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	bf08      	it	eq
 8006032:	1aad      	subeq	r5, r5, r2
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	bf08      	it	eq
 8006038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800603c:	4293      	cmp	r3, r2
 800603e:	bfc4      	itt	gt
 8006040:	1a9b      	subgt	r3, r3, r2
 8006042:	18ed      	addgt	r5, r5, r3
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xcc>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xac>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4649      	mov	r1, r9
 8006054:	4638      	mov	r0, r7
 8006056:	47c0      	blx	r8
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xb0>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c4      	b.n	8005ff2 <_printf_common+0x3e>
 8006068:	2030      	movs	r0, #48	; 0x30
 800606a:	18e1      	adds	r1, r4, r3
 800606c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006076:	4422      	add	r2, r4
 8006078:	3302      	adds	r3, #2
 800607a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800607e:	e7c5      	b.n	800600c <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4649      	mov	r1, r9
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa8>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x92>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	4691      	mov	r9, r2
 800609c:	2f78      	cmp	r7, #120	; 0x78
 800609e:	4680      	mov	r8, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	469a      	mov	sl, r3
 80060a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	; 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d9 	beq.w	8006268 <_printf_i+0x1d4>
 80060b6:	2f58      	cmp	r7, #88	; 0x58
 80060b8:	f000 80a4 	beq.w	8006204 <_printf_i+0x170>
 80060bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	; (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	0800624f 	.word	0x0800624f
 8006104:	08006171 	.word	0x08006171
 8006108:	08006231 	.word	0x08006231
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	08006271 	.word	0x08006271
 8006118:	080060bd 	.word	0x080060bd
 800611c:	08006171 	.word	0x08006171
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006239 	.word	0x08006239
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	602a      	str	r2, [r5, #0]
 8006134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e0a4      	b.n	800628a <_printf_i+0x1f6>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	6829      	ldr	r1, [r5, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	f101 0304 	add.w	r3, r1, #4
 800614a:	d50a      	bpl.n	8006162 <_printf_i+0xce>
 800614c:	680e      	ldr	r6, [r1, #0]
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	2e00      	cmp	r6, #0
 8006152:	da03      	bge.n	800615c <_printf_i+0xc8>
 8006154:	232d      	movs	r3, #45	; 0x2d
 8006156:	4276      	negs	r6, r6
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615c:	230a      	movs	r3, #10
 800615e:	485e      	ldr	r0, [pc, #376]	; (80062d8 <_printf_i+0x244>)
 8006160:	e019      	b.n	8006196 <_printf_i+0x102>
 8006162:	680e      	ldr	r6, [r1, #0]
 8006164:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006168:	602b      	str	r3, [r5, #0]
 800616a:	bf18      	it	ne
 800616c:	b236      	sxthne	r6, r6
 800616e:	e7ef      	b.n	8006150 <_printf_i+0xbc>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	6029      	str	r1, [r5, #0]
 8006178:	0601      	lsls	r1, r0, #24
 800617a:	d501      	bpl.n	8006180 <_printf_i+0xec>
 800617c:	681e      	ldr	r6, [r3, #0]
 800617e:	e002      	b.n	8006186 <_printf_i+0xf2>
 8006180:	0646      	lsls	r6, r0, #25
 8006182:	d5fb      	bpl.n	800617c <_printf_i+0xe8>
 8006184:	881e      	ldrh	r6, [r3, #0]
 8006186:	2f6f      	cmp	r7, #111	; 0x6f
 8006188:	bf0c      	ite	eq
 800618a:	2308      	moveq	r3, #8
 800618c:	230a      	movne	r3, #10
 800618e:	4852      	ldr	r0, [pc, #328]	; (80062d8 <_printf_i+0x244>)
 8006190:	2100      	movs	r1, #0
 8006192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006196:	6865      	ldr	r5, [r4, #4]
 8006198:	2d00      	cmp	r5, #0
 800619a:	bfa8      	it	ge
 800619c:	6821      	ldrge	r1, [r4, #0]
 800619e:	60a5      	str	r5, [r4, #8]
 80061a0:	bfa4      	itt	ge
 80061a2:	f021 0104 	bicge.w	r1, r1, #4
 80061a6:	6021      	strge	r1, [r4, #0]
 80061a8:	b90e      	cbnz	r6, 80061ae <_printf_i+0x11a>
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	d04d      	beq.n	800624a <_printf_i+0x1b6>
 80061ae:	4615      	mov	r5, r2
 80061b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80061b4:	fb03 6711 	mls	r7, r3, r1, r6
 80061b8:	5dc7      	ldrb	r7, [r0, r7]
 80061ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061be:	4637      	mov	r7, r6
 80061c0:	42bb      	cmp	r3, r7
 80061c2:	460e      	mov	r6, r1
 80061c4:	d9f4      	bls.n	80061b0 <_printf_i+0x11c>
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d10b      	bne.n	80061e2 <_printf_i+0x14e>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	07de      	lsls	r6, r3, #31
 80061ce:	d508      	bpl.n	80061e2 <_printf_i+0x14e>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	6861      	ldr	r1, [r4, #4]
 80061d4:	4299      	cmp	r1, r3
 80061d6:	bfde      	ittt	le
 80061d8:	2330      	movle	r3, #48	; 0x30
 80061da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061e2:	1b52      	subs	r2, r2, r5
 80061e4:	6122      	str	r2, [r4, #16]
 80061e6:	464b      	mov	r3, r9
 80061e8:	4621      	mov	r1, r4
 80061ea:	4640      	mov	r0, r8
 80061ec:	f8cd a000 	str.w	sl, [sp]
 80061f0:	aa03      	add	r2, sp, #12
 80061f2:	f7ff fedf 	bl	8005fb4 <_printf_common>
 80061f6:	3001      	adds	r0, #1
 80061f8:	d14c      	bne.n	8006294 <_printf_i+0x200>
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	b004      	add	sp, #16
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006204:	4834      	ldr	r0, [pc, #208]	; (80062d8 <_printf_i+0x244>)
 8006206:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800620a:	6829      	ldr	r1, [r5, #0]
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006212:	6029      	str	r1, [r5, #0]
 8006214:	061d      	lsls	r5, r3, #24
 8006216:	d514      	bpl.n	8006242 <_printf_i+0x1ae>
 8006218:	07df      	lsls	r7, r3, #31
 800621a:	bf44      	itt	mi
 800621c:	f043 0320 	orrmi.w	r3, r3, #32
 8006220:	6023      	strmi	r3, [r4, #0]
 8006222:	b91e      	cbnz	r6, 800622c <_printf_i+0x198>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	2310      	movs	r3, #16
 800622e:	e7af      	b.n	8006190 <_printf_i+0xfc>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	f043 0320 	orr.w	r3, r3, #32
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	2378      	movs	r3, #120	; 0x78
 800623a:	4828      	ldr	r0, [pc, #160]	; (80062dc <_printf_i+0x248>)
 800623c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006240:	e7e3      	b.n	800620a <_printf_i+0x176>
 8006242:	0659      	lsls	r1, r3, #25
 8006244:	bf48      	it	mi
 8006246:	b2b6      	uxthmi	r6, r6
 8006248:	e7e6      	b.n	8006218 <_printf_i+0x184>
 800624a:	4615      	mov	r5, r2
 800624c:	e7bb      	b.n	80061c6 <_printf_i+0x132>
 800624e:	682b      	ldr	r3, [r5, #0]
 8006250:	6826      	ldr	r6, [r4, #0]
 8006252:	1d18      	adds	r0, r3, #4
 8006254:	6961      	ldr	r1, [r4, #20]
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	0635      	lsls	r5, r6, #24
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	d501      	bpl.n	8006262 <_printf_i+0x1ce>
 800625e:	6019      	str	r1, [r3, #0]
 8006260:	e002      	b.n	8006268 <_printf_i+0x1d4>
 8006262:	0670      	lsls	r0, r6, #25
 8006264:	d5fb      	bpl.n	800625e <_printf_i+0x1ca>
 8006266:	8019      	strh	r1, [r3, #0]
 8006268:	2300      	movs	r3, #0
 800626a:	4615      	mov	r5, r2
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	e7ba      	b.n	80061e6 <_printf_i+0x152>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	2100      	movs	r1, #0
 8006274:	1d1a      	adds	r2, r3, #4
 8006276:	602a      	str	r2, [r5, #0]
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	6862      	ldr	r2, [r4, #4]
 800627c:	4628      	mov	r0, r5
 800627e:	f000 f921 	bl	80064c4 <memchr>
 8006282:	b108      	cbz	r0, 8006288 <_printf_i+0x1f4>
 8006284:	1b40      	subs	r0, r0, r5
 8006286:	6060      	str	r0, [r4, #4]
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	2300      	movs	r3, #0
 800628e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006292:	e7a8      	b.n	80061e6 <_printf_i+0x152>
 8006294:	462a      	mov	r2, r5
 8006296:	4649      	mov	r1, r9
 8006298:	4640      	mov	r0, r8
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	47d0      	blx	sl
 800629e:	3001      	adds	r0, #1
 80062a0:	d0ab      	beq.n	80061fa <_printf_i+0x166>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	079b      	lsls	r3, r3, #30
 80062a6:	d413      	bmi.n	80062d0 <_printf_i+0x23c>
 80062a8:	68e0      	ldr	r0, [r4, #12]
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	4298      	cmp	r0, r3
 80062ae:	bfb8      	it	lt
 80062b0:	4618      	movlt	r0, r3
 80062b2:	e7a4      	b.n	80061fe <_printf_i+0x16a>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4632      	mov	r2, r6
 80062b8:	4649      	mov	r1, r9
 80062ba:	4640      	mov	r0, r8
 80062bc:	47d0      	blx	sl
 80062be:	3001      	adds	r0, #1
 80062c0:	d09b      	beq.n	80061fa <_printf_i+0x166>
 80062c2:	3501      	adds	r5, #1
 80062c4:	68e3      	ldr	r3, [r4, #12]
 80062c6:	9903      	ldr	r1, [sp, #12]
 80062c8:	1a5b      	subs	r3, r3, r1
 80062ca:	42ab      	cmp	r3, r5
 80062cc:	dcf2      	bgt.n	80062b4 <_printf_i+0x220>
 80062ce:	e7eb      	b.n	80062a8 <_printf_i+0x214>
 80062d0:	2500      	movs	r5, #0
 80062d2:	f104 0619 	add.w	r6, r4, #25
 80062d6:	e7f5      	b.n	80062c4 <_printf_i+0x230>
 80062d8:	08006c39 	.word	0x08006c39
 80062dc:	08006c4a 	.word	0x08006c4a

080062e0 <_putc_r>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	460d      	mov	r5, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	4606      	mov	r6, r0
 80062e8:	b118      	cbz	r0, 80062f2 <_putc_r+0x12>
 80062ea:	6983      	ldr	r3, [r0, #24]
 80062ec:	b90b      	cbnz	r3, 80062f2 <_putc_r+0x12>
 80062ee:	f7ff f9cb 	bl	8005688 <__sinit>
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <_putc_r+0x84>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	d124      	bne.n	8006342 <_putc_r+0x62>
 80062f8:	6874      	ldr	r4, [r6, #4]
 80062fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062fc:	07d8      	lsls	r0, r3, #31
 80062fe:	d405      	bmi.n	800630c <_putc_r+0x2c>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	0599      	lsls	r1, r3, #22
 8006304:	d402      	bmi.n	800630c <_putc_r+0x2c>
 8006306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006308:	f7ff fa5c 	bl	80057c4 <__retarget_lock_acquire_recursive>
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	3b01      	subs	r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	60a3      	str	r3, [r4, #8]
 8006314:	da05      	bge.n	8006322 <_putc_r+0x42>
 8006316:	69a2      	ldr	r2, [r4, #24]
 8006318:	4293      	cmp	r3, r2
 800631a:	db1c      	blt.n	8006356 <_putc_r+0x76>
 800631c:	b2eb      	uxtb	r3, r5
 800631e:	2b0a      	cmp	r3, #10
 8006320:	d019      	beq.n	8006356 <_putc_r+0x76>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	701d      	strb	r5, [r3, #0]
 800632a:	b2ed      	uxtb	r5, r5
 800632c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800632e:	07da      	lsls	r2, r3, #31
 8006330:	d405      	bmi.n	800633e <_putc_r+0x5e>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	059b      	lsls	r3, r3, #22
 8006336:	d402      	bmi.n	800633e <_putc_r+0x5e>
 8006338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633a:	f7ff fa44 	bl	80057c6 <__retarget_lock_release_recursive>
 800633e:	4628      	mov	r0, r5
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <_putc_r+0x88>)
 8006344:	429c      	cmp	r4, r3
 8006346:	d101      	bne.n	800634c <_putc_r+0x6c>
 8006348:	68b4      	ldr	r4, [r6, #8]
 800634a:	e7d6      	b.n	80062fa <_putc_r+0x1a>
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <_putc_r+0x8c>)
 800634e:	429c      	cmp	r4, r3
 8006350:	bf08      	it	eq
 8006352:	68f4      	ldreq	r4, [r6, #12]
 8006354:	e7d1      	b.n	80062fa <_putc_r+0x1a>
 8006356:	4629      	mov	r1, r5
 8006358:	4622      	mov	r2, r4
 800635a:	4630      	mov	r0, r6
 800635c:	f7fe ffbe 	bl	80052dc <__swbuf_r>
 8006360:	4605      	mov	r5, r0
 8006362:	e7e3      	b.n	800632c <_putc_r+0x4c>
 8006364:	08006be8 	.word	0x08006be8
 8006368:	08006c08 	.word	0x08006c08
 800636c:	08006bc8 	.word	0x08006bc8

08006370 <_sbrk_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	2300      	movs	r3, #0
 8006374:	4d05      	ldr	r5, [pc, #20]	; (800638c <_sbrk_r+0x1c>)
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fc fbea 	bl	8002b54 <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_sbrk_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_sbrk_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20002dfc 	.word	0x20002dfc

08006390 <__sread>:
 8006390:	b510      	push	{r4, lr}
 8006392:	460c      	mov	r4, r1
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	f000 f8f8 	bl	800658c <_read_r>
 800639c:	2800      	cmp	r0, #0
 800639e:	bfab      	itete	ge
 80063a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063a2:	89a3      	ldrhlt	r3, [r4, #12]
 80063a4:	181b      	addge	r3, r3, r0
 80063a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063aa:	bfac      	ite	ge
 80063ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ae:	81a3      	strhlt	r3, [r4, #12]
 80063b0:	bd10      	pop	{r4, pc}

080063b2 <__swrite>:
 80063b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b6:	461f      	mov	r7, r3
 80063b8:	898b      	ldrh	r3, [r1, #12]
 80063ba:	4605      	mov	r5, r0
 80063bc:	05db      	lsls	r3, r3, #23
 80063be:	460c      	mov	r4, r1
 80063c0:	4616      	mov	r6, r2
 80063c2:	d505      	bpl.n	80063d0 <__swrite+0x1e>
 80063c4:	2302      	movs	r3, #2
 80063c6:	2200      	movs	r2, #0
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	f000 f868 	bl	80064a0 <_lseek_r>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	4632      	mov	r2, r6
 80063d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	4628      	mov	r0, r5
 80063dc:	463b      	mov	r3, r7
 80063de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	f000 b817 	b.w	8006418 <_write_r>

080063ea <__sseek>:
 80063ea:	b510      	push	{r4, lr}
 80063ec:	460c      	mov	r4, r1
 80063ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f2:	f000 f855 	bl	80064a0 <_lseek_r>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	bf15      	itete	ne
 80063fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006406:	81a3      	strheq	r3, [r4, #12]
 8006408:	bf18      	it	ne
 800640a:	81a3      	strhne	r3, [r4, #12]
 800640c:	bd10      	pop	{r4, pc}

0800640e <__sclose>:
 800640e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006412:	f000 b813 	b.w	800643c <_close_r>
	...

08006418 <_write_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	2200      	movs	r2, #0
 8006422:	4d05      	ldr	r5, [pc, #20]	; (8006438 <_write_r+0x20>)
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f7fc fb47 	bl	8002aba <_write>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_write_r+0x1e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_write_r+0x1e>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20002dfc 	.word	0x20002dfc

0800643c <_close_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	2300      	movs	r3, #0
 8006440:	4d05      	ldr	r5, [pc, #20]	; (8006458 <_close_r+0x1c>)
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fc fb53 	bl	8002af2 <_close>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_close_r+0x1a>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_close_r+0x1a>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	20002dfc 	.word	0x20002dfc

0800645c <_fstat_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4d06      	ldr	r5, [pc, #24]	; (800647c <_fstat_r+0x20>)
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	f7fc fb4d 	bl	8002b08 <_fstat>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	d102      	bne.n	8006478 <_fstat_r+0x1c>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	b103      	cbz	r3, 8006478 <_fstat_r+0x1c>
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	bd38      	pop	{r3, r4, r5, pc}
 800647a:	bf00      	nop
 800647c:	20002dfc 	.word	0x20002dfc

08006480 <_isatty_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	2300      	movs	r3, #0
 8006484:	4d05      	ldr	r5, [pc, #20]	; (800649c <_isatty_r+0x1c>)
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fc fb4b 	bl	8002b26 <_isatty>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_isatty_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_isatty_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20002dfc 	.word	0x20002dfc

080064a0 <_lseek_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	4d05      	ldr	r5, [pc, #20]	; (80064c0 <_lseek_r+0x20>)
 80064ac:	602a      	str	r2, [r5, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f7fc fb43 	bl	8002b3a <_lseek>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_lseek_r+0x1e>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_lseek_r+0x1e>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	20002dfc 	.word	0x20002dfc

080064c4 <memchr>:
 80064c4:	4603      	mov	r3, r0
 80064c6:	b510      	push	{r4, lr}
 80064c8:	b2c9      	uxtb	r1, r1
 80064ca:	4402      	add	r2, r0
 80064cc:	4293      	cmp	r3, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	d101      	bne.n	80064d6 <memchr+0x12>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e003      	b.n	80064de <memchr+0x1a>
 80064d6:	7804      	ldrb	r4, [r0, #0]
 80064d8:	3301      	adds	r3, #1
 80064da:	428c      	cmp	r4, r1
 80064dc:	d1f6      	bne.n	80064cc <memchr+0x8>
 80064de:	bd10      	pop	{r4, pc}

080064e0 <memmove>:
 80064e0:	4288      	cmp	r0, r1
 80064e2:	b510      	push	{r4, lr}
 80064e4:	eb01 0402 	add.w	r4, r1, r2
 80064e8:	d902      	bls.n	80064f0 <memmove+0x10>
 80064ea:	4284      	cmp	r4, r0
 80064ec:	4623      	mov	r3, r4
 80064ee:	d807      	bhi.n	8006500 <memmove+0x20>
 80064f0:	1e43      	subs	r3, r0, #1
 80064f2:	42a1      	cmp	r1, r4
 80064f4:	d008      	beq.n	8006508 <memmove+0x28>
 80064f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064fe:	e7f8      	b.n	80064f2 <memmove+0x12>
 8006500:	4601      	mov	r1, r0
 8006502:	4402      	add	r2, r0
 8006504:	428a      	cmp	r2, r1
 8006506:	d100      	bne.n	800650a <memmove+0x2a>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800650e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006512:	e7f7      	b.n	8006504 <memmove+0x24>

08006514 <__malloc_lock>:
 8006514:	4801      	ldr	r0, [pc, #4]	; (800651c <__malloc_lock+0x8>)
 8006516:	f7ff b955 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 800651a:	bf00      	nop
 800651c:	20002df0 	.word	0x20002df0

08006520 <__malloc_unlock>:
 8006520:	4801      	ldr	r0, [pc, #4]	; (8006528 <__malloc_unlock+0x8>)
 8006522:	f7ff b950 	b.w	80057c6 <__retarget_lock_release_recursive>
 8006526:	bf00      	nop
 8006528:	20002df0 	.word	0x20002df0

0800652c <_realloc_r>:
 800652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	4680      	mov	r8, r0
 8006532:	4614      	mov	r4, r2
 8006534:	460e      	mov	r6, r1
 8006536:	b921      	cbnz	r1, 8006542 <_realloc_r+0x16>
 8006538:	4611      	mov	r1, r2
 800653a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	f7ff ba11 	b.w	8005964 <_malloc_r>
 8006542:	b92a      	cbnz	r2, 8006550 <_realloc_r+0x24>
 8006544:	f7ff f9a6 	bl	8005894 <_free_r>
 8006548:	4625      	mov	r5, r4
 800654a:	4628      	mov	r0, r5
 800654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006550:	f000 f82e 	bl	80065b0 <_malloc_usable_size_r>
 8006554:	4284      	cmp	r4, r0
 8006556:	4607      	mov	r7, r0
 8006558:	d802      	bhi.n	8006560 <_realloc_r+0x34>
 800655a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800655e:	d812      	bhi.n	8006586 <_realloc_r+0x5a>
 8006560:	4621      	mov	r1, r4
 8006562:	4640      	mov	r0, r8
 8006564:	f7ff f9fe 	bl	8005964 <_malloc_r>
 8006568:	4605      	mov	r5, r0
 800656a:	2800      	cmp	r0, #0
 800656c:	d0ed      	beq.n	800654a <_realloc_r+0x1e>
 800656e:	42bc      	cmp	r4, r7
 8006570:	4622      	mov	r2, r4
 8006572:	4631      	mov	r1, r6
 8006574:	bf28      	it	cs
 8006576:	463a      	movcs	r2, r7
 8006578:	f7fe fdd8 	bl	800512c <memcpy>
 800657c:	4631      	mov	r1, r6
 800657e:	4640      	mov	r0, r8
 8006580:	f7ff f988 	bl	8005894 <_free_r>
 8006584:	e7e1      	b.n	800654a <_realloc_r+0x1e>
 8006586:	4635      	mov	r5, r6
 8006588:	e7df      	b.n	800654a <_realloc_r+0x1e>
	...

0800658c <_read_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	2200      	movs	r2, #0
 8006596:	4d05      	ldr	r5, [pc, #20]	; (80065ac <_read_r+0x20>)
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fc fa70 	bl	8002a80 <_read>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_read_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_read_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20002dfc 	.word	0x20002dfc

080065b0 <_malloc_usable_size_r>:
 80065b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b4:	1f18      	subs	r0, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfbc      	itt	lt
 80065ba:	580b      	ldrlt	r3, [r1, r0]
 80065bc:	18c0      	addlt	r0, r0, r3
 80065be:	4770      	bx	lr

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
