
duan_printer_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e00  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005204  08005204  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005204  08005204  00006204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800520c  0800520c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800520c  0800520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005210  08005210  00006210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005214  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004464  20000068  0800527c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044cc  0800527c  000074cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ace9  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002299  00000000  00000000  00011d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00014018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074d  00000000  00000000  000149b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e60f  00000000  00000000  00015105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf91  00000000  00000000  00033714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2604  00000000  00000000  0003f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000f1cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  000f4b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000068 	.word	0x20000068
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08004f6c 	.word	0x08004f6c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000006c 	.word	0x2000006c
 80001c0:	08004f6c 	.word	0x08004f6c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a2e      	ldr	r2, [pc, #184]	@ (8000578 <GetSector+0xc8>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d806      	bhi.n	80004d2 <GetSector+0x22>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80004ca:	d302      	bcc.n	80004d2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	e04b      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a29      	ldr	r2, [pc, #164]	@ (800057c <GetSector+0xcc>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d806      	bhi.n	80004e8 <GetSector+0x38>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a28      	ldr	r2, [pc, #160]	@ (8000580 <GetSector+0xd0>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d302      	bcc.n	80004e8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e040      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a26      	ldr	r2, [pc, #152]	@ (8000584 <GetSector+0xd4>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d806      	bhi.n	80004fe <GetSector+0x4e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a25      	ldr	r2, [pc, #148]	@ (8000588 <GetSector+0xd8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d302      	bcc.n	80004fe <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80004f8:	2302      	movs	r3, #2
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e035      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a22      	ldr	r2, [pc, #136]	@ (800058c <GetSector+0xdc>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d206      	bcs.n	8000514 <GetSector+0x64>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a21      	ldr	r2, [pc, #132]	@ (8000590 <GetSector+0xe0>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d302      	bcc.n	8000514 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800050e:	2303      	movs	r3, #3
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	e02a      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a1f      	ldr	r2, [pc, #124]	@ (8000594 <GetSector+0xe4>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d206      	bcs.n	800052a <GetSector+0x7a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a1b      	ldr	r2, [pc, #108]	@ (800058c <GetSector+0xdc>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d902      	bls.n	800052a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000524:	2304      	movs	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e01f      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a1a      	ldr	r2, [pc, #104]	@ (8000598 <GetSector+0xe8>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d206      	bcs.n	8000540 <GetSector+0x90>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <GetSector+0xe4>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d902      	bls.n	8000540 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800053a:	2305      	movs	r3, #5
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e014      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a16      	ldr	r2, [pc, #88]	@ (800059c <GetSector+0xec>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d206      	bcs.n	8000556 <GetSector+0xa6>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <GetSector+0xe8>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d902      	bls.n	8000556 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000550:	2306      	movs	r3, #6
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e009      	b.n	800056a <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a11      	ldr	r2, [pc, #68]	@ (80005a0 <GetSector+0xf0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d205      	bcs.n	800056a <GetSector+0xba>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <GetSector+0xec>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d901      	bls.n	800056a <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8000566:	2307      	movs	r3, #7
 8000568:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	08003ffe 	.word	0x08003ffe
 800057c:	08007ffe 	.word	0x08007ffe
 8000580:	08004000 	.word	0x08004000
 8000584:	0800bffe 	.word	0x0800bffe
 8000588:	08008000 	.word	0x08008000
 800058c:	0800ffff 	.word	0x0800ffff
 8000590:	0800c000 	.word	0x0800c000
 8000594:	0801ffff 	.word	0x0801ffff
 8000598:	0803ffff 	.word	0x0803ffff
 800059c:	0805ffff 	.word	0x0805ffff
 80005a0:	0807ffff 	.word	0x0807ffff

080005a4 <Flash_Erase_sector>:



void Flash_Erase_sector(uint32_t StartSectorAddress)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t SECTORError;
	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80005ac:	f001 fd78 	bl	80020a0 <HAL_FLASH_Unlock>
	  /* Erase the user Flash area*/
	   /* (xác định bởi FLASH_USER_START_ADDR và FLASH_USER_END_ADDR)*/

	  /* Get the number of sector to erase from 1st sector */

      uint32_t StartSector = GetSector(StartSectorAddress);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ff7d 	bl	80004b0 <GetSector>
 80005b6:	60f8      	str	r0, [r7, #12]
//	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
//	  uint32_t EndSector = GetSector(EndSectorAddress);


	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <Flash_Erase_sector+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80005be:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <Flash_Erase_sector+0x50>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <Flash_Erase_sector+0x50>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6093      	str	r3, [r2, #8]
//	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
	  EraseInitStruct.NbSectors     = 1;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <Flash_Erase_sector+0x50>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	4619      	mov	r1, r3
 80005d6:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <Flash_Erase_sector+0x50>)
 80005d8:	f001 fe34 	bl	8002244 <HAL_FLASHEx_Erase>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <Flash_Erase_sector+0x44>
	  {
//		  USBD_UsrLog("HAL_FLASH_GetError");
		  return HAL_FLASH_GetError ();
 80005e2:	f001 fd8f 	bl	8002104 <HAL_FLASH_GetError>
 80005e6:	e001      	b.n	80005ec <Flash_Erase_sector+0x48>
	  }

	  HAL_FLASH_Lock();
 80005e8:	f001 fd7c 	bl	80020e4 <HAL_FLASH_Lock>
}
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000084 	.word	0x20000084

080005f8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc (int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);
 8000600:	1d39      	adds	r1, r7, #4
 8000602:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000606:	2201      	movs	r2, #1
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <__io_putchar+0x20>)
 800060a:	f002 fdb7 	bl	800317c <HAL_UART_Transmit>

return ch;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000098 	.word	0x20000098

0800061c <PrintUart3Data>:
}
#endif

#if 1
void PrintUart3Data(uint8_t* data, uint16_t size)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
	for (int j = 0; j < size; j++)
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e142      	b.n	80008b4 <PrintUart3Data+0x298>
	{
		switch (data[j])
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b5f      	cmp	r3, #95	@ 0x5f
 8000638:	f000 80e4 	beq.w	8000804 <PrintUart3Data+0x1e8>
 800063c:	2b5f      	cmp	r3, #95	@ 0x5f
 800063e:	f300 812b 	bgt.w	8000898 <PrintUart3Data+0x27c>
 8000642:	2b5c      	cmp	r3, #92	@ 0x5c
 8000644:	d077      	beq.n	8000736 <PrintUart3Data+0x11a>
 8000646:	2b5c      	cmp	r3, #92	@ 0x5c
 8000648:	f300 8126 	bgt.w	8000898 <PrintUart3Data+0x27c>
 800064c:	2b3c      	cmp	r3, #60	@ 0x3c
 800064e:	d008      	beq.n	8000662 <PrintUart3Data+0x46>
 8000650:	2b3c      	cmp	r3, #60	@ 0x3c
 8000652:	f300 8121 	bgt.w	8000898 <PrintUart3Data+0x27c>
 8000656:	2b14      	cmp	r3, #20
 8000658:	d038      	beq.n	80006cc <PrintUart3Data+0xb0>
 800065a:	2b1c      	cmp	r3, #28
 800065c:	f000 80a0 	beq.w	80007a0 <PrintUart3Data+0x184>
            {
            	printf("(Read Data): _TM-T88III.\n");
            }
            break;
		default:
			break;
 8000660:	e11a      	b.n	8000898 <PrintUart3Data+0x27c>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d111      	bne.n	8000694 <PrintUart3Data+0x78>
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3302      	adds	r3, #2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10a      	bne.n	8000694 <PrintUart3Data+0x78>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3303      	adds	r3, #3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d103      	bne.n	8000694 <PrintUart3Data+0x78>
				printf("(Read Data): Mo nap may\n");
 800068c:	488f      	ldr	r0, [pc, #572]	@ (80008cc <PrintUart3Data+0x2b0>)
 800068e:	f003 fe65 	bl	800435c <puts>
			break;
 8000692:	e103      	b.n	800089c <PrintUart3Data+0x280>
			else if(data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f040 80fc 	bne.w	800089c <PrintUart3Data+0x280>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3302      	adds	r3, #2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	f040 80f4 	bne.w	800089c <PrintUart3Data+0x280>
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	f040 80ec 	bne.w	800089c <PrintUart3Data+0x280>
				printf("(Read Data): Mo nap may (PAPER OUT)\n");
 80006c4:	4882      	ldr	r0, [pc, #520]	@ (80008d0 <PrintUart3Data+0x2b4>)
 80006c6:	f003 fe49 	bl	800435c <puts>
			break;
 80006ca:	e0e7      	b.n	800089c <PrintUart3Data+0x280>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d111      	bne.n	80006fe <PrintUart3Data+0xe2>
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3302      	adds	r3, #2
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <PrintUart3Data+0xe2>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3303      	adds	r3, #3
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d103      	bne.n	80006fe <PrintUart3Data+0xe2>
				printf("(Read Data): Dong nap may\n");
 80006f6:	4877      	ldr	r0, [pc, #476]	@ (80008d4 <PrintUart3Data+0x2b8>)
 80006f8:	f003 fe30 	bl	800435c <puts>
			break;
 80006fc:	e0d0      	b.n	80008a0 <PrintUart3Data+0x284>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	f040 80c9 	bne.w	80008a0 <PrintUart3Data+0x284>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3302      	adds	r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	f040 80c1 	bne.w	80008a0 <PrintUart3Data+0x284>
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3303      	adds	r3, #3
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	f040 80b9 	bne.w	80008a0 <PrintUart3Data+0x284>
				printf("(Read Data): Dong nap may (PAPER OUT)\n");
 800072e:	486a      	ldr	r0, [pc, #424]	@ (80008d8 <PrintUart3Data+0x2bc>)
 8000730:	f003 fe14 	bl	800435c <puts>
			break;
 8000734:	e0b4      	b.n	80008a0 <PrintUart3Data+0x284>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d111      	bne.n	8000768 <PrintUart3Data+0x14c>
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3302      	adds	r3, #2
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10a      	bne.n	8000768 <PrintUart3Data+0x14c>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3303      	adds	r3, #3
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d103      	bne.n	8000768 <PrintUart3Data+0x14c>
				printf("(Read Data): FEED\n");
 8000760:	485e      	ldr	r0, [pc, #376]	@ (80008dc <PrintUart3Data+0x2c0>)
 8000762:	f003 fdfb 	bl	800435c <puts>
			break;
 8000766:	e09d      	b.n	80008a4 <PrintUart3Data+0x288>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	f040 8096 	bne.w	80008a4 <PrintUart3Data+0x288>
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3302      	adds	r3, #2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b03      	cmp	r3, #3
 8000784:	f040 808e 	bne.w	80008a4 <PrintUart3Data+0x288>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3303      	adds	r3, #3
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b0f      	cmp	r3, #15
 8000794:	f040 8086 	bne.w	80008a4 <PrintUart3Data+0x288>
				printf("(Read Data): FEED (PAPER OUT)\n");
 8000798:	4851      	ldr	r0, [pc, #324]	@ (80008e0 <PrintUart3Data+0x2c4>)
 800079a:	f003 fddf 	bl	800435c <puts>
			break;
 800079e:	e081      	b.n	80008a4 <PrintUart3Data+0x288>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d111      	bne.n	80007d2 <PrintUart3Data+0x1b6>
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3302      	adds	r3, #2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10a      	bne.n	80007d2 <PrintUart3Data+0x1b6>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3303      	adds	r3, #3
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d103      	bne.n	80007d2 <PrintUart3Data+0x1b6>
				printf("(Read Data): Turn off machine\n");
 80007ca:	4846      	ldr	r0, [pc, #280]	@ (80008e4 <PrintUart3Data+0x2c8>)
 80007cc:	f003 fdc6 	bl	800435c <puts>
			break;
 80007d0:	e06a      	b.n	80008a8 <PrintUart3Data+0x28c>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d163      	bne.n	80008a8 <PrintUart3Data+0x28c>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3302      	adds	r3, #2
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d15c      	bne.n	80008a8 <PrintUart3Data+0x28c>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3303      	adds	r3, #3
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d155      	bne.n	80008a8 <PrintUart3Data+0x28c>
				printf("(Read Data): Turn off machine (PAPER OUT)\n");
 80007fc:	483a      	ldr	r0, [pc, #232]	@ (80008e8 <PrintUart3Data+0x2cc>)
 80007fe:	f003 fdad 	bl	800435c <puts>
			break;
 8000802:	e051      	b.n	80008a8 <PrintUart3Data+0x28c>
            if (data[j+1] == 0x54 && data[j+2] == 0x4d && data[j+3] == 0x2d && data[j+4] == 0x54 &&
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b54      	cmp	r3, #84	@ 0x54
 8000810:	d14c      	bne.n	80008ac <PrintUart3Data+0x290>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3302      	adds	r3, #2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b4d      	cmp	r3, #77	@ 0x4d
 800081e:	d145      	bne.n	80008ac <PrintUart3Data+0x290>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3303      	adds	r3, #3
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b2d      	cmp	r3, #45	@ 0x2d
 800082c:	d13e      	bne.n	80008ac <PrintUart3Data+0x290>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3304      	adds	r3, #4
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b54      	cmp	r3, #84	@ 0x54
 800083a:	d137      	bne.n	80008ac <PrintUart3Data+0x290>
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3305      	adds	r3, #5
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
            if (data[j+1] == 0x54 && data[j+2] == 0x4d && data[j+3] == 0x2d && data[j+4] == 0x54 &&
 8000846:	2b38      	cmp	r3, #56	@ 0x38
 8000848:	d130      	bne.n	80008ac <PrintUart3Data+0x290>
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3306      	adds	r3, #6
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b38      	cmp	r3, #56	@ 0x38
 8000856:	d129      	bne.n	80008ac <PrintUart3Data+0x290>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3307      	adds	r3, #7
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b49      	cmp	r3, #73	@ 0x49
 8000864:	d122      	bne.n	80008ac <PrintUart3Data+0x290>
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3308      	adds	r3, #8
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b49      	cmp	r3, #73	@ 0x49
 8000872:	d11b      	bne.n	80008ac <PrintUart3Data+0x290>
                data[j+9] == 0x49 && data[j+10] == 0x00)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3309      	adds	r3, #9
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 800087e:	2b49      	cmp	r3, #73	@ 0x49
 8000880:	d114      	bne.n	80008ac <PrintUart3Data+0x290>
                data[j+9] == 0x49 && data[j+10] == 0x00)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	330a      	adds	r3, #10
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10d      	bne.n	80008ac <PrintUart3Data+0x290>
            	printf("(Read Data): _TM-T88III.\n");
 8000890:	4816      	ldr	r0, [pc, #88]	@ (80008ec <PrintUart3Data+0x2d0>)
 8000892:	f003 fd63 	bl	800435c <puts>
            break;
 8000896:	e009      	b.n	80008ac <PrintUart3Data+0x290>
			break;
 8000898:	bf00      	nop
 800089a:	e008      	b.n	80008ae <PrintUart3Data+0x292>
			break;
 800089c:	bf00      	nop
 800089e:	e006      	b.n	80008ae <PrintUart3Data+0x292>
			break;
 80008a0:	bf00      	nop
 80008a2:	e004      	b.n	80008ae <PrintUart3Data+0x292>
			break;
 80008a4:	bf00      	nop
 80008a6:	e002      	b.n	80008ae <PrintUart3Data+0x292>
			break;
 80008a8:	bf00      	nop
 80008aa:	e000      	b.n	80008ae <PrintUart3Data+0x292>
            break;
 80008ac:	bf00      	nop
	for (int j = 0; j < size; j++)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f6ff aeb8 	blt.w	800062e <PrintUart3Data+0x12>
		}
	}
	printf("\n");
 80008be:	200a      	movs	r0, #10
 80008c0:	f003 fcee 	bl	80042a0 <putchar>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	08004f84 	.word	0x08004f84
 80008d0:	08004f9c 	.word	0x08004f9c
 80008d4:	08004fc0 	.word	0x08004fc0
 80008d8:	08004fdc 	.word	0x08004fdc
 80008dc:	08005004 	.word	0x08005004
 80008e0:	08005018 	.word	0x08005018
 80008e4:	08005038 	.word	0x08005038
 80008e8:	08005058 	.word	0x08005058
 80008ec:	08005084 	.word	0x08005084

080008f0 <Handle_Uart>:
	}
}
#endif

void Handle_Uart()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	//test
	if(USER_RX_Buffer[0] == 't')
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <Handle_Uart+0x9c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b74      	cmp	r3, #116	@ 0x74
 80008fc:	d10c      	bne.n	8000918 <Handle_Uart+0x28>
	{
		USER_RX_Buffer[0]=0;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <Handle_Uart+0x9c>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
		printf("Xin Chao \n");
 8000904:	4822      	ldr	r0, [pc, #136]	@ (8000990 <Handle_Uart+0xa0>)
 8000906:	f003 fd29 	bl	800435c <puts>
		fflush(stdout); // Đảm bảo đầu ra ngay lập tức
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <Handle_Uart+0xa4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fbdd 	bl	80040d0 <fflush>

        uint32_t end_tick = HAL_GetTick();
        printf("Da xoa flash trong %lu ms\r\n", end_tick - start_tick);
        fflush(stdout); // Đảm bảo đầu ra ngay lập tức
    }
}
 8000916:	e034      	b.n	8000982 <Handle_Uart+0x92>
    else if (USER_RX_Buffer[0] == 'x')
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <Handle_Uart+0x9c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b78      	cmp	r3, #120	@ 0x78
 800091e:	d130      	bne.n	8000982 <Handle_Uart+0x92>
        USER_RX_Buffer[0] = 0;
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <Handle_Uart+0x9c>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
        printf("Bat dau xoa flash\n");
 8000926:	481c      	ldr	r0, [pc, #112]	@ (8000998 <Handle_Uart+0xa8>)
 8000928:	f003 fd18 	bl	800435c <puts>
        fflush(stdout); // Đảm bảo đầu ra ngay lập tức
 800092c:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <Handle_Uart+0xa4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fbcc 	bl	80040d0 <fflush>
        uint32_t start_tick = HAL_GetTick();
 8000938:	f000 ff22 	bl	8001780 <HAL_GetTick>
 800093c:	6078      	str	r0, [r7, #4]
        printf("Erasing sector 5\n");
 800093e:	4817      	ldr	r0, [pc, #92]	@ (800099c <Handle_Uart+0xac>)
 8000940:	f003 fd0c 	bl	800435c <puts>
        Flash_Erase_sector(FLASH_SECTOR_ADDRESS5);
 8000944:	4816      	ldr	r0, [pc, #88]	@ (80009a0 <Handle_Uart+0xb0>)
 8000946:	f7ff fe2d 	bl	80005a4 <Flash_Erase_sector>
        printf("Erasing sector 6\n");
 800094a:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <Handle_Uart+0xb4>)
 800094c:	f003 fd06 	bl	800435c <puts>
        Flash_Erase_sector(FLASH_SECTOR_ADDRESS6);
 8000950:	4815      	ldr	r0, [pc, #84]	@ (80009a8 <Handle_Uart+0xb8>)
 8000952:	f7ff fe27 	bl	80005a4 <Flash_Erase_sector>
        printf("Erasing sector 7\n");
 8000956:	4815      	ldr	r0, [pc, #84]	@ (80009ac <Handle_Uart+0xbc>)
 8000958:	f003 fd00 	bl	800435c <puts>
        Flash_Erase_sector(FLASH_SECTOR_ADDRESS7);
 800095c:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <Handle_Uart+0xc0>)
 800095e:	f7ff fe21 	bl	80005a4 <Flash_Erase_sector>
        uint32_t end_tick = HAL_GetTick();
 8000962:	f000 ff0d 	bl	8001780 <HAL_GetTick>
 8000966:	6038      	str	r0, [r7, #0]
        printf("Da xoa flash trong %lu ms\r\n", end_tick - start_tick);
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	4619      	mov	r1, r3
 8000970:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <Handle_Uart+0xc4>)
 8000972:	f003 fc83 	bl	800427c <iprintf>
        fflush(stdout); // Đảm bảo đầu ra ngay lập tức
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <Handle_Uart+0xa4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fba7 	bl	80040d0 <fflush>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200002f0 	.word	0x200002f0
 8000990:	080050a0 	.word	0x080050a0
 8000994:	20000018 	.word	0x20000018
 8000998:	080050ac 	.word	0x080050ac
 800099c:	080050c0 	.word	0x080050c0
 80009a0:	08020000 	.word	0x08020000
 80009a4:	080050d4 	.word	0x080050d4
 80009a8:	08040000 	.word	0x08040000
 80009ac:	080050e8 	.word	0x080050e8
 80009b0:	08060000 	.word	0x08060000
 80009b4:	080050fc 	.word	0x080050fc

080009b8 <xuly_command_ESP>:

void xuly_command_ESP()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	USER_RX_Buffer[0] = xulyUart.ui8_newinchar;
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <xuly_command_ESP+0x14>)
 80009be:	7dda      	ldrb	r2, [r3, #23]
 80009c0:	4b03      	ldr	r3, [pc, #12]	@ (80009d0 <xuly_command_ESP+0x18>)
 80009c2:	701a      	strb	r2, [r3, #0]
	Handle_Uart();
 80009c4:	f7ff ff94 	bl	80008f0 <Handle_Uart>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000304 	.word	0x20000304
 80009d0:	200002f0 	.word	0x200002f0

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b598      	push	{r3, r4, r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d8:	f000 fe6e 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009dc:	f000 f8a0 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f000 f99a 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e4:	f000 f960 	bl	8000ca8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 f90a 	bl	8000c00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 f932 	bl	8000c54 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80009f0:	f000 f8dc 	bl	8000bac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	483f      	ldr	r0, [pc, #252]	@ (8000af8 <main+0x124>)
 80009fa:	f001 fee9 	bl	80027d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN2_Pin, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	483d      	ldr	r0, [pc, #244]	@ (8000af8 <main+0x124>)
 8000a04:	f001 fee4 	bl	80027d0 <HAL_GPIO_WritePin>
//  char str[]="\nSTM205VGT6 hello";
//  HAL_UART_Transmit(&huart1, (uint8_t *)str, sizeof(str), 100);
//  HAL_UART_Transmit(&huart2, (uint8_t *)str, sizeof(str), 100);
//  HAL_UART_Transmit(&huart3, (uint8_t *)str, sizeof(str), 100);

  HAL_UART_Receive_IT(&huart1, xulyUart.ui8_RX_buf, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	493c      	ldr	r1, [pc, #240]	@ (8000afc <main+0x128>)
 8000a0c:	483c      	ldr	r0, [pc, #240]	@ (8000b00 <main+0x12c>)
 8000a0e:	f002 fc6d 	bl	80032ec <HAL_UART_Receive_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, xulyUart.ui8_rx2Data, BUFFER_SIZE);
 8000a12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a16:	493b      	ldr	r1, [pc, #236]	@ (8000b04 <main+0x130>)
 8000a18:	483b      	ldr	r0, [pc, #236]	@ (8000b08 <main+0x134>)
 8000a1a:	f002 fc8c 	bl	8003336 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, xulyUart.ui8_rx3Data, BUFFER_SIZE);
 8000a1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a22:	493a      	ldr	r1, [pc, #232]	@ (8000b0c <main+0x138>)
 8000a24:	483a      	ldr	r0, [pc, #232]	@ (8000b10 <main+0x13c>)
 8000a26:	f002 fc86 	bl	8003336 <HAL_UARTEx_ReceiveToIdle_IT>
////			HAL_UART_Transmit(&huart3, (uint8_t *) str3,sizeof(str3) , 10);
//
//			HAL_GPIO_TogglePin(GPIOD, LED_Pin);
//		}

      if (xulyUart.ui32_timer < HAL_GetTick()) {
 8000a2a:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <main+0x128>)
 8000a2c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000a30:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8000a32:	f000 fea5 	bl	8001780 <HAL_GetTick>
 8000a36:	4603      	mov	r3, r0
 8000a38:	429c      	cmp	r4, r3
 8000a3a:	d20e      	bcs.n	8000a5a <main+0x86>
          xulyUart.ui32_timer = HAL_GetTick() + 5000;
 8000a3c:	f000 fea0 	bl	8001780 <HAL_GetTick>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000a46:	3308      	adds	r3, #8
 8000a48:	4a2c      	ldr	r2, [pc, #176]	@ (8000afc <main+0x128>)
 8000a4a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8000a4e:	6253      	str	r3, [r2, #36]	@ 0x24
          HAL_GPIO_TogglePin(GPIOD, LED_Pin);
 8000a50:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a54:	482f      	ldr	r0, [pc, #188]	@ (8000b14 <main+0x140>)
 8000a56:	f001 fed3 	bl	8002800 <HAL_GPIO_TogglePin>
//		  HAL_UART_Transmit(&huart2, (uint8_t *) xulyUart.ui8_str,xulyUart.ui8_indexUart, 10);
////		  HAL_UART_Transmit(&huart3, (uint8_t *) xulyUart.ui8_str,xulyUart.ui8_indexUart, 10);
//		  xulyUart.ui8_newcmd =0;
//	  }
	  	  //nhan data tu uart 3 gui cho uart2
	  if(xulyUart.uart3_receivedData == 1 && xulyUart.uart2_processingData == 0)
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <main+0x128>)
 8000a5c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d11b      	bne.n	8000a9e <main+0xca>
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <main+0x128>)
 8000a68:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d115      	bne.n	8000a9e <main+0xca>
	  {
		  HAL_UART_Transmit_IT(&huart2, xulyUart.ui8_tx2Data, xulyUart.ui16_tx2Size);
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <main+0x128>)
 8000a74:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4926      	ldr	r1, [pc, #152]	@ (8000b18 <main+0x144>)
 8000a80:	4821      	ldr	r0, [pc, #132]	@ (8000b08 <main+0x134>)
 8000a82:	f002 fbfe 	bl	8003282 <HAL_UART_Transmit_IT>
		  xulyUart.uart2_processingData = 1;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <main+0x128>)
 8000a88:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2301      	movs	r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
		  xulyUart.uart3_receivedData = 0;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <main+0x128>)
 8000a94:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  }
	  //nhan data tu uart 2 gui cho uart3
	  if(xulyUart.uart2_receivedData == 1 && xulyUart.uart3_processingData == 0)
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <main+0x128>)
 8000aa0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d11b      	bne.n	8000ae2 <main+0x10e>
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <main+0x128>)
 8000aac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d115      	bne.n	8000ae2 <main+0x10e>
	  {
		  HAL_UART_Transmit_IT(&huart3, xulyUart.ui8_tx3Data, xulyUart.ui16_tx3Size);
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <main+0x128>)
 8000ab8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000abc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4916      	ldr	r1, [pc, #88]	@ (8000b1c <main+0x148>)
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <main+0x13c>)
 8000ac6:	f002 fbdc 	bl	8003282 <HAL_UART_Transmit_IT>
//		  HAL_UART_Transmit(&huart2, xulyUart.ui8_tx3Data,xulyUart.ui16_tx3Size, 100);
//		  save_data_to_flash(xulyUart.ui8_tx3Data, xulyUart.ui16_tx3Size);
		  xulyUart.uart3_processingData = 1;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <main+0x128>)
 8000acc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	6353      	str	r3, [r2, #52]	@ 0x34
		  xulyUart.uart2_receivedData = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <main+0x128>)
 8000ad8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000adc:	461a      	mov	r2, r3
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6393      	str	r3, [r2, #56]	@ 0x38
	  }

	  if(xulyUart.ui8_newpagkage == 1)
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <main+0x128>)
 8000ae4:	7e9b      	ldrb	r3, [r3, #26]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d19f      	bne.n	8000a2a <main+0x56>
	  {
//		  HAL_UART_Transmit(&huart2, (uint8_t *) xulyUart.ui8_str,xulyUart.ui8_indexUart, 100);
		  xulyUart.ui8_newpagkage = 0;
 8000aea:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <main+0x128>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	769a      	strb	r2, [r3, #26]
		  xuly_command_ESP();
 8000af0:	f7ff ff62 	bl	80009b8 <xuly_command_ESP>
      if (xulyUart.ui32_timer < HAL_GetTick()) {
 8000af4:	e799      	b.n	8000a2a <main+0x56>
 8000af6:	bf00      	nop
 8000af8:	40020800 	.word	0x40020800
 8000afc:	20000304 	.word	0x20000304
 8000b00:	20000098 	.word	0x20000098
 8000b04:	20000324 	.word	0x20000324
 8000b08:	200000e0 	.word	0x200000e0
 8000b0c:	20001324 	.word	0x20001324
 8000b10:	20000128 	.word	0x20000128
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	20002324 	.word	0x20002324
 8000b1c:	20003324 	.word	0x20003324

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b092      	sub	sp, #72	@ 0x48
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fcf4 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 20;
 8000b54:	2314      	movs	r3, #20
 8000b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b58:	23c0      	movs	r3, #192	@ 0xc0
 8000b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fe63 	bl	8002834 <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b74:	f000 fa9a 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2103      	movs	r1, #3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 f8a1 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ba0:	f000 fa84 	bl	80010ac <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3748      	adds	r7, #72	@ 0x48
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f002 fa7a 	bl	80030dc <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 fa5d 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000098 	.word	0x20000098
 8000bfc:	40011000 	.word	0x40011000

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f002 fa50 	bl	80030dc <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 fa33 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000e0 	.word	0x200000e0
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <MX_USART3_UART_Init+0x50>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c60:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_USART3_UART_Init+0x4c>)
 8000c8c:	f002 fa26 	bl	80030dc <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c96:	f000 fa09 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000128 	.word	0x20000128
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <MX_DMA_Init+0x6c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <MX_DMA_Init+0x6c>)
 8000cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <MX_DMA_Init+0x6c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	200c      	movs	r0, #12
 8000cd0:	f000 fe37 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cd4:	200c      	movs	r0, #12
 8000cd6:	f000 fe50 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200e      	movs	r0, #14
 8000ce0:	f000 fe2f 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce4:	200e      	movs	r0, #14
 8000ce6:	f000 fe48 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2010      	movs	r0, #16
 8000cf0:	f000 fe27 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cf4:	2010      	movs	r0, #16
 8000cf6:	f000 fe40 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2011      	movs	r0, #17
 8000d00:	f000 fe1f 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d04:	2011      	movs	r0, #17
 8000d06:	f000 fe38 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a37      	ldr	r2, [pc, #220]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b35      	ldr	r3, [pc, #212]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a30      	ldr	r2, [pc, #192]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a29      	ldr	r2, [pc, #164]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a22      	ldr	r2, [pc, #136]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b20      	ldr	r3, [pc, #128]	@ (8000e14 <MX_GPIO_Init+0xfc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2130      	movs	r1, #48	@ 0x30
 8000da2:	481d      	ldr	r0, [pc, #116]	@ (8000e18 <MX_GPIO_Init+0x100>)
 8000da4:	f001 fd14 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dae:	481b      	ldr	r0, [pc, #108]	@ (8000e1c <MX_GPIO_Init+0x104>)
 8000db0:	f001 fd0e 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 8000db4:	2310      	movs	r3, #16
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <MX_GPIO_Init+0x100>)
 8000dcc:	f001 fb62 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <MX_GPIO_Init+0x100>)
 8000de8:	f001 fb54 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_GPIO_Init+0x104>)
 8000e06:	f001 fb45 	bl	8002494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a24      	ldr	r2, [pc, #144]	@ (8000ec0 <HAL_UART_RxCpltCallback+0xa0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d142      	bne.n	8000eb8 <HAL_UART_RxCpltCallback+0x98>
	{
		/*xử lý nhận uart theo gói*/
		uint8_t inchar = xulyUart.ui8_RX_buf[0];
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	73fb      	strb	r3, [r7, #15]
		if (xulyUart.ui8_busy == 0)
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e3a:	7d9b      	ldrb	r3, [r3, #22]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d136      	bne.n	8000eae <HAL_UART_RxCpltCallback+0x8e>
		{
			if(inchar =='#')
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b23      	cmp	r3, #35	@ 0x23
 8000e44:	d105      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0x32>
			{
				xulyUart.ui8_RX = 1;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	761a      	strb	r2, [r3, #24]
				xulyUart.ui8_indexUart = 0;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	765a      	strb	r2, [r3, #25]
			}

			if(xulyUart.ui8_RX == 1)
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e54:	7e1b      	ldrb	r3, [r3, #24]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d123      	bne.n	8000ea2 <HAL_UART_RxCpltCallback+0x82>
			{
				xulyUart.ui8_str[xulyUart.ui8_indexUart] = inchar;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e5c:	7e5b      	ldrb	r3, [r3, #25]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e62:	4413      	add	r3, r2
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	709a      	strb	r2, [r3, #2]
				xulyUart.ui8_indexUart++;
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e6a:	7e5b      	ldrb	r3, [r3, #25]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e72:	765a      	strb	r2, [r3, #25]

				if(xulyUart.ui8_indexUart > MAX_BUFFER_CMD_ESP -1)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e76:	7e5b      	ldrb	r3, [r3, #25]
 8000e78:	2b13      	cmp	r3, #19
 8000e7a:	d905      	bls.n	8000e88 <HAL_UART_RxCpltCallback+0x68>
				{
					/*tràn buffer*/
					xulyUart.ui8_RX = 0;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
					xulyUart.ui8_indexUart = 0;
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
				}
				if(inchar == '$')
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b24      	cmp	r3, #36	@ 0x24
 8000e8c:	d10f      	bne.n	8000eae <HAL_UART_RxCpltCallback+0x8e>
				{
					xulyUart.ui8_newcmd = 1;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	76da      	strb	r2, [r3, #27]
					xulyUart.ui8_RX = 0;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	761a      	strb	r2, [r3, #24]
					xulyUart.ui8_busy = 1;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	759a      	strb	r2, [r3, #22]
 8000ea0:	e005      	b.n	8000eae <HAL_UART_RxCpltCallback+0x8e>
				}
			}
			else
			{
				xulyUart.ui8_newpagkage = 1;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	769a      	strb	r2, [r3, #26]
				xulyUart.ui8_newinchar = inchar;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	75d3      	strb	r3, [r2, #23]
			}
		}
		HAL_UART_Receive_IT(&huart1, xulyUart.ui8_RX_buf, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4904      	ldr	r1, [pc, #16]	@ (8000ec4 <HAL_UART_RxCpltCallback+0xa4>)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <HAL_UART_RxCpltCallback+0xa8>)
 8000eb4:	f002 fa1a 	bl	80032ec <HAL_UART_Receive_IT>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	20000304 	.word	0x20000304
 8000ec8:	20000098 	.word	0x20000098

08000ecc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a4b      	ldr	r2, [pc, #300]	@ (800100c <HAL_UARTEx_RxEventCallback+0x140>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d144      	bne.n	8000f6c <HAL_UARTEx_RxEventCallback+0xa0>
	{
//		xulyUart.ui16_countIT2++;
		xulyUart.ui16_data2Size += Size;
 8000ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000ee4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ee8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b47      	ldr	r3, [pc, #284]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000ef4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ef8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

		xulyUart.ui16_tx3Size = Size;
 8000efc:	4b44      	ldr	r3, [pc, #272]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000efe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f02:	461a      	mov	r2, r3
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	f8a2 3042 	strh.w	r3, [r2, #66]	@ 0x42

		if(xulyUart.ui16_tx3Size < 1024)
 8000f0a:	4b41      	ldr	r3, [pc, #260]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f0c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f10:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f18:	d20b      	bcs.n	8000f32 <HAL_UARTEx_RxEventCallback+0x66>
		{
			xulyUart.ui16_countIT2++;
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f1c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f24:	3301      	adds	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f2a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		}
		memcpy(xulyUart.ui8_tx3Data, xulyUart.ui8_rx2Data, xulyUart.ui16_tx3Size);
 8000f32:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f34:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f38:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4935      	ldr	r1, [pc, #212]	@ (8001014 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f40:	4835      	ldr	r0, [pc, #212]	@ (8001018 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000f42:	f003 fb66 	bl	8004612 <memcpy>
//		memcpy(ui8_tempBuf, xulyUart.ui8_rx2Data, xulyUart.ui16_tx3Size);

		xulyUart.uart2_receivedData = 1;
 8000f46:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2301      	movs	r3, #1
 8000f50:	6393      	str	r3, [r2, #56]	@ 0x38
//		xulyUart.ui8_indexUart2 = 1;

		xulyUart.ui32_timer = HAL_GetTick();
 8000f52:	f000 fc15 	bl	8001780 <HAL_GetTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f5a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8000f5e:	6253      	str	r3, [r2, #36]	@ 0x24
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, xulyUart.ui8_rx2Data, BUFFER_SIZE);
 8000f60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f64:	492b      	ldr	r1, [pc, #172]	@ (8001014 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f66:	482d      	ldr	r0, [pc, #180]	@ (800101c <HAL_UARTEx_RxEventCallback+0x150>)
 8000f68:	f002 f9e5 	bl	8003336 <HAL_UARTEx_ReceiveToIdle_IT>
//		memcpy(flash_data_buffer, xulyUart.ui8_rx2Data, Size);
//		flash_data_size = Size;

//		uart2_state = UART_STATE_RECEIVED;
	}
	if (huart->Instance == USART3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2b      	ldr	r2, [pc, #172]	@ (8001020 <HAL_UARTEx_RxEventCallback+0x154>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d146      	bne.n	8001004 <HAL_UARTEx_RxEventCallback+0x138>
	{
//		xulyUart.ui16_countIT3++;
		xulyUart.ui16_data3Size += Size;
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f78:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f7c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f88:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

		xulyUart.ui16_tx2Size = Size;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f92:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000f96:	461a      	mov	r2, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

		if(xulyUart.ui16_tx2Size < 1024)
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fac:	d20b      	bcs.n	8000fc6 <HAL_UARTEx_RxEventCallback+0xfa>
		{
			xulyUart.ui16_countIT3++;
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fb0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fbe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		}

		memcpy(xulyUart.ui8_tx2Data, xulyUart.ui8_rx3Data, xulyUart.ui16_tx2Size);
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fc8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4914      	ldr	r1, [pc, #80]	@ (8001024 <HAL_UARTEx_RxEventCallback+0x158>)
 8000fd4:	4814      	ldr	r0, [pc, #80]	@ (8001028 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000fd6:	f003 fb1c 	bl	8004612 <memcpy>
		xulyUart.uart3_receivedData = 1;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fdc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	63d3      	str	r3, [r2, #60]	@ 0x3c
//		xulyUart.ui8_indexUart3 = 1;
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, xulyUart.ui8_rx3Data, BUFFER_SIZE);
 8000fe6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fea:	490e      	ldr	r1, [pc, #56]	@ (8001024 <HAL_UARTEx_RxEventCallback+0x158>)
 8000fec:	480f      	ldr	r0, [pc, #60]	@ (800102c <HAL_UARTEx_RxEventCallback+0x160>)
 8000fee:	f002 f9a2 	bl	8003336 <HAL_UARTEx_ReceiveToIdle_IT>
		PrintUart3Data(xulyUart.ui8_rx3Data, xulyUart.ui16_tx2Size);
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x144>)
 8000ff4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4809      	ldr	r0, [pc, #36]	@ (8001024 <HAL_UARTEx_RxEventCallback+0x158>)
 8001000:	f7ff fb0c 	bl	800061c <PrintUart3Data>
//		uart3_state = UART_STATE_RECEIVED;
	}
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40004400 	.word	0x40004400
 8001010:	20000304 	.word	0x20000304
 8001014:	20000324 	.word	0x20000324
 8001018:	20003324 	.word	0x20003324
 800101c:	200000e0 	.word	0x200000e0
 8001020:	40004800 	.word	0x40004800
 8001024:	20001324 	.word	0x20001324
 8001028:	20002324 	.word	0x20002324
 800102c:	20000128 	.word	0x20000128

08001030 <HAL_UART_TxCpltCallback>:
//		HAL_UART_Receive_IT(&huart1, xulyUart.ui8_RX_buf, 1);
//	}
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <HAL_UART_TxCpltCallback+0x70>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d111      	bne.n	8001066 <HAL_UART_TxCpltCallback+0x36>
	{
		xulyUart.ui16_countTX2++;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 8001044:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001048:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 8001052:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001056:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		xulyUart.uart2_processingData = 0;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 800105c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001060:	461a      	mov	r2, r3
 8001062:	2300      	movs	r3, #0
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if (huart->Instance == USART3)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <HAL_UART_TxCpltCallback+0x78>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d111      	bne.n	8001094 <HAL_UART_TxCpltCallback+0x64>
	{
		xulyUart.ui16_countTX3++;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 8001072:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001076:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800107a:	3301      	adds	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 8001080:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001084:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		xulyUart.uart3_processingData = 0;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_UART_TxCpltCallback+0x74>)
 800108a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800108e:	461a      	mov	r2, r3
 8001090:	2300      	movs	r3, #0
 8001092:	6353      	str	r3, [r2, #52]	@ 0x34
	}
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40004400 	.word	0x40004400
 80010a4:	20000304 	.word	0x20000304
 80010a8:	40004800 	.word	0x40004800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_MspInit+0x48>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_MspInit+0x48>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_MspInit+0x48>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_MspInit+0x48>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_MspInit+0x48>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_MspInit+0x48>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	@ 0x38
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a67      	ldr	r2, [pc, #412]	@ (80012c0 <HAL_UART_MspInit+0x1bc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d135      	bne.n	8001192 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b63      	ldr	r3, [pc, #396]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	4b5f      	ldr	r3, [pc, #380]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a5e      	ldr	r2, [pc, #376]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b5c      	ldr	r3, [pc, #368]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800115e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001170:	2307      	movs	r3, #7
 8001172:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4853      	ldr	r0, [pc, #332]	@ (80012c8 <HAL_UART_MspInit+0x1c4>)
 800117c:	f001 f98a 	bl	8002494 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2025      	movs	r0, #37	@ 0x25
 8001186:	f000 fbdc 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800118a:	2025      	movs	r0, #37	@ 0x25
 800118c:	f000 fbf5 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001190:	e13d      	b.n	800140e <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==USART2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a4d      	ldr	r2, [pc, #308]	@ (80012cc <HAL_UART_MspInit+0x1c8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 80a1 	bne.w	80012e0 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a47      	ldr	r2, [pc, #284]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b45      	ldr	r3, [pc, #276]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	4b41      	ldr	r3, [pc, #260]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a40      	ldr	r2, [pc, #256]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <HAL_UART_MspInit+0x1c0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011d6:	230c      	movs	r3, #12
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e6:	2307      	movs	r3, #7
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4835      	ldr	r0, [pc, #212]	@ (80012c8 <HAL_UART_MspInit+0x1c4>)
 80011f2:	f001 f94f 	bl	8002494 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80011f6:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 80011f8:	4a36      	ldr	r2, [pc, #216]	@ (80012d4 <HAL_UART_MspInit+0x1d0>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80011fc:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001202:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001204:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 8001212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001216:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001218:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121e:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001224:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001236:	4826      	ldr	r0, [pc, #152]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 8001238:	f000 fbba 	bl	80019b0 <HAL_DMA_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001242:	f7ff ff33 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800124c:	4a20      	ldr	r2, [pc, #128]	@ (80012d0 <HAL_UART_MspInit+0x1cc>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001254:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <HAL_UART_MspInit+0x1d8>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 800125a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800125e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001262:	2240      	movs	r2, #64	@ 0x40
 8001264:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 800126e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001272:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001292:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 8001294:	f000 fb8c 	bl	80019b0 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800129e:	f7ff ff05 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 80012a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <HAL_UART_MspInit+0x1d4>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2026      	movs	r0, #38	@ 0x26
 80012b4:	f000 fb45 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012b8:	2026      	movs	r0, #38	@ 0x26
 80012ba:	f000 fb5e 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 80012be:	e0a6      	b.n	800140e <HAL_UART_MspInit+0x30a>
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40004400 	.word	0x40004400
 80012d0:	20000170 	.word	0x20000170
 80012d4:	40026088 	.word	0x40026088
 80012d8:	200001d0 	.word	0x200001d0
 80012dc:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001418 <HAL_UART_MspInit+0x314>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	f040 8091 	bne.w	800140e <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b4a      	ldr	r3, [pc, #296]	@ (800141c <HAL_UART_MspInit+0x318>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_UART_MspInit+0x318>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b47      	ldr	r3, [pc, #284]	@ (800141c <HAL_UART_MspInit+0x318>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <HAL_UART_MspInit+0x318>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4a42      	ldr	r2, [pc, #264]	@ (800141c <HAL_UART_MspInit+0x318>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6313      	str	r3, [r2, #48]	@ 0x30
 8001318:	4b40      	ldr	r3, [pc, #256]	@ (800141c <HAL_UART_MspInit+0x318>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001324:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001336:	2307      	movs	r3, #7
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4837      	ldr	r0, [pc, #220]	@ (8001420 <HAL_UART_MspInit+0x31c>)
 8001342:	f001 f8a7 	bl	8002494 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001348:	4a37      	ldr	r2, [pc, #220]	@ (8001428 <HAL_UART_MspInit+0x324>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800134c:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <HAL_UART_MspInit+0x320>)
 800134e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001352:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135a:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <HAL_UART_MspInit+0x320>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001360:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001366:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001368:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <HAL_UART_MspInit+0x320>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <HAL_UART_MspInit+0x320>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001386:	4827      	ldr	r0, [pc, #156]	@ (8001424 <HAL_UART_MspInit+0x320>)
 8001388:	f000 fb12 	bl	80019b0 <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8001392:	f7ff fe8b 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <HAL_UART_MspInit+0x320>)
 800139a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <HAL_UART_MspInit+0x320>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <HAL_UART_MspInit+0x32c>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80013a8:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013b2:	2240      	movs	r2, #64	@ 0x40
 80013b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80013e2:	4812      	ldr	r0, [pc, #72]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013e4:	f000 fae4 	bl	80019b0 <HAL_DMA_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80013ee:	f7ff fe5d 	bl	80010ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80013f8:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <HAL_UART_MspInit+0x328>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2027      	movs	r0, #39	@ 0x27
 8001404:	f000 fa9d 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001408:	2027      	movs	r0, #39	@ 0x27
 800140a:	f000 fab6 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	@ 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004800 	.word	0x40004800
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	20000230 	.word	0x20000230
 8001428:	40026028 	.word	0x40026028
 800142c:	20000290 	.word	0x20000290
 8001430:	40026058 	.word	0x40026058

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f000 f96a 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <DMA1_Stream1_IRQHandler+0x10>)
 8001492:	f000 fbcd 	bl	8001c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000230 	.word	0x20000230

080014a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <DMA1_Stream3_IRQHandler+0x10>)
 80014a6:	f000 fbc3 	bl	8001c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000290 	.word	0x20000290

080014b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <DMA1_Stream5_IRQHandler+0x10>)
 80014ba:	f000 fbb9 	bl	8001c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000170 	.word	0x20000170

080014c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <DMA1_Stream6_IRQHandler+0x10>)
 80014ce:	f000 fbaf 	bl	8001c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001d0 	.word	0x200001d0

080014dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <USART1_IRQHandler+0x10>)
 80014e2:	f001 ff85 	bl	80033f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000098 	.word	0x20000098

080014f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <USART2_IRQHandler+0x10>)
 80014f6:	f001 ff7b 	bl	80033f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000e0 	.word	0x200000e0

08001504 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <USART3_IRQHandler+0x10>)
 800150a:	f001 ff71 	bl	80033f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000128 	.word	0x20000128

08001518 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
  }

  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f843 	bl	80005f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
  }
  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b0:	605a      	str	r2, [r3, #4]
  return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f002 ffcc 	bl	80045b8 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20020000 	.word	0x20020000
 800164c:	00000400 	.word	0x00000400
 8001650:	20004358 	.word	0x20004358
 8001654:	200044d0 	.word	0x200044d0

08001658 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800169c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001668:	f7ff fff6 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001692:	f002 ff97 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff f99d 	bl	80009d4 <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016a8:	08005214 	.word	0x08005214
  ldr r2, =_sbss
 80016ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016b0:	200044cc 	.word	0x200044cc

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <HAL_Init+0x40>)
 80016c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <HAL_Init+0x40>)
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_Init+0x40>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f923 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e6:	200f      	movs	r0, #15
 80016e8:	f000 f808 	bl	80016fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016ec:	f7ff fce4 	bl	80010b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_InitTick+0x54>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_InitTick+0x58>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f93b 	bl	8001996 <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00e      	b.n	8001748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d80a      	bhi.n	8001746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 f903 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800173c:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <HAL_InitTick+0x5c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	20000008 	.word	0x20000008
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_IncTick+0x1c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_IncTick+0x20>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a03      	ldr	r2, [pc, #12]	@ (800177c <HAL_IncTick+0x20>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000008 	.word	0x20000008
 800177c:	2000435c 	.word	0x2000435c

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b02      	ldr	r3, [pc, #8]	@ (8001790 <HAL_GetTick+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	2000435c 	.word	0x2000435c

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4906      	ldr	r1, [pc, #24]	@ (800182c <__NVIC_EnableIRQ+0x34>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	@ (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	@ (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	@ 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff90 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff2d 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff42 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff90 	bl	8001884 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5f 	bl	8001830 <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff35 	bl	80017f8 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff fee0 	bl	8001780 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e099      	b.n	8001b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ec:	e00f      	b.n	8001a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ee:	f7ff fec7 	bl	8001780 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d908      	bls.n	8001a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2203      	movs	r2, #3
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e078      	b.n	8001b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1e8      	bne.n	80019ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <HAL_DMA_Init+0x158>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d107      	bne.n	8001a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	4313      	orrs	r3, r2
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f023 0307 	bic.w	r3, r3, #7
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d117      	bne.n	8001ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fa79 	bl	8001fac <DMA_CheckFifoParam>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2240      	movs	r2, #64	@ 0x40
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e016      	b.n	8001b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa32 	bl	8001f44 <DMA_CalcBaseAndBitshift>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae8:	223f      	movs	r2, #63	@ 0x3f
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	f010803f 	.word	0xf010803f

08001b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b1a:	f7ff fe31 	bl	8001780 <HAL_GetTick>
 8001b1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e052      	b.n	8001be4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0216 	bic.w	r2, r2, #22
 8001b4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <HAL_DMA_Abort+0x62>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0208 	bic.w	r2, r2, #8
 8001b7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8e:	e013      	b.n	8001bb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b90:	f7ff fdf6 	bl	8001780 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d90c      	bls.n	8001bb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e015      	b.n	8001be4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1e4      	bne.n	8001b90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bca:	223f      	movs	r2, #63	@ 0x3f
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00c      	b.n	8001c24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c3c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e78 <HAL_DMA_IRQHandler+0x248>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a8e      	ldr	r2, [pc, #568]	@ (8001e7c <HAL_DMA_IRQHandler+0x24c>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0204 	bic.w	r2, r2, #4
 8001c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	2208      	movs	r2, #8
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d043      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03c      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d108      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
 8001d5e:	e01f      	b.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e016      	b.n	8001da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0208 	bic.w	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2220      	movs	r2, #32
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 808f 	beq.w	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8087 	beq.w	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d136      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0216 	bic.w	r2, r2, #22
 8001de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <HAL_DMA_IRQHandler+0x1da>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0208 	bic.w	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	223f      	movs	r2, #63	@ 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d07e      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
        }
        return;
 8001e46:	e079      	b.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01d      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10d      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d031      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e02c      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
 8001e90:	e01e      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0210 	bic.w	r2, r2, #16
 8001eae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d032      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d307      	bcc.n	8001f18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f2      	bne.n	8001efc <HAL_DMA_IRQHandler+0x2cc>
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
 8001f3a:	e000      	b.n	8001f3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f3c:	bf00      	nop
    }
  }
}
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3b10      	subs	r3, #16
 8001f54:	4a13      	ldr	r2, [pc, #76]	@ (8001fa4 <DMA_CalcBaseAndBitshift+0x60>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f5e:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d909      	bls.n	8001f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	1d1a      	adds	r2, r3, #4
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f84:	e007      	b.n	8001f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	aaaaaaab 	.word	0xaaaaaaab
 8001fa8:	080051c8 	.word	0x080051c8

08001fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11f      	bne.n	8002006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d856      	bhi.n	800207a <DMA_CheckFifoParam+0xce>
 8001fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <DMA_CheckFifoParam+0x28>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08001ff7 	.word	0x08001ff7
 8001fdc:	08001fe5 	.word	0x08001fe5
 8001fe0:	0800207b 	.word	0x0800207b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d046      	beq.n	800207e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff4:	e043      	b.n	800207e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ffe:	d140      	bne.n	8002082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002004:	e03d      	b.n	8002082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800200e:	d121      	bne.n	8002054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d837      	bhi.n	8002086 <DMA_CheckFifoParam+0xda>
 8002016:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <DMA_CheckFifoParam+0x70>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800202d 	.word	0x0800202d
 8002020:	08002033 	.word	0x08002033
 8002024:	0800202d 	.word	0x0800202d
 8002028:	08002045 	.word	0x08002045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      break;
 8002030:	e030      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d025      	beq.n	800208a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002042:	e022      	b.n	800208a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800204c:	d11f      	bne.n	800208e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002052:	e01c      	b.n	800208e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d903      	bls.n	8002062 <DMA_CheckFifoParam+0xb6>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d003      	beq.n	8002068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002060:	e018      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      break;
 8002066:	e015      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e00b      	b.n	8002092 <DMA_CheckFifoParam+0xe6>
      break;
 800207a:	bf00      	nop
 800207c:	e00a      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e008      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e006      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e004      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e002      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;   
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
    }
  } 
  
  return status; 
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_FLASH_Unlock+0x38>)
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da0b      	bge.n	80020ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_FLASH_Unlock+0x38>)
 80020b4:	4a09      	ldr	r2, [pc, #36]	@ (80020dc <HAL_FLASH_Unlock+0x3c>)
 80020b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80020b8:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <HAL_FLASH_Unlock+0x38>)
 80020ba:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <HAL_FLASH_Unlock+0x40>)
 80020bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_FLASH_Unlock+0x38>)
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da01      	bge.n	80020ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80020ca:	79fb      	ldrb	r3, [r7, #7]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00
 80020dc:	45670123 	.word	0x45670123
 80020e0:	cdef89ab 	.word	0xcdef89ab

080020e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_FLASH_Lock+0x1c>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <HAL_FLASH_Lock+0x1c>)
 80020ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00

08002104 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002108:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <HAL_FLASH_GetError+0x10>)
 800210a:	69db      	ldr	r3, [r3, #28]
}  
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20004360 	.word	0x20004360

08002118 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <FLASH_WaitForLastOperation+0x78>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800212a:	f7ff fb29 	bl	8001780 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002130:	e010      	b.n	8002154 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d00c      	beq.n	8002154 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <FLASH_WaitForLastOperation+0x38>
 8002140:	f7ff fb1e 	bl	8001780 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	d201      	bcs.n	8002154 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e019      	b.n	8002188 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <FLASH_WaitForLastOperation+0x7c>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e8      	bne.n	8002132 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <FLASH_WaitForLastOperation+0x7c>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <FLASH_WaitForLastOperation+0x7c>)
 800216e:	2201      	movs	r2, #1
 8002170:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <FLASH_WaitForLastOperation+0x7c>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800217e:	f000 f80b 	bl	8002198 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
  
}  
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20004360 	.word	0x20004360
 8002194:	40023c00 	.word	0x40023c00

08002198 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 80021b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 80021b6:	2210      	movs	r2, #16
 80021b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021ba:	4b20      	ldr	r3, [pc, #128]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 80021d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 80021d4:	2220      	movs	r2, #32
 80021d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021e4:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	4a14      	ldr	r2, [pc, #80]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 80021ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 80021f2:	2240      	movs	r2, #64	@ 0x40
 80021f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002202:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 800220c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002220:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f043 0310 	orr.w	r3, r3, #16
 8002228:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <FLASH_SetErrorCode+0xa8>)
 800222a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <FLASH_SetErrorCode+0xa4>)
 800222e:	2202      	movs	r2, #2
 8002230:	60da      	str	r2, [r3, #12]
  }
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023c00 	.word	0x40023c00
 8002240:	20004360 	.word	0x20004360

08002244 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002256:	4b31      	ldr	r3, [pc, #196]	@ (800231c <HAL_FLASHEx_Erase+0xd8>)
 8002258:	7e1b      	ldrb	r3, [r3, #24]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_FLASHEx_Erase+0x1e>
 800225e:	2302      	movs	r3, #2
 8002260:	e058      	b.n	8002314 <HAL_FLASHEx_Erase+0xd0>
 8002262:	4b2e      	ldr	r3, [pc, #184]	@ (800231c <HAL_FLASHEx_Erase+0xd8>)
 8002264:	2201      	movs	r2, #1
 8002266:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002268:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800226c:	f7ff ff54 	bl	8002118 <FLASH_WaitForLastOperation>
 8002270:	4603      	mov	r3, r0
 8002272:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d148      	bne.n	800230c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d115      	bne.n	80022b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 f8da 	bl	8002450 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800229c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022a0:	f7ff ff3a 	bl	8002118 <FLASH_WaitForLastOperation>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_FLASHEx_Erase+0xdc>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_FLASHEx_Erase+0xdc>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6113      	str	r3, [r2, #16]
 80022b4:	e028      	b.n	8002308 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e01c      	b.n	80022f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	68b8      	ldr	r0, [r7, #8]
 80022c8:	f000 f82c 	bl	8002324 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022d0:	f7ff ff22 	bl	8002118 <FLASH_WaitForLastOperation>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_FLASHEx_Erase+0xdc>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_FLASHEx_Erase+0xdc>)
 80022de:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80022e2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	601a      	str	r2, [r3, #0]
          break;
 80022f0:	e00a      	b.n	8002308 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4413      	add	r3, r2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3da      	bcc.n	80022be <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002308:	f000 f85e 	bl	80023c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800230c:	4b03      	ldr	r3, [pc, #12]	@ (800231c <HAL_FLASHEx_Erase+0xd8>)
 800230e:	2200      	movs	r2, #0
 8002310:	761a      	strb	r2, [r3, #24]

  return status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20004360 	.word	0x20004360
 8002320:	40023c00 	.word	0x40023c00

08002324 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e010      	b.n	8002362 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d103      	bne.n	800234e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e009      	b.n	8002362 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d103      	bne.n	800235c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e002      	b.n	8002362 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800235c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002360:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 8002368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800236c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	4914      	ldr	r1, [pc, #80]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	4a11      	ldr	r2, [pc, #68]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 8002380:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002384:	6113      	str	r3, [r2, #16]
 8002386:	23f8      	movs	r3, #248	@ 0xf8
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002392:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4093      	lsls	r3, r2
 80023a0:	f043 0202 	orr.w	r2, r3, #2
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	4906      	ldr	r1, [pc, #24]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <FLASH_Erase_Sector+0xa0>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b8:	6113      	str	r3, [r2, #16]
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80023cc:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d017      	beq.n	8002408 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80023d8:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a15      	ldr	r2, [pc, #84]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <FLASH_FlushCaches+0x84>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a12      	ldr	r2, [pc, #72]	@ (800244c <FLASH_FlushCaches+0x84>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002406:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002408:	4b10      	ldr	r3, [pc, #64]	@ (800244c <FLASH_FlushCaches+0x84>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002414:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <FLASH_FlushCaches+0x84>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <FLASH_FlushCaches+0x84>)
 800241a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800241e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <FLASH_FlushCaches+0x84>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a09      	ldr	r2, [pc, #36]	@ (800244c <FLASH_FlushCaches+0x84>)
 8002426:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <FLASH_FlushCaches+0x84>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a06      	ldr	r2, [pc, #24]	@ (800244c <FLASH_FlushCaches+0x84>)
 8002432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002436:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <FLASH_FlushCaches+0x84>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a03      	ldr	r2, [pc, #12]	@ (800244c <FLASH_FlushCaches+0x84>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002442:	6013      	str	r3, [r2, #0]
  }
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40023c00 	.word	0x40023c00

08002450 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <FLASH_MassErase+0x40>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <FLASH_MassErase+0x40>)
 8002462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <FLASH_MassErase+0x40>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <FLASH_MassErase+0x40>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <FLASH_MassErase+0x40>)
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	4313      	orrs	r3, r2
 800247e:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <FLASH_MassErase+0x40>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6113      	str	r3, [r2, #16]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a2:	e16f      	b.n	8002784 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8161 	beq.w	800277e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d005      	beq.n	80024d4 <HAL_GPIO_Init+0x40>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d130      	bne.n	8002536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250a:	2201      	movs	r2, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0201 	and.w	r2, r3, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b03      	cmp	r3, #3
 8002540:	d017      	beq.n	8002572 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d123      	bne.n	80025c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80bb 	beq.w	800277e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	4b64      	ldr	r3, [pc, #400]	@ (80027a0 <HAL_GPIO_Init+0x30c>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	4a63      	ldr	r2, [pc, #396]	@ (80027a0 <HAL_GPIO_Init+0x30c>)
 8002612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002616:	6453      	str	r3, [r2, #68]	@ 0x44
 8002618:	4b61      	ldr	r3, [pc, #388]	@ (80027a0 <HAL_GPIO_Init+0x30c>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002624:	4a5f      	ldr	r2, [pc, #380]	@ (80027a4 <HAL_GPIO_Init+0x310>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a57      	ldr	r2, [pc, #348]	@ (80027a8 <HAL_GPIO_Init+0x314>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d031      	beq.n	80026b4 <HAL_GPIO_Init+0x220>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a56      	ldr	r2, [pc, #344]	@ (80027ac <HAL_GPIO_Init+0x318>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d02b      	beq.n	80026b0 <HAL_GPIO_Init+0x21c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a55      	ldr	r2, [pc, #340]	@ (80027b0 <HAL_GPIO_Init+0x31c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d025      	beq.n	80026ac <HAL_GPIO_Init+0x218>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a54      	ldr	r2, [pc, #336]	@ (80027b4 <HAL_GPIO_Init+0x320>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d01f      	beq.n	80026a8 <HAL_GPIO_Init+0x214>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a53      	ldr	r2, [pc, #332]	@ (80027b8 <HAL_GPIO_Init+0x324>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d019      	beq.n	80026a4 <HAL_GPIO_Init+0x210>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a52      	ldr	r2, [pc, #328]	@ (80027bc <HAL_GPIO_Init+0x328>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_GPIO_Init+0x20c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a51      	ldr	r2, [pc, #324]	@ (80027c0 <HAL_GPIO_Init+0x32c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00d      	beq.n	800269c <HAL_GPIO_Init+0x208>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a50      	ldr	r2, [pc, #320]	@ (80027c4 <HAL_GPIO_Init+0x330>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <HAL_GPIO_Init+0x204>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a4f      	ldr	r2, [pc, #316]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_GPIO_Init+0x200>
 8002690:	2308      	movs	r3, #8
 8002692:	e010      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 8002694:	2309      	movs	r3, #9
 8002696:	e00e      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 8002698:	2307      	movs	r3, #7
 800269a:	e00c      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 800269c:	2306      	movs	r3, #6
 800269e:	e00a      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 80026a0:	2305      	movs	r3, #5
 80026a2:	e008      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 80026a4:	2304      	movs	r3, #4
 80026a6:	e006      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x222>
 80026b4:	2300      	movs	r3, #0
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c8:	4936      	ldr	r1, [pc, #216]	@ (80027a4 <HAL_GPIO_Init+0x310>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <HAL_GPIO_Init+0x338>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026fa:	4a34      	ldr	r2, [pc, #208]	@ (80027cc <HAL_GPIO_Init+0x338>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b32      	ldr	r3, [pc, #200]	@ (80027cc <HAL_GPIO_Init+0x338>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002724:	4a29      	ldr	r2, [pc, #164]	@ (80027cc <HAL_GPIO_Init+0x338>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_GPIO_Init+0x338>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800274e:	4a1f      	ldr	r2, [pc, #124]	@ (80027cc <HAL_GPIO_Init+0x338>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_GPIO_Init+0x338>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002778:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <HAL_GPIO_Init+0x338>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	f47f ae88 	bne.w	80024a4 <HAL_GPIO_Init+0x10>
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40013c00 	.word	0x40013c00

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43d9      	mvns	r1, r3
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	400b      	ands	r3, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e23b      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d050      	beq.n	80028f4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002852:	4b9e      	ldr	r3, [pc, #632]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b04      	cmp	r3, #4
 800285c:	d00c      	beq.n	8002878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b9b      	ldr	r3, [pc, #620]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002866:	2b08      	cmp	r3, #8
 8002868:	d112      	bne.n	8002890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286a:	4b98      	ldr	r3, [pc, #608]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	4b94      	ldr	r3, [pc, #592]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d036      	beq.n	80028f2 <HAL_RCC_OscConfig+0xbe>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d132      	bne.n	80028f2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e216      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad0 <HAL_RCC_OscConfig+0x29c>)
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d013      	beq.n	80028ca <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ff6d 	bl	8001780 <HAL_GetTick>
 80028a6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028aa:	f7fe ff69 	bl	8001780 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	@ 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e200      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028bc:	4b83      	ldr	r3, [pc, #524]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x76>
 80028c8:	e014      	b.n	80028f4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe ff59 	bl	8001780 <HAL_GetTick>
 80028ce:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d2:	f7fe ff55 	bl	8001780 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	@ 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1ec      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e4:	4b79      	ldr	r3, [pc, #484]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x9e>
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d077      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002900:	4b72      	ldr	r3, [pc, #456]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002914:	2b08      	cmp	r3, #8
 8002916:	d126      	bne.n	8002966 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002918:	4b6c      	ldr	r3, [pc, #432]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d120      	bne.n	8002966 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002924:	4b69      	ldr	r3, [pc, #420]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x108>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e1c0      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b63      	ldr	r3, [pc, #396]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	21f8      	movs	r1, #248	@ 0xf8
 800294a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	fa91 f1a1 	rbit	r1, r1
 8002952:	6179      	str	r1, [r7, #20]
  return result;
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	fab1 f181 	clz	r1, r1
 800295a:	b2c9      	uxtb	r1, r1
 800295c:	408b      	lsls	r3, r1
 800295e:	495b      	ldr	r1, [pc, #364]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002964:	e044      	b.n	80029f0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02a      	beq.n	80029c4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296e:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCC_OscConfig+0x2a0>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe ff04 	bl	8001780 <HAL_GetTick>
 8002978:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe ff00 	bl	8001780 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e197      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b4f      	ldr	r3, [pc, #316]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b4c      	ldr	r3, [pc, #304]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	21f8      	movs	r1, #248	@ 0xf8
 80029a8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6939      	ldr	r1, [r7, #16]
 80029ac:	fa91 f1a1 	rbit	r1, r1
 80029b0:	60f9      	str	r1, [r7, #12]
  return result;
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	fab1 f181 	clz	r1, r1
 80029b8:	b2c9      	uxtb	r1, r1
 80029ba:	408b      	lsls	r3, r1
 80029bc:	4943      	ldr	r1, [pc, #268]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
 80029c2:	e015      	b.n	80029f0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c4:	4b43      	ldr	r3, [pc, #268]	@ (8002ad4 <HAL_RCC_OscConfig+0x2a0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fed9 	bl	8001780 <HAL_GetTick>
 80029ce:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fed5 	bl	8001780 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e16c      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e4:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d030      	beq.n	8002a5e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d016      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a04:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_OscConfig+0x2a4>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe feb9 	bl	8001780 <HAL_GetTick>
 8002a0e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe feb5 	bl	8001780 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e14c      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a24:	4b29      	ldr	r3, [pc, #164]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1de>
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a32:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <HAL_RCC_OscConfig+0x2a4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7fe fea2 	bl	8001780 <HAL_GetTick>
 8002a3c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe fe9e 	bl	8001780 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e135      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a52:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8087 	beq.w	8002b7a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d110      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a11      	ldr	r2, [pc, #68]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <HAL_RCC_OscConfig+0x298>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_RCC_OscConfig+0x2a8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <HAL_RCC_OscConfig+0x2a8>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_OscConfig+0x2a8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d122      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <HAL_RCC_OscConfig+0x2a8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a07      	ldr	r2, [pc, #28]	@ (8002adc <HAL_RCC_OscConfig+0x2a8>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fe5c 	bl	8001780 <HAL_GetTick>
 8002ac8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	e012      	b.n	8002af2 <HAL_RCC_OscConfig+0x2be>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40023802 	.word	0x40023802
 8002ad4:	42470000 	.word	0x42470000
 8002ad8:	42470e80 	.word	0x42470e80
 8002adc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe fe4e 	bl	8001780 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0e5      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b75      	ldr	r3, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x494>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4b72      	ldr	r3, [pc, #456]	@ (8002ccc <HAL_RCC_OscConfig+0x498>)
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fe36 	bl	8001780 <HAL_GetTick>
 8002b14:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fe32 	bl	8001780 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0c7      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b68      	ldr	r3, [pc, #416]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2e4>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fe20 	bl	8001780 <HAL_GetTick>
 8002b40:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fe1c 	bl	8001780 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b1      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b58      	ldr	r3, [pc, #352]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	4a57      	ldr	r2, [pc, #348]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 809c 	beq.w	8002cbc <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b84:	4b52      	ldr	r3, [pc, #328]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d061      	beq.n	8002c54 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d146      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd4 <HAL_RCC_OscConfig+0x4a0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fdef 	bl	8001780 <HAL_GetTick>
 8002ba2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fdeb 	bl	8001780 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	@ 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e082      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	4b45      	ldr	r3, [pc, #276]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc4:	4b42      	ldr	r3, [pc, #264]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4b43      	ldr	r3, [pc, #268]	@ (8002cd8 <HAL_RCC_OscConfig+0x4a4>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	69d1      	ldr	r1, [r2, #28]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6a12      	ldr	r2, [r2, #32]
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bda:	0192      	lsls	r2, r2, #6
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002be2:	0612      	lsls	r2, r2, #24
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bea:	0852      	lsrs	r2, r2, #1
 8002bec:	3a01      	subs	r2, #1
 8002bee:	0412      	lsls	r2, r2, #16
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	4937      	ldr	r1, [pc, #220]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_RCC_OscConfig+0x4a0>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fdbf 	bl	8001780 <HAL_GetTick>
 8002c02:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe fdbb 	bl	8001780 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	@ 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e052      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x3d2>
 8002c24:	e04a      	b.n	8002cbc <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd4 <HAL_RCC_OscConfig+0x4a0>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fda8 	bl	8001780 <HAL_GetTick>
 8002c30:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fda4 	bl	8001780 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	@ 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e03b      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x400>
 8002c52:	e033      	b.n	8002cbc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e02e      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x49c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d121      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11a      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3728      	adds	r7, #40	@ 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	40023870 	.word	0x40023870
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	42470060 	.word	0x42470060
 8002cd8:	f0bc8000 	.word	0xf0bc8000

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d2      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b68      	ldr	r3, [pc, #416]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b66      	ldr	r3, [pc, #408]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0be      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002d48:	4b56      	ldr	r3, [pc, #344]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a55      	ldr	r2, [pc, #340]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4950      	ldr	r1, [pc, #320]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d040      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d115      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e085      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e079      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b40      	ldr	r3, [pc, #256]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e071      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4939      	ldr	r1, [pc, #228]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fcdc 	bl	8001780 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fcd8 	bl	8001780 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e059      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b30      	ldr	r3, [pc, #192]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e03c      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	491b      	ldr	r1, [pc, #108]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4913      	ldr	r1, [pc, #76]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002e5a:	f000 f82b 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4601      	mov	r1, r0
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e68:	22f0      	movs	r2, #240	@ 0xf0
 8002e6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	fa92 f2a2 	rbit	r2, r2
 8002e72:	60fa      	str	r2, [r7, #12]
  return result;
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	fab2 f282 	clz	r2, r2
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	40d3      	lsrs	r3, r2
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	fa21 f303 	lsr.w	r3, r1, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <HAL_RCC_ClockConfig+0x1d0>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fc34 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080051b0 	.word	0x080051b0
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b090      	sub	sp, #64	@ 0x40
 8002eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f200 80a2 	bhi.w	8003022 <HAL_RCC_GetSysClockFreq+0x16e>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee6:	e09c      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b53      	ldr	r3, [pc, #332]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eea:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002eec:	e09c      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eee:	4b53      	ldr	r3, [pc, #332]	@ (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ef2:	e099      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efe:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d027      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f20:	fb03 f201 	mul.w	r2, r3, r1
 8002f24:	2300      	movs	r3, #0
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a43      	ldr	r2, [pc, #268]	@ (800303c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f2e:	fba0 2102 	umull	r2, r1, r0, r2
 8002f32:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002f34:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f38:	4413      	add	r3, r2
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	61fa      	str	r2, [r7, #28]
 8002f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f4c:	f7fd f93a 	bl	80001c4 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f58:	e055      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	617a      	str	r2, [r7, #20]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f6c:	f04f 0b00 	mov.w	fp, #0
 8002f70:	4652      	mov	r2, sl
 8002f72:	465b      	mov	r3, fp
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0159      	lsls	r1, r3, #5
 8002f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f82:	0150      	lsls	r0, r2, #5
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	ebb2 080a 	subs.w	r8, r2, sl
 8002f8c:	eb63 090b 	sbc.w	r9, r3, fp
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f9c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fa0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fa4:	ebb2 0408 	subs.w	r4, r2, r8
 8002fa8:	eb63 0509 	sbc.w	r5, r3, r9
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	00eb      	lsls	r3, r5, #3
 8002fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fba:	00e2      	lsls	r2, r4, #3
 8002fbc:	4614      	mov	r4, r2
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	eb14 030a 	adds.w	r3, r4, sl
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	eb45 030b 	adc.w	r3, r5, fp
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd8:	4629      	mov	r1, r5
 8002fda:	028b      	lsls	r3, r1, #10
 8002fdc:	4620      	mov	r0, r4
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002fe6:	4601      	mov	r1, r0
 8002fe8:	028a      	lsls	r2, r1, #10
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	60fa      	str	r2, [r7, #12]
 8002ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ffa:	f7fd f8e3 	bl	80001c4 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4613      	mov	r3, r2
 8003004:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x180>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	3301      	adds	r3, #1
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003016:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003020:	e002      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003022:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x184>)
 8003024:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003026:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800302a:	4618      	mov	r0, r3
 800302c:	3740      	adds	r7, #64	@ 0x40
 800302e:	46bd      	mov	sp, r7
 8003030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	00f42400 	.word	0x00f42400
 800303c:	017d7840 	.word	0x017d7840

08003040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003044:	4b02      	ldr	r3, [pc, #8]	@ (8003050 <HAL_RCC_GetHCLKFreq+0x10>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800305a:	f7ff fff1 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 800305e:	4601      	mov	r1, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003068:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800306c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa92 f2a2 	rbit	r2, r2
 8003074:	603a      	str	r2, [r7, #0]
  return result;
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	40d3      	lsrs	r3, r2
 8003080:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	080051c0 	.word	0x080051c0

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800309e:	f7ff ffcf 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80030ac:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80030b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	603a      	str	r2, [r7, #0]
  return result;
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	40d3      	lsrs	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080051c0 	.word	0x080051c0

080030dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e042      	b.n	8003174 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fffe 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	@ 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800311e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fe43 	bl	8003dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	@ 0x28
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	d16d      	bne.n	8003278 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_UART_Transmit+0x2c>
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e066      	b.n	800327a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2221      	movs	r2, #33	@ 0x21
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ba:	f7fe fae1 	bl	8001780 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d4:	d108      	bne.n	80031e8 <HAL_UART_Transmit+0x6c>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	e003      	b.n	80031f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031f0:	e02a      	b.n	8003248 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2180      	movs	r1, #128	@ 0x80
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fb92 	bl	8003926 <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e036      	b.n	800327a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3302      	adds	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e007      	b.n	800323a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3301      	adds	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1cf      	bne.n	80031f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2140      	movs	r1, #64	@ 0x40
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fb62 	bl	8003926 <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e006      	b.n	800327a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b20      	cmp	r3, #32
 800329a:	d121      	bne.n	80032e0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_UART_Transmit_IT+0x26>
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e01a      	b.n	80032e2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	88fa      	ldrh	r2, [r7, #6]
 80032b6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2221      	movs	r2, #33	@ 0x21
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032da:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b20      	cmp	r3, #32
 8003304:	d112      	bne.n	800332c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_UART_Receive_IT+0x26>
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00b      	b.n	800332e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	461a      	mov	r2, r3
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fb6d 	bl	8003a02 <UART_Start_Receive_IT>
 8003328:	4603      	mov	r3, r0
 800332a:	e000      	b.n	800332e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08c      	sub	sp, #48	@ 0x30
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	d14a      	bne.n	80033e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e043      	b.n	80033e8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	461a      	mov	r2, r3
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fb45 	bl	8003a02 <UART_Start_Receive_IT>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800337e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003382:	2b00      	cmp	r3, #0
 8003384:	d12c      	bne.n	80033e0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	2b01      	cmp	r3, #1
 800338c:	d125      	bne.n	80033da <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	617b      	str	r3, [r7, #20]
   return(result);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f043 0310 	orr.w	r3, r3, #16
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80033c6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6a39      	ldr	r1, [r7, #32]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e5      	bne.n	80033a4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80033d8:	e002      	b.n	80033e0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80033e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033e4:	e000      	b.n	80033e8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
  }
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3730      	adds	r7, #48	@ 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b0ba      	sub	sp, #232	@ 0xe8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800342e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_UART_IRQHandler+0x66>
 8003442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fbed 	bl	8003c2e <UART_Receive_IT>
      return;
 8003454:	e25b      	b.n	800390e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80de 	beq.w	800361c <HAL_UART_IRQHandler+0x22c>
 8003460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003470:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80d1 	beq.w	800361c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_UART_IRQHandler+0xae>
 8003486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_UART_IRQHandler+0xd2>
 80034aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_UART_IRQHandler+0xf6>
 80034ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d011      	beq.n	8003516 <HAL_UART_IRQHandler+0x126>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f043 0208 	orr.w	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 81f2 	beq.w	8003904 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_UART_IRQHandler+0x14e>
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fb78 	bl	8003c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b40      	cmp	r3, #64	@ 0x40
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_UART_IRQHandler+0x17a>
 8003562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04f      	beq.n	800360a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fa82 	bl	8003a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357a:	2b40      	cmp	r3, #64	@ 0x40
 800357c:	d141      	bne.n	8003602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3314      	adds	r3, #20
 80035a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1d9      	bne.n	800357e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d013      	beq.n	80035fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	4a7e      	ldr	r2, [pc, #504]	@ (80037d0 <HAL_UART_IRQHandler+0x3e0>)
 80035d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fb04 	bl	8001bec <HAL_DMA_Abort_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e00e      	b.n	8003618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f98a 	bl	8003914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e00a      	b.n	8003618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f986 	bl	8003914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	e006      	b.n	8003618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f982 	bl	8003914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003616:	e175      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	bf00      	nop
    return;
 800361a:	e173      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	f040 814f 	bne.w	80038c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8148 	beq.w	80038c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8141 	beq.w	80038c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	f040 80b6 	bne.w	80037d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8145 	beq.w	8003908 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003686:	429a      	cmp	r2, r3
 8003688:	f080 813e 	bcs.w	8003908 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003692:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369e:	f000 8088 	beq.w	80037b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1d9      	bne.n	80036a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003712:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003716:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800371a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e1      	bne.n	80036ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800373a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800373c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800374e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003750:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003754:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800375c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e3      	bne.n	800372a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003782:	f023 0310 	bic.w	r3, r3, #16
 8003786:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003794:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003796:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800379a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e3      	bne.n	8003770 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe f9ad 	bl	8001b0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fd fb7f 	bl	8000ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037ce:	e09b      	b.n	8003908 <HAL_UART_IRQHandler+0x518>
 80037d0:	08003b39 	.word	0x08003b39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 808e 	beq.w	800390c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8089 	beq.w	800390c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800381e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003820:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800382c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e3      	bne.n	80037fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	623b      	str	r3, [r7, #32]
   return(result);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003856:	633a      	str	r2, [r7, #48]	@ 0x30
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800385c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e3      	bne.n	8003832 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	60fb      	str	r3, [r7, #12]
   return(result);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0310 	bic.w	r3, r3, #16
 800388e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800389c:	61fa      	str	r2, [r7, #28]
 800389e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	617b      	str	r3, [r7, #20]
   return(result);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e3      	bne.n	8003878 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fd fb05 	bl	8000ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038c2:	e023      	b.n	800390c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_UART_IRQHandler+0x4f4>
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f93f 	bl	8003b60 <UART_Transmit_IT>
    return;
 80038e2:	e014      	b.n	800390e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <HAL_UART_IRQHandler+0x51e>
 80038f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f97e 	bl	8003bfe <UART_EndTransmit_IT>
    return;
 8003902:	e004      	b.n	800390e <HAL_UART_IRQHandler+0x51e>
    return;
 8003904:	bf00      	nop
 8003906:	e002      	b.n	800390e <HAL_UART_IRQHandler+0x51e>
      return;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <HAL_UART_IRQHandler+0x51e>
      return;
 800390c:	bf00      	nop
  }
}
 800390e:	37e8      	adds	r7, #232	@ 0xe8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b090      	sub	sp, #64	@ 0x40
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003936:	e050      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d04c      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x30>
 8003946:	f7fd ff1b 	bl	8001780 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003952:	429a      	cmp	r2, r3
 8003954:	d241      	bcs.n	80039da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003976:	637a      	str	r2, [r7, #52]	@ 0x34
 8003978:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800397c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	613b      	str	r3, [r7, #16]
   return(result);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039aa:	623a      	str	r2, [r7, #32]
 80039ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e5      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e00f      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d09f      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3740      	adds	r7, #64	@ 0x40
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2222      	movs	r2, #34	@ 0x22
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0220 	orr.w	r2, r2, #32
 8003a66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b095      	sub	sp, #84	@ 0x54
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e5      	bne.n	8003a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3314      	adds	r3, #20
 8003ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d119      	bne.n	8003b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f023 0310 	bic.w	r3, r3, #16
 8003b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b0c:	61ba      	str	r2, [r7, #24]
 8003b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6979      	ldr	r1, [r7, #20]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e5      	bne.n	8003aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b2e:	bf00      	nop
 8003b30:	3754      	adds	r7, #84	@ 0x54
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7ff fede 	bl	8003914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b21      	cmp	r3, #33	@ 0x21
 8003b72:	d13e      	bne.n	8003bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7c:	d114      	bne.n	8003ba8 <UART_Transmit_IT+0x48>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d110      	bne.n	8003ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]
 8003ba6:	e008      	b.n	8003bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	1c59      	adds	r1, r3, #1
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6211      	str	r1, [r2, #32]
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fa06 	bl	8001030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08c      	sub	sp, #48	@ 0x30
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b22      	cmp	r3, #34	@ 0x22
 8003c40:	f040 80ae 	bne.w	8003da0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4c:	d117      	bne.n	8003c7e <UART_Receive_IT+0x50>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c7c:	e026      	b.n	8003ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c90:	d007      	beq.n	8003ca2 <UART_Receive_IT+0x74>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <UART_Receive_IT+0x82>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e008      	b.n	8003cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d15d      	bne.n	8003d9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0220 	bic.w	r2, r2, #32
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d135      	bne.n	8003d92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f023 0310 	bic.w	r3, r3, #16
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4c:	623a      	str	r2, [r7, #32]
 8003d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	69f9      	ldr	r1, [r7, #28]
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d10a      	bne.n	8003d84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f89e 	bl	8000ecc <HAL_UARTEx_RxEventCallback>
 8003d90:	e002      	b.n	8003d98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd f844 	bl	8000e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e002      	b.n	8003da2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3730      	adds	r7, #48	@ 0x30
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003dec:	f023 030c 	bic.w	r3, r3, #12
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a57      	ldr	r2, [pc, #348]	@ (8003f74 <UART_SetConfig+0x1c8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <UART_SetConfig+0x78>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a56      	ldr	r2, [pc, #344]	@ (8003f78 <UART_SetConfig+0x1cc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7ff f938 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	e002      	b.n	8003e32 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7ff f912 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8003e30:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3a:	d14c      	bne.n	8003ed6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009a      	lsls	r2, r3, #2
 8003e46:	441a      	add	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	4a4a      	ldr	r2, [pc, #296]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	0119      	lsls	r1, r3, #4
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	441a      	add	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e72:	4b42      	ldr	r3, [pc, #264]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003e74:	fba3 0302 	umull	r0, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2064      	movs	r0, #100	@ 0x64
 8003e7c:	fb00 f303 	mul.w	r3, r0, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	3332      	adds	r3, #50	@ 0x32
 8003e86:	4a3d      	ldr	r2, [pc, #244]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e94:	4419      	add	r1, r3
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009a      	lsls	r2, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eac:	4b33      	ldr	r3, [pc, #204]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003eae:	fba3 0302 	umull	r0, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2064      	movs	r0, #100	@ 0x64
 8003eb6:	fb00 f303 	mul.w	r3, r0, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	3332      	adds	r3, #50	@ 0x32
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f003 0207 	and.w	r2, r3, #7
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed4:	e04a      	b.n	8003f6c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4a23      	ldr	r2, [pc, #140]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	0119      	lsls	r1, r3, #4
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009a      	lsls	r2, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2064      	movs	r0, #100	@ 0x64
 8003f16:	fb00 f303 	mul.w	r3, r0, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	3332      	adds	r3, #50	@ 0x32
 8003f20:	4a16      	ldr	r2, [pc, #88]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f2c:	4419      	add	r1, r3
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009a      	lsls	r2, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f44:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003f46:	fba3 0302 	umull	r0, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2064      	movs	r0, #100	@ 0x64
 8003f4e:	fb00 f303 	mul.w	r3, r0, r3
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	3332      	adds	r3, #50	@ 0x32
 8003f58:	4a08      	ldr	r2, [pc, #32]	@ (8003f7c <UART_SetConfig+0x1d0>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	440a      	add	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40011000 	.word	0x40011000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	51eb851f 	.word	0x51eb851f

08003f80 <__sflush_r>:
 8003f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	0716      	lsls	r6, r2, #28
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	d454      	bmi.n	8004038 <__sflush_r+0xb8>
 8003f8e:	684b      	ldr	r3, [r1, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dc02      	bgt.n	8003f9a <__sflush_r+0x1a>
 8003f94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dd48      	ble.n	800402c <__sflush_r+0xac>
 8003f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	d045      	beq.n	800402c <__sflush_r+0xac>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003fa6:	682f      	ldr	r7, [r5, #0]
 8003fa8:	6a21      	ldr	r1, [r4, #32]
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	d030      	beq.n	8004010 <__sflush_r+0x90>
 8003fae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	0759      	lsls	r1, r3, #29
 8003fb4:	d505      	bpl.n	8003fc2 <__sflush_r+0x42>
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	1ad2      	subs	r2, r2, r3
 8003fba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fbc:	b10b      	cbz	r3, 8003fc2 <__sflush_r+0x42>
 8003fbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fc0:	1ad2      	subs	r2, r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fc8:	6a21      	ldr	r1, [r4, #32]
 8003fca:	47b0      	blx	r6
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	d106      	bne.n	8003fe0 <__sflush_r+0x60>
 8003fd2:	6829      	ldr	r1, [r5, #0]
 8003fd4:	291d      	cmp	r1, #29
 8003fd6:	d82b      	bhi.n	8004030 <__sflush_r+0xb0>
 8003fd8:	4a28      	ldr	r2, [pc, #160]	@ (800407c <__sflush_r+0xfc>)
 8003fda:	410a      	asrs	r2, r1
 8003fdc:	07d6      	lsls	r6, r2, #31
 8003fde:	d427      	bmi.n	8004030 <__sflush_r+0xb0>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	6062      	str	r2, [r4, #4]
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	04d9      	lsls	r1, r3, #19
 8003fe8:	6022      	str	r2, [r4, #0]
 8003fea:	d504      	bpl.n	8003ff6 <__sflush_r+0x76>
 8003fec:	1c42      	adds	r2, r0, #1
 8003fee:	d101      	bne.n	8003ff4 <__sflush_r+0x74>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b903      	cbnz	r3, 8003ff6 <__sflush_r+0x76>
 8003ff4:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ff6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ff8:	602f      	str	r7, [r5, #0]
 8003ffa:	b1b9      	cbz	r1, 800402c <__sflush_r+0xac>
 8003ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004000:	4299      	cmp	r1, r3
 8004002:	d002      	beq.n	800400a <__sflush_r+0x8a>
 8004004:	4628      	mov	r0, r5
 8004006:	f000 fb13 	bl	8004630 <_free_r>
 800400a:	2300      	movs	r3, #0
 800400c:	6363      	str	r3, [r4, #52]	@ 0x34
 800400e:	e00d      	b.n	800402c <__sflush_r+0xac>
 8004010:	2301      	movs	r3, #1
 8004012:	4628      	mov	r0, r5
 8004014:	47b0      	blx	r6
 8004016:	4602      	mov	r2, r0
 8004018:	1c50      	adds	r0, r2, #1
 800401a:	d1c9      	bne.n	8003fb0 <__sflush_r+0x30>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0c6      	beq.n	8003fb0 <__sflush_r+0x30>
 8004022:	2b1d      	cmp	r3, #29
 8004024:	d001      	beq.n	800402a <__sflush_r+0xaa>
 8004026:	2b16      	cmp	r3, #22
 8004028:	d11d      	bne.n	8004066 <__sflush_r+0xe6>
 800402a:	602f      	str	r7, [r5, #0]
 800402c:	2000      	movs	r0, #0
 800402e:	e021      	b.n	8004074 <__sflush_r+0xf4>
 8004030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004034:	b21b      	sxth	r3, r3
 8004036:	e01a      	b.n	800406e <__sflush_r+0xee>
 8004038:	690f      	ldr	r7, [r1, #16]
 800403a:	2f00      	cmp	r7, #0
 800403c:	d0f6      	beq.n	800402c <__sflush_r+0xac>
 800403e:	0793      	lsls	r3, r2, #30
 8004040:	bf18      	it	ne
 8004042:	2300      	movne	r3, #0
 8004044:	680e      	ldr	r6, [r1, #0]
 8004046:	bf08      	it	eq
 8004048:	694b      	ldreq	r3, [r1, #20]
 800404a:	1bf6      	subs	r6, r6, r7
 800404c:	600f      	str	r7, [r1, #0]
 800404e:	608b      	str	r3, [r1, #8]
 8004050:	2e00      	cmp	r6, #0
 8004052:	ddeb      	ble.n	800402c <__sflush_r+0xac>
 8004054:	4633      	mov	r3, r6
 8004056:	463a      	mov	r2, r7
 8004058:	4628      	mov	r0, r5
 800405a:	6a21      	ldr	r1, [r4, #32]
 800405c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004060:	47e0      	blx	ip
 8004062:	2800      	cmp	r0, #0
 8004064:	dc07      	bgt.n	8004076 <__sflush_r+0xf6>
 8004066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800406e:	f04f 30ff 	mov.w	r0, #4294967295
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004076:	4407      	add	r7, r0
 8004078:	1a36      	subs	r6, r6, r0
 800407a:	e7e9      	b.n	8004050 <__sflush_r+0xd0>
 800407c:	dfbffffe 	.word	0xdfbffffe

08004080 <_fflush_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	690b      	ldr	r3, [r1, #16]
 8004084:	4605      	mov	r5, r0
 8004086:	460c      	mov	r4, r1
 8004088:	b913      	cbnz	r3, 8004090 <_fflush_r+0x10>
 800408a:	2500      	movs	r5, #0
 800408c:	4628      	mov	r0, r5
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	b118      	cbz	r0, 800409a <_fflush_r+0x1a>
 8004092:	6a03      	ldr	r3, [r0, #32]
 8004094:	b90b      	cbnz	r3, 800409a <_fflush_r+0x1a>
 8004096:	f000 f8bb 	bl	8004210 <__sinit>
 800409a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f3      	beq.n	800408a <_fflush_r+0xa>
 80040a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040a4:	07d0      	lsls	r0, r2, #31
 80040a6:	d404      	bmi.n	80040b2 <_fflush_r+0x32>
 80040a8:	0599      	lsls	r1, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_fflush_r+0x32>
 80040ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ae:	f000 faae 	bl	800460e <__retarget_lock_acquire_recursive>
 80040b2:	4628      	mov	r0, r5
 80040b4:	4621      	mov	r1, r4
 80040b6:	f7ff ff63 	bl	8003f80 <__sflush_r>
 80040ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040bc:	4605      	mov	r5, r0
 80040be:	07da      	lsls	r2, r3, #31
 80040c0:	d4e4      	bmi.n	800408c <_fflush_r+0xc>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	059b      	lsls	r3, r3, #22
 80040c6:	d4e1      	bmi.n	800408c <_fflush_r+0xc>
 80040c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ca:	f000 faa1 	bl	8004610 <__retarget_lock_release_recursive>
 80040ce:	e7dd      	b.n	800408c <_fflush_r+0xc>

080040d0 <fflush>:
 80040d0:	4601      	mov	r1, r0
 80040d2:	b920      	cbnz	r0, 80040de <fflush+0xe>
 80040d4:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <fflush+0x18>)
 80040d6:	4905      	ldr	r1, [pc, #20]	@ (80040ec <fflush+0x1c>)
 80040d8:	4805      	ldr	r0, [pc, #20]	@ (80040f0 <fflush+0x20>)
 80040da:	f000 b8b1 	b.w	8004240 <_fwalk_sglue>
 80040de:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <fflush+0x24>)
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f7ff bfcd 	b.w	8004080 <_fflush_r>
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c
 80040ec:	08004081 	.word	0x08004081
 80040f0:	2000001c 	.word	0x2000001c
 80040f4:	20000018 	.word	0x20000018

080040f8 <std>:
 80040f8:	2300      	movs	r3, #0
 80040fa:	b510      	push	{r4, lr}
 80040fc:	4604      	mov	r4, r0
 80040fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004106:	6083      	str	r3, [r0, #8]
 8004108:	8181      	strh	r1, [r0, #12]
 800410a:	6643      	str	r3, [r0, #100]	@ 0x64
 800410c:	81c2      	strh	r2, [r0, #14]
 800410e:	6183      	str	r3, [r0, #24]
 8004110:	4619      	mov	r1, r3
 8004112:	2208      	movs	r2, #8
 8004114:	305c      	adds	r0, #92	@ 0x5c
 8004116:	f000 fa01 	bl	800451c <memset>
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <std+0x58>)
 800411c:	6224      	str	r4, [r4, #32]
 800411e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <std+0x5c>)
 8004122:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <std+0x60>)
 8004126:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <std+0x64>)
 800412a:	6323      	str	r3, [r4, #48]	@ 0x30
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <std+0x68>)
 800412e:	429c      	cmp	r4, r3
 8004130:	d006      	beq.n	8004140 <std+0x48>
 8004132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004136:	4294      	cmp	r4, r2
 8004138:	d002      	beq.n	8004140 <std+0x48>
 800413a:	33d0      	adds	r3, #208	@ 0xd0
 800413c:	429c      	cmp	r4, r3
 800413e:	d105      	bne.n	800414c <std+0x54>
 8004140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004148:	f000 ba60 	b.w	800460c <__retarget_lock_init_recursive>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	bf00      	nop
 8004150:	0800436d 	.word	0x0800436d
 8004154:	0800438f 	.word	0x0800438f
 8004158:	080043c7 	.word	0x080043c7
 800415c:	080043eb 	.word	0x080043eb
 8004160:	20004380 	.word	0x20004380

08004164 <stdio_exit_handler>:
 8004164:	4a02      	ldr	r2, [pc, #8]	@ (8004170 <stdio_exit_handler+0xc>)
 8004166:	4903      	ldr	r1, [pc, #12]	@ (8004174 <stdio_exit_handler+0x10>)
 8004168:	4803      	ldr	r0, [pc, #12]	@ (8004178 <stdio_exit_handler+0x14>)
 800416a:	f000 b869 	b.w	8004240 <_fwalk_sglue>
 800416e:	bf00      	nop
 8004170:	2000000c 	.word	0x2000000c
 8004174:	08004081 	.word	0x08004081
 8004178:	2000001c 	.word	0x2000001c

0800417c <cleanup_stdio>:
 800417c:	6841      	ldr	r1, [r0, #4]
 800417e:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <cleanup_stdio+0x34>)
 8004180:	b510      	push	{r4, lr}
 8004182:	4299      	cmp	r1, r3
 8004184:	4604      	mov	r4, r0
 8004186:	d001      	beq.n	800418c <cleanup_stdio+0x10>
 8004188:	f7ff ff7a 	bl	8004080 <_fflush_r>
 800418c:	68a1      	ldr	r1, [r4, #8]
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <cleanup_stdio+0x38>)
 8004190:	4299      	cmp	r1, r3
 8004192:	d002      	beq.n	800419a <cleanup_stdio+0x1e>
 8004194:	4620      	mov	r0, r4
 8004196:	f7ff ff73 	bl	8004080 <_fflush_r>
 800419a:	68e1      	ldr	r1, [r4, #12]
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <cleanup_stdio+0x3c>)
 800419e:	4299      	cmp	r1, r3
 80041a0:	d004      	beq.n	80041ac <cleanup_stdio+0x30>
 80041a2:	4620      	mov	r0, r4
 80041a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a8:	f7ff bf6a 	b.w	8004080 <_fflush_r>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	bf00      	nop
 80041b0:	20004380 	.word	0x20004380
 80041b4:	200043e8 	.word	0x200043e8
 80041b8:	20004450 	.word	0x20004450

080041bc <global_stdio_init.part.0>:
 80041bc:	b510      	push	{r4, lr}
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <global_stdio_init.part.0+0x30>)
 80041c0:	4c0b      	ldr	r4, [pc, #44]	@ (80041f0 <global_stdio_init.part.0+0x34>)
 80041c2:	4a0c      	ldr	r2, [pc, #48]	@ (80041f4 <global_stdio_init.part.0+0x38>)
 80041c4:	4620      	mov	r0, r4
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	2104      	movs	r1, #4
 80041ca:	2200      	movs	r2, #0
 80041cc:	f7ff ff94 	bl	80040f8 <std>
 80041d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041d4:	2201      	movs	r2, #1
 80041d6:	2109      	movs	r1, #9
 80041d8:	f7ff ff8e 	bl	80040f8 <std>
 80041dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041e0:	2202      	movs	r2, #2
 80041e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e6:	2112      	movs	r1, #18
 80041e8:	f7ff bf86 	b.w	80040f8 <std>
 80041ec:	200044b8 	.word	0x200044b8
 80041f0:	20004380 	.word	0x20004380
 80041f4:	08004165 	.word	0x08004165

080041f8 <__sfp_lock_acquire>:
 80041f8:	4801      	ldr	r0, [pc, #4]	@ (8004200 <__sfp_lock_acquire+0x8>)
 80041fa:	f000 ba08 	b.w	800460e <__retarget_lock_acquire_recursive>
 80041fe:	bf00      	nop
 8004200:	200044c1 	.word	0x200044c1

08004204 <__sfp_lock_release>:
 8004204:	4801      	ldr	r0, [pc, #4]	@ (800420c <__sfp_lock_release+0x8>)
 8004206:	f000 ba03 	b.w	8004610 <__retarget_lock_release_recursive>
 800420a:	bf00      	nop
 800420c:	200044c1 	.word	0x200044c1

08004210 <__sinit>:
 8004210:	b510      	push	{r4, lr}
 8004212:	4604      	mov	r4, r0
 8004214:	f7ff fff0 	bl	80041f8 <__sfp_lock_acquire>
 8004218:	6a23      	ldr	r3, [r4, #32]
 800421a:	b11b      	cbz	r3, 8004224 <__sinit+0x14>
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004220:	f7ff bff0 	b.w	8004204 <__sfp_lock_release>
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <__sinit+0x28>)
 8004226:	6223      	str	r3, [r4, #32]
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <__sinit+0x2c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f5      	bne.n	800421c <__sinit+0xc>
 8004230:	f7ff ffc4 	bl	80041bc <global_stdio_init.part.0>
 8004234:	e7f2      	b.n	800421c <__sinit+0xc>
 8004236:	bf00      	nop
 8004238:	0800417d 	.word	0x0800417d
 800423c:	200044b8 	.word	0x200044b8

08004240 <_fwalk_sglue>:
 8004240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004244:	4607      	mov	r7, r0
 8004246:	4688      	mov	r8, r1
 8004248:	4614      	mov	r4, r2
 800424a:	2600      	movs	r6, #0
 800424c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004250:	f1b9 0901 	subs.w	r9, r9, #1
 8004254:	d505      	bpl.n	8004262 <_fwalk_sglue+0x22>
 8004256:	6824      	ldr	r4, [r4, #0]
 8004258:	2c00      	cmp	r4, #0
 800425a:	d1f7      	bne.n	800424c <_fwalk_sglue+0xc>
 800425c:	4630      	mov	r0, r6
 800425e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004262:	89ab      	ldrh	r3, [r5, #12]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d907      	bls.n	8004278 <_fwalk_sglue+0x38>
 8004268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800426c:	3301      	adds	r3, #1
 800426e:	d003      	beq.n	8004278 <_fwalk_sglue+0x38>
 8004270:	4629      	mov	r1, r5
 8004272:	4638      	mov	r0, r7
 8004274:	47c0      	blx	r8
 8004276:	4306      	orrs	r6, r0
 8004278:	3568      	adds	r5, #104	@ 0x68
 800427a:	e7e9      	b.n	8004250 <_fwalk_sglue+0x10>

0800427c <iprintf>:
 800427c:	b40f      	push	{r0, r1, r2, r3}
 800427e:	b507      	push	{r0, r1, r2, lr}
 8004280:	4906      	ldr	r1, [pc, #24]	@ (800429c <iprintf+0x20>)
 8004282:	ab04      	add	r3, sp, #16
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	f853 2b04 	ldr.w	r2, [r3], #4
 800428a:	6881      	ldr	r1, [r0, #8]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	f000 faed 	bl	800486c <_vfiprintf_r>
 8004292:	b003      	add	sp, #12
 8004294:	f85d eb04 	ldr.w	lr, [sp], #4
 8004298:	b004      	add	sp, #16
 800429a:	4770      	bx	lr
 800429c:	20000018 	.word	0x20000018

080042a0 <putchar>:
 80042a0:	4b02      	ldr	r3, [pc, #8]	@ (80042ac <putchar+0xc>)
 80042a2:	4601      	mov	r1, r0
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	6882      	ldr	r2, [r0, #8]
 80042a8:	f000 bdeb 	b.w	8004e82 <_putc_r>
 80042ac:	20000018 	.word	0x20000018

080042b0 <_puts_r>:
 80042b0:	6a03      	ldr	r3, [r0, #32]
 80042b2:	b570      	push	{r4, r5, r6, lr}
 80042b4:	4605      	mov	r5, r0
 80042b6:	460e      	mov	r6, r1
 80042b8:	6884      	ldr	r4, [r0, #8]
 80042ba:	b90b      	cbnz	r3, 80042c0 <_puts_r+0x10>
 80042bc:	f7ff ffa8 	bl	8004210 <__sinit>
 80042c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042c2:	07db      	lsls	r3, r3, #31
 80042c4:	d405      	bmi.n	80042d2 <_puts_r+0x22>
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	0598      	lsls	r0, r3, #22
 80042ca:	d402      	bmi.n	80042d2 <_puts_r+0x22>
 80042cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ce:	f000 f99e 	bl	800460e <__retarget_lock_acquire_recursive>
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	0719      	lsls	r1, r3, #28
 80042d6:	d502      	bpl.n	80042de <_puts_r+0x2e>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d135      	bne.n	800434a <_puts_r+0x9a>
 80042de:	4621      	mov	r1, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 f8c5 	bl	8004470 <__swsetup_r>
 80042e6:	b380      	cbz	r0, 800434a <_puts_r+0x9a>
 80042e8:	f04f 35ff 	mov.w	r5, #4294967295
 80042ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ee:	07da      	lsls	r2, r3, #31
 80042f0:	d405      	bmi.n	80042fe <_puts_r+0x4e>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	059b      	lsls	r3, r3, #22
 80042f6:	d402      	bmi.n	80042fe <_puts_r+0x4e>
 80042f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042fa:	f000 f989 	bl	8004610 <__retarget_lock_release_recursive>
 80042fe:	4628      	mov	r0, r5
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	2b00      	cmp	r3, #0
 8004304:	da04      	bge.n	8004310 <_puts_r+0x60>
 8004306:	69a2      	ldr	r2, [r4, #24]
 8004308:	429a      	cmp	r2, r3
 800430a:	dc17      	bgt.n	800433c <_puts_r+0x8c>
 800430c:	290a      	cmp	r1, #10
 800430e:	d015      	beq.n	800433c <_puts_r+0x8c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	6022      	str	r2, [r4, #0]
 8004316:	7019      	strb	r1, [r3, #0]
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800431e:	3b01      	subs	r3, #1
 8004320:	60a3      	str	r3, [r4, #8]
 8004322:	2900      	cmp	r1, #0
 8004324:	d1ed      	bne.n	8004302 <_puts_r+0x52>
 8004326:	2b00      	cmp	r3, #0
 8004328:	da11      	bge.n	800434e <_puts_r+0x9e>
 800432a:	4622      	mov	r2, r4
 800432c:	210a      	movs	r1, #10
 800432e:	4628      	mov	r0, r5
 8004330:	f000 f85f 	bl	80043f2 <__swbuf_r>
 8004334:	3001      	adds	r0, #1
 8004336:	d0d7      	beq.n	80042e8 <_puts_r+0x38>
 8004338:	250a      	movs	r5, #10
 800433a:	e7d7      	b.n	80042ec <_puts_r+0x3c>
 800433c:	4622      	mov	r2, r4
 800433e:	4628      	mov	r0, r5
 8004340:	f000 f857 	bl	80043f2 <__swbuf_r>
 8004344:	3001      	adds	r0, #1
 8004346:	d1e7      	bne.n	8004318 <_puts_r+0x68>
 8004348:	e7ce      	b.n	80042e8 <_puts_r+0x38>
 800434a:	3e01      	subs	r6, #1
 800434c:	e7e4      	b.n	8004318 <_puts_r+0x68>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	6022      	str	r2, [r4, #0]
 8004354:	220a      	movs	r2, #10
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e7ee      	b.n	8004338 <_puts_r+0x88>
	...

0800435c <puts>:
 800435c:	4b02      	ldr	r3, [pc, #8]	@ (8004368 <puts+0xc>)
 800435e:	4601      	mov	r1, r0
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f7ff bfa5 	b.w	80042b0 <_puts_r>
 8004366:	bf00      	nop
 8004368:	20000018 	.word	0x20000018

0800436c <__sread>:
 800436c:	b510      	push	{r4, lr}
 800436e:	460c      	mov	r4, r1
 8004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004374:	f000 f8fc 	bl	8004570 <_read_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	bfab      	itete	ge
 800437c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800437e:	89a3      	ldrhlt	r3, [r4, #12]
 8004380:	181b      	addge	r3, r3, r0
 8004382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004386:	bfac      	ite	ge
 8004388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800438a:	81a3      	strhlt	r3, [r4, #12]
 800438c:	bd10      	pop	{r4, pc}

0800438e <__swrite>:
 800438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	461f      	mov	r7, r3
 8004394:	898b      	ldrh	r3, [r1, #12]
 8004396:	4605      	mov	r5, r0
 8004398:	05db      	lsls	r3, r3, #23
 800439a:	460c      	mov	r4, r1
 800439c:	4616      	mov	r6, r2
 800439e:	d505      	bpl.n	80043ac <__swrite+0x1e>
 80043a0:	2302      	movs	r3, #2
 80043a2:	2200      	movs	r2, #0
 80043a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a8:	f000 f8d0 	bl	800454c <_lseek_r>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	4632      	mov	r2, r6
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	4628      	mov	r0, r5
 80043b8:	463b      	mov	r3, r7
 80043ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	f000 b8e7 	b.w	8004594 <_write_r>

080043c6 <__sseek>:
 80043c6:	b510      	push	{r4, lr}
 80043c8:	460c      	mov	r4, r1
 80043ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ce:	f000 f8bd 	bl	800454c <_lseek_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	bf15      	itete	ne
 80043d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043e2:	81a3      	strheq	r3, [r4, #12]
 80043e4:	bf18      	it	ne
 80043e6:	81a3      	strhne	r3, [r4, #12]
 80043e8:	bd10      	pop	{r4, pc}

080043ea <__sclose>:
 80043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ee:	f000 b89d 	b.w	800452c <_close_r>

080043f2 <__swbuf_r>:
 80043f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f4:	460e      	mov	r6, r1
 80043f6:	4614      	mov	r4, r2
 80043f8:	4605      	mov	r5, r0
 80043fa:	b118      	cbz	r0, 8004404 <__swbuf_r+0x12>
 80043fc:	6a03      	ldr	r3, [r0, #32]
 80043fe:	b90b      	cbnz	r3, 8004404 <__swbuf_r+0x12>
 8004400:	f7ff ff06 	bl	8004210 <__sinit>
 8004404:	69a3      	ldr	r3, [r4, #24]
 8004406:	60a3      	str	r3, [r4, #8]
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	071a      	lsls	r2, r3, #28
 800440c:	d501      	bpl.n	8004412 <__swbuf_r+0x20>
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	b943      	cbnz	r3, 8004424 <__swbuf_r+0x32>
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f82b 	bl	8004470 <__swsetup_r>
 800441a:	b118      	cbz	r0, 8004424 <__swbuf_r+0x32>
 800441c:	f04f 37ff 	mov.w	r7, #4294967295
 8004420:	4638      	mov	r0, r7
 8004422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	6922      	ldr	r2, [r4, #16]
 8004428:	b2f6      	uxtb	r6, r6
 800442a:	1a98      	subs	r0, r3, r2
 800442c:	6963      	ldr	r3, [r4, #20]
 800442e:	4637      	mov	r7, r6
 8004430:	4283      	cmp	r3, r0
 8004432:	dc05      	bgt.n	8004440 <__swbuf_r+0x4e>
 8004434:	4621      	mov	r1, r4
 8004436:	4628      	mov	r0, r5
 8004438:	f7ff fe22 	bl	8004080 <_fflush_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	d1ed      	bne.n	800441c <__swbuf_r+0x2a>
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	3b01      	subs	r3, #1
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	6022      	str	r2, [r4, #0]
 800444c:	701e      	strb	r6, [r3, #0]
 800444e:	6962      	ldr	r2, [r4, #20]
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	429a      	cmp	r2, r3
 8004454:	d004      	beq.n	8004460 <__swbuf_r+0x6e>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	07db      	lsls	r3, r3, #31
 800445a:	d5e1      	bpl.n	8004420 <__swbuf_r+0x2e>
 800445c:	2e0a      	cmp	r6, #10
 800445e:	d1df      	bne.n	8004420 <__swbuf_r+0x2e>
 8004460:	4621      	mov	r1, r4
 8004462:	4628      	mov	r0, r5
 8004464:	f7ff fe0c 	bl	8004080 <_fflush_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	d0d9      	beq.n	8004420 <__swbuf_r+0x2e>
 800446c:	e7d6      	b.n	800441c <__swbuf_r+0x2a>
	...

08004470 <__swsetup_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4b29      	ldr	r3, [pc, #164]	@ (8004518 <__swsetup_r+0xa8>)
 8004474:	4605      	mov	r5, r0
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	460c      	mov	r4, r1
 800447a:	b118      	cbz	r0, 8004484 <__swsetup_r+0x14>
 800447c:	6a03      	ldr	r3, [r0, #32]
 800447e:	b90b      	cbnz	r3, 8004484 <__swsetup_r+0x14>
 8004480:	f7ff fec6 	bl	8004210 <__sinit>
 8004484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004488:	0719      	lsls	r1, r3, #28
 800448a:	d422      	bmi.n	80044d2 <__swsetup_r+0x62>
 800448c:	06da      	lsls	r2, r3, #27
 800448e:	d407      	bmi.n	80044a0 <__swsetup_r+0x30>
 8004490:	2209      	movs	r2, #9
 8004492:	602a      	str	r2, [r5, #0]
 8004494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	e033      	b.n	8004508 <__swsetup_r+0x98>
 80044a0:	0758      	lsls	r0, r3, #29
 80044a2:	d512      	bpl.n	80044ca <__swsetup_r+0x5a>
 80044a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044a6:	b141      	cbz	r1, 80044ba <__swsetup_r+0x4a>
 80044a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044ac:	4299      	cmp	r1, r3
 80044ae:	d002      	beq.n	80044b6 <__swsetup_r+0x46>
 80044b0:	4628      	mov	r0, r5
 80044b2:	f000 f8bd 	bl	8004630 <_free_r>
 80044b6:	2300      	movs	r3, #0
 80044b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044c0:	81a3      	strh	r3, [r4, #12]
 80044c2:	2300      	movs	r3, #0
 80044c4:	6063      	str	r3, [r4, #4]
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f043 0308 	orr.w	r3, r3, #8
 80044d0:	81a3      	strh	r3, [r4, #12]
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	b94b      	cbnz	r3, 80044ea <__swsetup_r+0x7a>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e0:	d003      	beq.n	80044ea <__swsetup_r+0x7a>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 fc90 	bl	8004e0a <__smakebuf_r>
 80044ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ee:	f013 0201 	ands.w	r2, r3, #1
 80044f2:	d00a      	beq.n	800450a <__swsetup_r+0x9a>
 80044f4:	2200      	movs	r2, #0
 80044f6:	60a2      	str	r2, [r4, #8]
 80044f8:	6962      	ldr	r2, [r4, #20]
 80044fa:	4252      	negs	r2, r2
 80044fc:	61a2      	str	r2, [r4, #24]
 80044fe:	6922      	ldr	r2, [r4, #16]
 8004500:	b942      	cbnz	r2, 8004514 <__swsetup_r+0xa4>
 8004502:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004506:	d1c5      	bne.n	8004494 <__swsetup_r+0x24>
 8004508:	bd38      	pop	{r3, r4, r5, pc}
 800450a:	0799      	lsls	r1, r3, #30
 800450c:	bf58      	it	pl
 800450e:	6962      	ldrpl	r2, [r4, #20]
 8004510:	60a2      	str	r2, [r4, #8]
 8004512:	e7f4      	b.n	80044fe <__swsetup_r+0x8e>
 8004514:	2000      	movs	r0, #0
 8004516:	e7f7      	b.n	8004508 <__swsetup_r+0x98>
 8004518:	20000018 	.word	0x20000018

0800451c <memset>:
 800451c:	4603      	mov	r3, r0
 800451e:	4402      	add	r2, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <_close_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	2300      	movs	r3, #0
 8004530:	4d05      	ldr	r5, [pc, #20]	@ (8004548 <_close_r+0x1c>)
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fd f827 	bl	800158a <_close>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_close_r+0x1a>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_close_r+0x1a>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	200044bc 	.word	0x200044bc

0800454c <_lseek_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	2200      	movs	r2, #0
 8004556:	4d05      	ldr	r5, [pc, #20]	@ (800456c <_lseek_r+0x20>)
 8004558:	602a      	str	r2, [r5, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f7fd f839 	bl	80015d2 <_lseek>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_lseek_r+0x1e>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_lseek_r+0x1e>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	200044bc 	.word	0x200044bc

08004570 <_read_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	2200      	movs	r2, #0
 800457a:	4d05      	ldr	r5, [pc, #20]	@ (8004590 <_read_r+0x20>)
 800457c:	602a      	str	r2, [r5, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	f7fc ffca 	bl	8001518 <_read>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_read_r+0x1e>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_read_r+0x1e>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	200044bc 	.word	0x200044bc

08004594 <_write_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	2200      	movs	r2, #0
 800459e:	4d05      	ldr	r5, [pc, #20]	@ (80045b4 <_write_r+0x20>)
 80045a0:	602a      	str	r2, [r5, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f7fc ffd5 	bl	8001552 <_write>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_write_r+0x1e>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_write_r+0x1e>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	200044bc 	.word	0x200044bc

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	@ (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000018 	.word	0x20000018

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	2600      	movs	r6, #0
 80045c8:	4d0c      	ldr	r5, [pc, #48]	@ (80045fc <__libc_init_array+0x38>)
 80045ca:	4c0d      	ldr	r4, [pc, #52]	@ (8004600 <__libc_init_array+0x3c>)
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	f000 fcca 	bl	8004f6c <_init>
 80045d8:	2600      	movs	r6, #0
 80045da:	4d0a      	ldr	r5, [pc, #40]	@ (8004604 <__libc_init_array+0x40>)
 80045dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004608 <__libc_init_array+0x44>)
 80045de:	1b64      	subs	r4, r4, r5
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	0800520c 	.word	0x0800520c
 8004600:	0800520c 	.word	0x0800520c
 8004604:	0800520c 	.word	0x0800520c
 8004608:	08005210 	.word	0x08005210

0800460c <__retarget_lock_init_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_acquire_recursive>:
 800460e:	4770      	bx	lr

08004610 <__retarget_lock_release_recursive>:
 8004610:	4770      	bx	lr

08004612 <memcpy>:
 8004612:	440a      	add	r2, r1
 8004614:	4291      	cmp	r1, r2
 8004616:	f100 33ff 	add.w	r3, r0, #4294967295
 800461a:	d100      	bne.n	800461e <memcpy+0xc>
 800461c:	4770      	bx	lr
 800461e:	b510      	push	{r4, lr}
 8004620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004624:	4291      	cmp	r1, r2
 8004626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800462a:	d1f9      	bne.n	8004620 <memcpy+0xe>
 800462c:	bd10      	pop	{r4, pc}
	...

08004630 <_free_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4605      	mov	r5, r0
 8004634:	2900      	cmp	r1, #0
 8004636:	d040      	beq.n	80046ba <_free_r+0x8a>
 8004638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463c:	1f0c      	subs	r4, r1, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	bfb8      	it	lt
 8004642:	18e4      	addlt	r4, r4, r3
 8004644:	f000 f8de 	bl	8004804 <__malloc_lock>
 8004648:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <_free_r+0x8c>)
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	b933      	cbnz	r3, 800465c <_free_r+0x2c>
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	6014      	str	r4, [r2, #0]
 8004652:	4628      	mov	r0, r5
 8004654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004658:	f000 b8da 	b.w	8004810 <__malloc_unlock>
 800465c:	42a3      	cmp	r3, r4
 800465e:	d908      	bls.n	8004672 <_free_r+0x42>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428b      	cmp	r3, r1
 8004666:	bf01      	itttt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	1809      	addeq	r1, r1, r0
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	e7ed      	b.n	800464e <_free_r+0x1e>
 8004672:	461a      	mov	r2, r3
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b10b      	cbz	r3, 800467c <_free_r+0x4c>
 8004678:	42a3      	cmp	r3, r4
 800467a:	d9fa      	bls.n	8004672 <_free_r+0x42>
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	1850      	adds	r0, r2, r1
 8004680:	42a0      	cmp	r0, r4
 8004682:	d10b      	bne.n	800469c <_free_r+0x6c>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	4401      	add	r1, r0
 8004688:	1850      	adds	r0, r2, r1
 800468a:	4283      	cmp	r3, r0
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	d1e0      	bne.n	8004652 <_free_r+0x22>
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4408      	add	r0, r1
 8004696:	6010      	str	r0, [r2, #0]
 8004698:	6053      	str	r3, [r2, #4]
 800469a:	e7da      	b.n	8004652 <_free_r+0x22>
 800469c:	d902      	bls.n	80046a4 <_free_r+0x74>
 800469e:	230c      	movs	r3, #12
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	e7d6      	b.n	8004652 <_free_r+0x22>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	1821      	adds	r1, r4, r0
 80046a8:	428b      	cmp	r3, r1
 80046aa:	bf01      	itttt	eq
 80046ac:	6819      	ldreq	r1, [r3, #0]
 80046ae:	685b      	ldreq	r3, [r3, #4]
 80046b0:	1809      	addeq	r1, r1, r0
 80046b2:	6021      	streq	r1, [r4, #0]
 80046b4:	6063      	str	r3, [r4, #4]
 80046b6:	6054      	str	r4, [r2, #4]
 80046b8:	e7cb      	b.n	8004652 <_free_r+0x22>
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	200044c8 	.word	0x200044c8

080046c0 <sbrk_aligned>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4e0f      	ldr	r6, [pc, #60]	@ (8004700 <sbrk_aligned+0x40>)
 80046c4:	460c      	mov	r4, r1
 80046c6:	6831      	ldr	r1, [r6, #0]
 80046c8:	4605      	mov	r5, r0
 80046ca:	b911      	cbnz	r1, 80046d2 <sbrk_aligned+0x12>
 80046cc:	f000 fc30 	bl	8004f30 <_sbrk_r>
 80046d0:	6030      	str	r0, [r6, #0]
 80046d2:	4621      	mov	r1, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 fc2b 	bl	8004f30 <_sbrk_r>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	d103      	bne.n	80046e6 <sbrk_aligned+0x26>
 80046de:	f04f 34ff 	mov.w	r4, #4294967295
 80046e2:	4620      	mov	r0, r4
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	1cc4      	adds	r4, r0, #3
 80046e8:	f024 0403 	bic.w	r4, r4, #3
 80046ec:	42a0      	cmp	r0, r4
 80046ee:	d0f8      	beq.n	80046e2 <sbrk_aligned+0x22>
 80046f0:	1a21      	subs	r1, r4, r0
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 fc1c 	bl	8004f30 <_sbrk_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d1f2      	bne.n	80046e2 <sbrk_aligned+0x22>
 80046fc:	e7ef      	b.n	80046de <sbrk_aligned+0x1e>
 80046fe:	bf00      	nop
 8004700:	200044c4 	.word	0x200044c4

08004704 <_malloc_r>:
 8004704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004708:	1ccd      	adds	r5, r1, #3
 800470a:	f025 0503 	bic.w	r5, r5, #3
 800470e:	3508      	adds	r5, #8
 8004710:	2d0c      	cmp	r5, #12
 8004712:	bf38      	it	cc
 8004714:	250c      	movcc	r5, #12
 8004716:	2d00      	cmp	r5, #0
 8004718:	4606      	mov	r6, r0
 800471a:	db01      	blt.n	8004720 <_malloc_r+0x1c>
 800471c:	42a9      	cmp	r1, r5
 800471e:	d904      	bls.n	800472a <_malloc_r+0x26>
 8004720:	230c      	movs	r3, #12
 8004722:	6033      	str	r3, [r6, #0]
 8004724:	2000      	movs	r0, #0
 8004726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800472a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004800 <_malloc_r+0xfc>
 800472e:	f000 f869 	bl	8004804 <__malloc_lock>
 8004732:	f8d8 3000 	ldr.w	r3, [r8]
 8004736:	461c      	mov	r4, r3
 8004738:	bb44      	cbnz	r4, 800478c <_malloc_r+0x88>
 800473a:	4629      	mov	r1, r5
 800473c:	4630      	mov	r0, r6
 800473e:	f7ff ffbf 	bl	80046c0 <sbrk_aligned>
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	4604      	mov	r4, r0
 8004746:	d158      	bne.n	80047fa <_malloc_r+0xf6>
 8004748:	f8d8 4000 	ldr.w	r4, [r8]
 800474c:	4627      	mov	r7, r4
 800474e:	2f00      	cmp	r7, #0
 8004750:	d143      	bne.n	80047da <_malloc_r+0xd6>
 8004752:	2c00      	cmp	r4, #0
 8004754:	d04b      	beq.n	80047ee <_malloc_r+0xea>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	4639      	mov	r1, r7
 800475a:	4630      	mov	r0, r6
 800475c:	eb04 0903 	add.w	r9, r4, r3
 8004760:	f000 fbe6 	bl	8004f30 <_sbrk_r>
 8004764:	4581      	cmp	r9, r0
 8004766:	d142      	bne.n	80047ee <_malloc_r+0xea>
 8004768:	6821      	ldr	r1, [r4, #0]
 800476a:	4630      	mov	r0, r6
 800476c:	1a6d      	subs	r5, r5, r1
 800476e:	4629      	mov	r1, r5
 8004770:	f7ff ffa6 	bl	80046c0 <sbrk_aligned>
 8004774:	3001      	adds	r0, #1
 8004776:	d03a      	beq.n	80047ee <_malloc_r+0xea>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	442b      	add	r3, r5
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	f8d8 3000 	ldr.w	r3, [r8]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	bb62      	cbnz	r2, 80047e0 <_malloc_r+0xdc>
 8004786:	f8c8 7000 	str.w	r7, [r8]
 800478a:	e00f      	b.n	80047ac <_malloc_r+0xa8>
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	1b52      	subs	r2, r2, r5
 8004790:	d420      	bmi.n	80047d4 <_malloc_r+0xd0>
 8004792:	2a0b      	cmp	r2, #11
 8004794:	d917      	bls.n	80047c6 <_malloc_r+0xc2>
 8004796:	1961      	adds	r1, r4, r5
 8004798:	42a3      	cmp	r3, r4
 800479a:	6025      	str	r5, [r4, #0]
 800479c:	bf18      	it	ne
 800479e:	6059      	strne	r1, [r3, #4]
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	bf08      	it	eq
 80047a4:	f8c8 1000 	streq.w	r1, [r8]
 80047a8:	5162      	str	r2, [r4, r5]
 80047aa:	604b      	str	r3, [r1, #4]
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 f82f 	bl	8004810 <__malloc_unlock>
 80047b2:	f104 000b 	add.w	r0, r4, #11
 80047b6:	1d23      	adds	r3, r4, #4
 80047b8:	f020 0007 	bic.w	r0, r0, #7
 80047bc:	1ac2      	subs	r2, r0, r3
 80047be:	bf1c      	itt	ne
 80047c0:	1a1b      	subne	r3, r3, r0
 80047c2:	50a3      	strne	r3, [r4, r2]
 80047c4:	e7af      	b.n	8004726 <_malloc_r+0x22>
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	bf0c      	ite	eq
 80047cc:	f8c8 2000 	streq.w	r2, [r8]
 80047d0:	605a      	strne	r2, [r3, #4]
 80047d2:	e7eb      	b.n	80047ac <_malloc_r+0xa8>
 80047d4:	4623      	mov	r3, r4
 80047d6:	6864      	ldr	r4, [r4, #4]
 80047d8:	e7ae      	b.n	8004738 <_malloc_r+0x34>
 80047da:	463c      	mov	r4, r7
 80047dc:	687f      	ldr	r7, [r7, #4]
 80047de:	e7b6      	b.n	800474e <_malloc_r+0x4a>
 80047e0:	461a      	mov	r2, r3
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d1fb      	bne.n	80047e0 <_malloc_r+0xdc>
 80047e8:	2300      	movs	r3, #0
 80047ea:	6053      	str	r3, [r2, #4]
 80047ec:	e7de      	b.n	80047ac <_malloc_r+0xa8>
 80047ee:	230c      	movs	r3, #12
 80047f0:	4630      	mov	r0, r6
 80047f2:	6033      	str	r3, [r6, #0]
 80047f4:	f000 f80c 	bl	8004810 <__malloc_unlock>
 80047f8:	e794      	b.n	8004724 <_malloc_r+0x20>
 80047fa:	6005      	str	r5, [r0, #0]
 80047fc:	e7d6      	b.n	80047ac <_malloc_r+0xa8>
 80047fe:	bf00      	nop
 8004800:	200044c8 	.word	0x200044c8

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	@ (800480c <__malloc_lock+0x8>)
 8004806:	f7ff bf02 	b.w	800460e <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	200044c0 	.word	0x200044c0

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	@ (8004818 <__malloc_unlock+0x8>)
 8004812:	f7ff befd 	b.w	8004610 <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	200044c0 	.word	0x200044c0

0800481c <__sfputc_r>:
 800481c:	6893      	ldr	r3, [r2, #8]
 800481e:	b410      	push	{r4}
 8004820:	3b01      	subs	r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	6093      	str	r3, [r2, #8]
 8004826:	da07      	bge.n	8004838 <__sfputc_r+0x1c>
 8004828:	6994      	ldr	r4, [r2, #24]
 800482a:	42a3      	cmp	r3, r4
 800482c:	db01      	blt.n	8004832 <__sfputc_r+0x16>
 800482e:	290a      	cmp	r1, #10
 8004830:	d102      	bne.n	8004838 <__sfputc_r+0x1c>
 8004832:	bc10      	pop	{r4}
 8004834:	f7ff bddd 	b.w	80043f2 <__swbuf_r>
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	1c58      	adds	r0, r3, #1
 800483c:	6010      	str	r0, [r2, #0]
 800483e:	7019      	strb	r1, [r3, #0]
 8004840:	4608      	mov	r0, r1
 8004842:	bc10      	pop	{r4}
 8004844:	4770      	bx	lr

08004846 <__sfputs_r>:
 8004846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	4614      	mov	r4, r2
 800484e:	18d5      	adds	r5, r2, r3
 8004850:	42ac      	cmp	r4, r5
 8004852:	d101      	bne.n	8004858 <__sfputs_r+0x12>
 8004854:	2000      	movs	r0, #0
 8004856:	e007      	b.n	8004868 <__sfputs_r+0x22>
 8004858:	463a      	mov	r2, r7
 800485a:	4630      	mov	r0, r6
 800485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004860:	f7ff ffdc 	bl	800481c <__sfputc_r>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d1f3      	bne.n	8004850 <__sfputs_r+0xa>
 8004868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800486c <_vfiprintf_r>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	460d      	mov	r5, r1
 8004872:	4614      	mov	r4, r2
 8004874:	4698      	mov	r8, r3
 8004876:	4606      	mov	r6, r0
 8004878:	b09d      	sub	sp, #116	@ 0x74
 800487a:	b118      	cbz	r0, 8004884 <_vfiprintf_r+0x18>
 800487c:	6a03      	ldr	r3, [r0, #32]
 800487e:	b90b      	cbnz	r3, 8004884 <_vfiprintf_r+0x18>
 8004880:	f7ff fcc6 	bl	8004210 <__sinit>
 8004884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	d405      	bmi.n	8004896 <_vfiprintf_r+0x2a>
 800488a:	89ab      	ldrh	r3, [r5, #12]
 800488c:	059a      	lsls	r2, r3, #22
 800488e:	d402      	bmi.n	8004896 <_vfiprintf_r+0x2a>
 8004890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004892:	f7ff febc 	bl	800460e <__retarget_lock_acquire_recursive>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	071b      	lsls	r3, r3, #28
 800489a:	d501      	bpl.n	80048a0 <_vfiprintf_r+0x34>
 800489c:	692b      	ldr	r3, [r5, #16]
 800489e:	b99b      	cbnz	r3, 80048c8 <_vfiprintf_r+0x5c>
 80048a0:	4629      	mov	r1, r5
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7ff fde4 	bl	8004470 <__swsetup_r>
 80048a8:	b170      	cbz	r0, 80048c8 <_vfiprintf_r+0x5c>
 80048aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048ac:	07dc      	lsls	r4, r3, #31
 80048ae:	d504      	bpl.n	80048ba <_vfiprintf_r+0x4e>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	b01d      	add	sp, #116	@ 0x74
 80048b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	0598      	lsls	r0, r3, #22
 80048be:	d4f7      	bmi.n	80048b0 <_vfiprintf_r+0x44>
 80048c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048c2:	f7ff fea5 	bl	8004610 <__retarget_lock_release_recursive>
 80048c6:	e7f3      	b.n	80048b0 <_vfiprintf_r+0x44>
 80048c8:	2300      	movs	r3, #0
 80048ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80048cc:	2320      	movs	r3, #32
 80048ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048d2:	2330      	movs	r3, #48	@ 0x30
 80048d4:	f04f 0901 	mov.w	r9, #1
 80048d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004a88 <_vfiprintf_r+0x21c>
 80048e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048e4:	4623      	mov	r3, r4
 80048e6:	469a      	mov	sl, r3
 80048e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ec:	b10a      	cbz	r2, 80048f2 <_vfiprintf_r+0x86>
 80048ee:	2a25      	cmp	r2, #37	@ 0x25
 80048f0:	d1f9      	bne.n	80048e6 <_vfiprintf_r+0x7a>
 80048f2:	ebba 0b04 	subs.w	fp, sl, r4
 80048f6:	d00b      	beq.n	8004910 <_vfiprintf_r+0xa4>
 80048f8:	465b      	mov	r3, fp
 80048fa:	4622      	mov	r2, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	4630      	mov	r0, r6
 8004900:	f7ff ffa1 	bl	8004846 <__sfputs_r>
 8004904:	3001      	adds	r0, #1
 8004906:	f000 80a7 	beq.w	8004a58 <_vfiprintf_r+0x1ec>
 800490a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800490c:	445a      	add	r2, fp
 800490e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004910:	f89a 3000 	ldrb.w	r3, [sl]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 809f 	beq.w	8004a58 <_vfiprintf_r+0x1ec>
 800491a:	2300      	movs	r3, #0
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004924:	f10a 0a01 	add.w	sl, sl, #1
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	9307      	str	r3, [sp, #28]
 800492c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004930:	931a      	str	r3, [sp, #104]	@ 0x68
 8004932:	4654      	mov	r4, sl
 8004934:	2205      	movs	r2, #5
 8004936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493a:	4853      	ldr	r0, [pc, #332]	@ (8004a88 <_vfiprintf_r+0x21c>)
 800493c:	f000 fb08 	bl	8004f50 <memchr>
 8004940:	9a04      	ldr	r2, [sp, #16]
 8004942:	b9d8      	cbnz	r0, 800497c <_vfiprintf_r+0x110>
 8004944:	06d1      	lsls	r1, r2, #27
 8004946:	bf44      	itt	mi
 8004948:	2320      	movmi	r3, #32
 800494a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800494e:	0713      	lsls	r3, r2, #28
 8004950:	bf44      	itt	mi
 8004952:	232b      	movmi	r3, #43	@ 0x2b
 8004954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004958:	f89a 3000 	ldrb.w	r3, [sl]
 800495c:	2b2a      	cmp	r3, #42	@ 0x2a
 800495e:	d015      	beq.n	800498c <_vfiprintf_r+0x120>
 8004960:	4654      	mov	r4, sl
 8004962:	2000      	movs	r0, #0
 8004964:	f04f 0c0a 	mov.w	ip, #10
 8004968:	9a07      	ldr	r2, [sp, #28]
 800496a:	4621      	mov	r1, r4
 800496c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004970:	3b30      	subs	r3, #48	@ 0x30
 8004972:	2b09      	cmp	r3, #9
 8004974:	d94b      	bls.n	8004a0e <_vfiprintf_r+0x1a2>
 8004976:	b1b0      	cbz	r0, 80049a6 <_vfiprintf_r+0x13a>
 8004978:	9207      	str	r2, [sp, #28]
 800497a:	e014      	b.n	80049a6 <_vfiprintf_r+0x13a>
 800497c:	eba0 0308 	sub.w	r3, r0, r8
 8004980:	fa09 f303 	lsl.w	r3, r9, r3
 8004984:	4313      	orrs	r3, r2
 8004986:	46a2      	mov	sl, r4
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	e7d2      	b.n	8004932 <_vfiprintf_r+0xc6>
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	1d19      	adds	r1, r3, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	9103      	str	r1, [sp, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	bfbb      	ittet	lt
 8004998:	425b      	neglt	r3, r3
 800499a:	f042 0202 	orrlt.w	r2, r2, #2
 800499e:	9307      	strge	r3, [sp, #28]
 80049a0:	9307      	strlt	r3, [sp, #28]
 80049a2:	bfb8      	it	lt
 80049a4:	9204      	strlt	r2, [sp, #16]
 80049a6:	7823      	ldrb	r3, [r4, #0]
 80049a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049aa:	d10a      	bne.n	80049c2 <_vfiprintf_r+0x156>
 80049ac:	7863      	ldrb	r3, [r4, #1]
 80049ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b0:	d132      	bne.n	8004a18 <_vfiprintf_r+0x1ac>
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	3402      	adds	r4, #2
 80049b6:	1d1a      	adds	r2, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	9203      	str	r2, [sp, #12]
 80049bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049c0:	9305      	str	r3, [sp, #20]
 80049c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004a8c <_vfiprintf_r+0x220>
 80049c6:	2203      	movs	r2, #3
 80049c8:	4650      	mov	r0, sl
 80049ca:	7821      	ldrb	r1, [r4, #0]
 80049cc:	f000 fac0 	bl	8004f50 <memchr>
 80049d0:	b138      	cbz	r0, 80049e2 <_vfiprintf_r+0x176>
 80049d2:	2240      	movs	r2, #64	@ 0x40
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	eba0 000a 	sub.w	r0, r0, sl
 80049da:	4082      	lsls	r2, r0
 80049dc:	4313      	orrs	r3, r2
 80049de:	3401      	adds	r4, #1
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	2206      	movs	r2, #6
 80049e8:	4829      	ldr	r0, [pc, #164]	@ (8004a90 <_vfiprintf_r+0x224>)
 80049ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049ee:	f000 faaf 	bl	8004f50 <memchr>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d03f      	beq.n	8004a76 <_vfiprintf_r+0x20a>
 80049f6:	4b27      	ldr	r3, [pc, #156]	@ (8004a94 <_vfiprintf_r+0x228>)
 80049f8:	bb1b      	cbnz	r3, 8004a42 <_vfiprintf_r+0x1d6>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	3307      	adds	r3, #7
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	3308      	adds	r3, #8
 8004a04:	9303      	str	r3, [sp, #12]
 8004a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a08:	443b      	add	r3, r7
 8004a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a0c:	e76a      	b.n	80048e4 <_vfiprintf_r+0x78>
 8004a0e:	460c      	mov	r4, r1
 8004a10:	2001      	movs	r0, #1
 8004a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a16:	e7a8      	b.n	800496a <_vfiprintf_r+0xfe>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f04f 0c0a 	mov.w	ip, #10
 8004a1e:	4619      	mov	r1, r3
 8004a20:	3401      	adds	r4, #1
 8004a22:	9305      	str	r3, [sp, #20]
 8004a24:	4620      	mov	r0, r4
 8004a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2a:	3a30      	subs	r2, #48	@ 0x30
 8004a2c:	2a09      	cmp	r2, #9
 8004a2e:	d903      	bls.n	8004a38 <_vfiprintf_r+0x1cc>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0c6      	beq.n	80049c2 <_vfiprintf_r+0x156>
 8004a34:	9105      	str	r1, [sp, #20]
 8004a36:	e7c4      	b.n	80049c2 <_vfiprintf_r+0x156>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a40:	e7f0      	b.n	8004a24 <_vfiprintf_r+0x1b8>
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4630      	mov	r0, r6
 8004a4a:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <_vfiprintf_r+0x22c>)
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	f3af 8000 	nop.w
 8004a52:	4607      	mov	r7, r0
 8004a54:	1c78      	adds	r0, r7, #1
 8004a56:	d1d6      	bne.n	8004a06 <_vfiprintf_r+0x19a>
 8004a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a5a:	07d9      	lsls	r1, r3, #31
 8004a5c:	d405      	bmi.n	8004a6a <_vfiprintf_r+0x1fe>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	059a      	lsls	r2, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_vfiprintf_r+0x1fe>
 8004a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a66:	f7ff fdd3 	bl	8004610 <__retarget_lock_release_recursive>
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	065b      	lsls	r3, r3, #25
 8004a6e:	f53f af1f 	bmi.w	80048b0 <_vfiprintf_r+0x44>
 8004a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a74:	e71e      	b.n	80048b4 <_vfiprintf_r+0x48>
 8004a76:	ab03      	add	r3, sp, #12
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	462a      	mov	r2, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <_vfiprintf_r+0x22c>)
 8004a80:	a904      	add	r1, sp, #16
 8004a82:	f000 f87d 	bl	8004b80 <_printf_i>
 8004a86:	e7e4      	b.n	8004a52 <_vfiprintf_r+0x1e6>
 8004a88:	080051d0 	.word	0x080051d0
 8004a8c:	080051d6 	.word	0x080051d6
 8004a90:	080051da 	.word	0x080051da
 8004a94:	00000000 	.word	0x00000000
 8004a98:	08004847 	.word	0x08004847

08004a9c <_printf_common>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	4698      	mov	r8, r3
 8004aa4:	688a      	ldr	r2, [r1, #8]
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bfb8      	it	lt
 8004aae:	4613      	movlt	r3, r2
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004abc:	b10a      	cbz	r2, 8004ac2 <_printf_common+0x26>
 8004abe:	3301      	adds	r3, #1
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	0699      	lsls	r1, r3, #26
 8004ac6:	bf42      	ittt	mi
 8004ac8:	6833      	ldrmi	r3, [r6, #0]
 8004aca:	3302      	addmi	r3, #2
 8004acc:	6033      	strmi	r3, [r6, #0]
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	f015 0506 	ands.w	r5, r5, #6
 8004ad4:	d106      	bne.n	8004ae4 <_printf_common+0x48>
 8004ad6:	f104 0a19 	add.w	sl, r4, #25
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	6832      	ldr	r2, [r6, #0]
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	dc2b      	bgt.n	8004b3c <_printf_common+0xa0>
 8004ae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	3b00      	subs	r3, #0
 8004aec:	bf18      	it	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	0692      	lsls	r2, r2, #26
 8004af2:	d430      	bmi.n	8004b56 <_printf_common+0xba>
 8004af4:	4641      	mov	r1, r8
 8004af6:	4638      	mov	r0, r7
 8004af8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004afc:	47c8      	blx	r9
 8004afe:	3001      	adds	r0, #1
 8004b00:	d023      	beq.n	8004b4a <_printf_common+0xae>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	6922      	ldr	r2, [r4, #16]
 8004b06:	f003 0306 	and.w	r3, r3, #6
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	bf14      	ite	ne
 8004b0e:	2500      	movne	r5, #0
 8004b10:	6833      	ldreq	r3, [r6, #0]
 8004b12:	f04f 0600 	mov.w	r6, #0
 8004b16:	bf08      	it	eq
 8004b18:	68e5      	ldreq	r5, [r4, #12]
 8004b1a:	f104 041a 	add.w	r4, r4, #26
 8004b1e:	bf08      	it	eq
 8004b20:	1aed      	subeq	r5, r5, r3
 8004b22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b26:	bf08      	it	eq
 8004b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	bfc4      	itt	gt
 8004b30:	1a9b      	subgt	r3, r3, r2
 8004b32:	18ed      	addgt	r5, r5, r3
 8004b34:	42b5      	cmp	r5, r6
 8004b36:	d11a      	bne.n	8004b6e <_printf_common+0xd2>
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e008      	b.n	8004b4e <_printf_common+0xb2>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4652      	mov	r2, sl
 8004b40:	4641      	mov	r1, r8
 8004b42:	4638      	mov	r0, r7
 8004b44:	47c8      	blx	r9
 8004b46:	3001      	adds	r0, #1
 8004b48:	d103      	bne.n	8004b52 <_printf_common+0xb6>
 8004b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	3501      	adds	r5, #1
 8004b54:	e7c1      	b.n	8004ada <_printf_common+0x3e>
 8004b56:	2030      	movs	r0, #48	@ 0x30
 8004b58:	18e1      	adds	r1, r4, r3
 8004b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b64:	4422      	add	r2, r4
 8004b66:	3302      	adds	r3, #2
 8004b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b6c:	e7c2      	b.n	8004af4 <_printf_common+0x58>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4622      	mov	r2, r4
 8004b72:	4641      	mov	r1, r8
 8004b74:	4638      	mov	r0, r7
 8004b76:	47c8      	blx	r9
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d0e6      	beq.n	8004b4a <_printf_common+0xae>
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	e7d9      	b.n	8004b34 <_printf_common+0x98>

08004b80 <_printf_i>:
 8004b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	7e0f      	ldrb	r7, [r1, #24]
 8004b86:	4691      	mov	r9, r2
 8004b88:	2f78      	cmp	r7, #120	@ 0x78
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	469a      	mov	sl, r3
 8004b90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b96:	d807      	bhi.n	8004ba8 <_printf_i+0x28>
 8004b98:	2f62      	cmp	r7, #98	@ 0x62
 8004b9a:	d80a      	bhi.n	8004bb2 <_printf_i+0x32>
 8004b9c:	2f00      	cmp	r7, #0
 8004b9e:	f000 80d3 	beq.w	8004d48 <_printf_i+0x1c8>
 8004ba2:	2f58      	cmp	r7, #88	@ 0x58
 8004ba4:	f000 80ba 	beq.w	8004d1c <_printf_i+0x19c>
 8004ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bb0:	e03a      	b.n	8004c28 <_printf_i+0xa8>
 8004bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bb6:	2b15      	cmp	r3, #21
 8004bb8:	d8f6      	bhi.n	8004ba8 <_printf_i+0x28>
 8004bba:	a101      	add	r1, pc, #4	@ (adr r1, 8004bc0 <_printf_i+0x40>)
 8004bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bc0:	08004c19 	.word	0x08004c19
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004ba9 	.word	0x08004ba9
 8004bcc:	08004ba9 	.word	0x08004ba9
 8004bd0:	08004ba9 	.word	0x08004ba9
 8004bd4:	08004ba9 	.word	0x08004ba9
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004ba9 	.word	0x08004ba9
 8004be0:	08004ba9 	.word	0x08004ba9
 8004be4:	08004ba9 	.word	0x08004ba9
 8004be8:	08004ba9 	.word	0x08004ba9
 8004bec:	08004d2f 	.word	0x08004d2f
 8004bf0:	08004c57 	.word	0x08004c57
 8004bf4:	08004ce9 	.word	0x08004ce9
 8004bf8:	08004ba9 	.word	0x08004ba9
 8004bfc:	08004ba9 	.word	0x08004ba9
 8004c00:	08004d51 	.word	0x08004d51
 8004c04:	08004ba9 	.word	0x08004ba9
 8004c08:	08004c57 	.word	0x08004c57
 8004c0c:	08004ba9 	.word	0x08004ba9
 8004c10:	08004ba9 	.word	0x08004ba9
 8004c14:	08004cf1 	.word	0x08004cf1
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	1d1a      	adds	r2, r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6032      	str	r2, [r6, #0]
 8004c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e09e      	b.n	8004d6a <_printf_i+0x1ea>
 8004c2c:	6833      	ldr	r3, [r6, #0]
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	1d19      	adds	r1, r3, #4
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	0606      	lsls	r6, r0, #24
 8004c36:	d501      	bpl.n	8004c3c <_printf_i+0xbc>
 8004c38:	681d      	ldr	r5, [r3, #0]
 8004c3a:	e003      	b.n	8004c44 <_printf_i+0xc4>
 8004c3c:	0645      	lsls	r5, r0, #25
 8004c3e:	d5fb      	bpl.n	8004c38 <_printf_i+0xb8>
 8004c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c44:	2d00      	cmp	r5, #0
 8004c46:	da03      	bge.n	8004c50 <_printf_i+0xd0>
 8004c48:	232d      	movs	r3, #45	@ 0x2d
 8004c4a:	426d      	negs	r5, r5
 8004c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c50:	230a      	movs	r3, #10
 8004c52:	4859      	ldr	r0, [pc, #356]	@ (8004db8 <_printf_i+0x238>)
 8004c54:	e011      	b.n	8004c7a <_printf_i+0xfa>
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	6833      	ldr	r3, [r6, #0]
 8004c5a:	0608      	lsls	r0, r1, #24
 8004c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c60:	d402      	bmi.n	8004c68 <_printf_i+0xe8>
 8004c62:	0649      	lsls	r1, r1, #25
 8004c64:	bf48      	it	mi
 8004c66:	b2ad      	uxthmi	r5, r5
 8004c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c6a:	6033      	str	r3, [r6, #0]
 8004c6c:	bf14      	ite	ne
 8004c6e:	230a      	movne	r3, #10
 8004c70:	2308      	moveq	r3, #8
 8004c72:	4851      	ldr	r0, [pc, #324]	@ (8004db8 <_printf_i+0x238>)
 8004c74:	2100      	movs	r1, #0
 8004c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c7a:	6866      	ldr	r6, [r4, #4]
 8004c7c:	2e00      	cmp	r6, #0
 8004c7e:	bfa8      	it	ge
 8004c80:	6821      	ldrge	r1, [r4, #0]
 8004c82:	60a6      	str	r6, [r4, #8]
 8004c84:	bfa4      	itt	ge
 8004c86:	f021 0104 	bicge.w	r1, r1, #4
 8004c8a:	6021      	strge	r1, [r4, #0]
 8004c8c:	b90d      	cbnz	r5, 8004c92 <_printf_i+0x112>
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d04b      	beq.n	8004d2a <_printf_i+0x1aa>
 8004c92:	4616      	mov	r6, r2
 8004c94:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c98:	fb03 5711 	mls	r7, r3, r1, r5
 8004c9c:	5dc7      	ldrb	r7, [r0, r7]
 8004c9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ca2:	462f      	mov	r7, r5
 8004ca4:	42bb      	cmp	r3, r7
 8004ca6:	460d      	mov	r5, r1
 8004ca8:	d9f4      	bls.n	8004c94 <_printf_i+0x114>
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d10b      	bne.n	8004cc6 <_printf_i+0x146>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	07df      	lsls	r7, r3, #31
 8004cb2:	d508      	bpl.n	8004cc6 <_printf_i+0x146>
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	6861      	ldr	r1, [r4, #4]
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	bfde      	ittt	le
 8004cbc:	2330      	movle	r3, #48	@ 0x30
 8004cbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cc6:	1b92      	subs	r2, r2, r6
 8004cc8:	6122      	str	r2, [r4, #16]
 8004cca:	464b      	mov	r3, r9
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4640      	mov	r0, r8
 8004cd0:	f8cd a000 	str.w	sl, [sp]
 8004cd4:	aa03      	add	r2, sp, #12
 8004cd6:	f7ff fee1 	bl	8004a9c <_printf_common>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d14a      	bne.n	8004d74 <_printf_i+0x1f4>
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce2:	b004      	add	sp, #16
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	f043 0320 	orr.w	r3, r3, #32
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	2778      	movs	r7, #120	@ 0x78
 8004cf2:	4832      	ldr	r0, [pc, #200]	@ (8004dbc <_printf_i+0x23c>)
 8004cf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	6831      	ldr	r1, [r6, #0]
 8004cfc:	061f      	lsls	r7, r3, #24
 8004cfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d02:	d402      	bmi.n	8004d0a <_printf_i+0x18a>
 8004d04:	065f      	lsls	r7, r3, #25
 8004d06:	bf48      	it	mi
 8004d08:	b2ad      	uxthmi	r5, r5
 8004d0a:	6031      	str	r1, [r6, #0]
 8004d0c:	07d9      	lsls	r1, r3, #31
 8004d0e:	bf44      	itt	mi
 8004d10:	f043 0320 	orrmi.w	r3, r3, #32
 8004d14:	6023      	strmi	r3, [r4, #0]
 8004d16:	b11d      	cbz	r5, 8004d20 <_printf_i+0x1a0>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	e7ab      	b.n	8004c74 <_printf_i+0xf4>
 8004d1c:	4826      	ldr	r0, [pc, #152]	@ (8004db8 <_printf_i+0x238>)
 8004d1e:	e7e9      	b.n	8004cf4 <_printf_i+0x174>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	f023 0320 	bic.w	r3, r3, #32
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	e7f6      	b.n	8004d18 <_printf_i+0x198>
 8004d2a:	4616      	mov	r6, r2
 8004d2c:	e7bd      	b.n	8004caa <_printf_i+0x12a>
 8004d2e:	6833      	ldr	r3, [r6, #0]
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	1d18      	adds	r0, r3, #4
 8004d34:	6961      	ldr	r1, [r4, #20]
 8004d36:	6030      	str	r0, [r6, #0]
 8004d38:	062e      	lsls	r6, r5, #24
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	d501      	bpl.n	8004d42 <_printf_i+0x1c2>
 8004d3e:	6019      	str	r1, [r3, #0]
 8004d40:	e002      	b.n	8004d48 <_printf_i+0x1c8>
 8004d42:	0668      	lsls	r0, r5, #25
 8004d44:	d5fb      	bpl.n	8004d3e <_printf_i+0x1be>
 8004d46:	8019      	strh	r1, [r3, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	e7bc      	b.n	8004cca <_printf_i+0x14a>
 8004d50:	6833      	ldr	r3, [r6, #0]
 8004d52:	2100      	movs	r1, #0
 8004d54:	1d1a      	adds	r2, r3, #4
 8004d56:	6032      	str	r2, [r6, #0]
 8004d58:	681e      	ldr	r6, [r3, #0]
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f8f7 	bl	8004f50 <memchr>
 8004d62:	b108      	cbz	r0, 8004d68 <_printf_i+0x1e8>
 8004d64:	1b80      	subs	r0, r0, r6
 8004d66:	6060      	str	r0, [r4, #4]
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d72:	e7aa      	b.n	8004cca <_printf_i+0x14a>
 8004d74:	4632      	mov	r2, r6
 8004d76:	4649      	mov	r1, r9
 8004d78:	4640      	mov	r0, r8
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	47d0      	blx	sl
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d0ad      	beq.n	8004cde <_printf_i+0x15e>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	079b      	lsls	r3, r3, #30
 8004d86:	d413      	bmi.n	8004db0 <_printf_i+0x230>
 8004d88:	68e0      	ldr	r0, [r4, #12]
 8004d8a:	9b03      	ldr	r3, [sp, #12]
 8004d8c:	4298      	cmp	r0, r3
 8004d8e:	bfb8      	it	lt
 8004d90:	4618      	movlt	r0, r3
 8004d92:	e7a6      	b.n	8004ce2 <_printf_i+0x162>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4632      	mov	r2, r6
 8004d98:	4649      	mov	r1, r9
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	47d0      	blx	sl
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d09d      	beq.n	8004cde <_printf_i+0x15e>
 8004da2:	3501      	adds	r5, #1
 8004da4:	68e3      	ldr	r3, [r4, #12]
 8004da6:	9903      	ldr	r1, [sp, #12]
 8004da8:	1a5b      	subs	r3, r3, r1
 8004daa:	42ab      	cmp	r3, r5
 8004dac:	dcf2      	bgt.n	8004d94 <_printf_i+0x214>
 8004dae:	e7eb      	b.n	8004d88 <_printf_i+0x208>
 8004db0:	2500      	movs	r5, #0
 8004db2:	f104 0619 	add.w	r6, r4, #25
 8004db6:	e7f5      	b.n	8004da4 <_printf_i+0x224>
 8004db8:	080051e1 	.word	0x080051e1
 8004dbc:	080051f2 	.word	0x080051f2

08004dc0 <__swhatbuf_r>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc8:	4615      	mov	r5, r2
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	461e      	mov	r6, r3
 8004dce:	b096      	sub	sp, #88	@ 0x58
 8004dd0:	da0c      	bge.n	8004dec <__swhatbuf_r+0x2c>
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004dda:	bf14      	ite	ne
 8004ddc:	2340      	movne	r3, #64	@ 0x40
 8004dde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004de2:	2000      	movs	r0, #0
 8004de4:	6031      	str	r1, [r6, #0]
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	b016      	add	sp, #88	@ 0x58
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	466a      	mov	r2, sp
 8004dee:	f000 f87d 	bl	8004eec <_fstat_r>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	dbed      	blt.n	8004dd2 <__swhatbuf_r+0x12>
 8004df6:	9901      	ldr	r1, [sp, #4]
 8004df8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004dfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e00:	4259      	negs	r1, r3
 8004e02:	4159      	adcs	r1, r3
 8004e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e08:	e7eb      	b.n	8004de2 <__swhatbuf_r+0x22>

08004e0a <__smakebuf_r>:
 8004e0a:	898b      	ldrh	r3, [r1, #12]
 8004e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0e:	079d      	lsls	r5, r3, #30
 8004e10:	4606      	mov	r6, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	d507      	bpl.n	8004e26 <__smakebuf_r+0x1c>
 8004e16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	6163      	str	r3, [r4, #20]
 8004e22:	b003      	add	sp, #12
 8004e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e26:	466a      	mov	r2, sp
 8004e28:	ab01      	add	r3, sp, #4
 8004e2a:	f7ff ffc9 	bl	8004dc0 <__swhatbuf_r>
 8004e2e:	9f00      	ldr	r7, [sp, #0]
 8004e30:	4605      	mov	r5, r0
 8004e32:	4639      	mov	r1, r7
 8004e34:	4630      	mov	r0, r6
 8004e36:	f7ff fc65 	bl	8004704 <_malloc_r>
 8004e3a:	b948      	cbnz	r0, 8004e50 <__smakebuf_r+0x46>
 8004e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e40:	059a      	lsls	r2, r3, #22
 8004e42:	d4ee      	bmi.n	8004e22 <__smakebuf_r+0x18>
 8004e44:	f023 0303 	bic.w	r3, r3, #3
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	e7e2      	b.n	8004e16 <__smakebuf_r+0xc>
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	6020      	str	r0, [r4, #0]
 8004e60:	b15b      	cbz	r3, 8004e7a <__smakebuf_r+0x70>
 8004e62:	4630      	mov	r0, r6
 8004e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e68:	f000 f852 	bl	8004f10 <_isatty_r>
 8004e6c:	b128      	cbz	r0, 8004e7a <__smakebuf_r+0x70>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f023 0303 	bic.w	r3, r3, #3
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	431d      	orrs	r5, r3
 8004e7e:	81a5      	strh	r5, [r4, #12]
 8004e80:	e7cf      	b.n	8004e22 <__smakebuf_r+0x18>

08004e82 <_putc_r>:
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	460d      	mov	r5, r1
 8004e86:	4614      	mov	r4, r2
 8004e88:	4606      	mov	r6, r0
 8004e8a:	b118      	cbz	r0, 8004e94 <_putc_r+0x12>
 8004e8c:	6a03      	ldr	r3, [r0, #32]
 8004e8e:	b90b      	cbnz	r3, 8004e94 <_putc_r+0x12>
 8004e90:	f7ff f9be 	bl	8004210 <__sinit>
 8004e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e96:	07d8      	lsls	r0, r3, #31
 8004e98:	d405      	bmi.n	8004ea6 <_putc_r+0x24>
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	0599      	lsls	r1, r3, #22
 8004e9e:	d402      	bmi.n	8004ea6 <_putc_r+0x24>
 8004ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ea2:	f7ff fbb4 	bl	800460e <__retarget_lock_acquire_recursive>
 8004ea6:	68a3      	ldr	r3, [r4, #8]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	60a3      	str	r3, [r4, #8]
 8004eae:	da05      	bge.n	8004ebc <_putc_r+0x3a>
 8004eb0:	69a2      	ldr	r2, [r4, #24]
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	db12      	blt.n	8004edc <_putc_r+0x5a>
 8004eb6:	b2eb      	uxtb	r3, r5
 8004eb8:	2b0a      	cmp	r3, #10
 8004eba:	d00f      	beq.n	8004edc <_putc_r+0x5a>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	6022      	str	r2, [r4, #0]
 8004ec2:	701d      	strb	r5, [r3, #0]
 8004ec4:	b2ed      	uxtb	r5, r5
 8004ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ec8:	07da      	lsls	r2, r3, #31
 8004eca:	d405      	bmi.n	8004ed8 <_putc_r+0x56>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	059b      	lsls	r3, r3, #22
 8004ed0:	d402      	bmi.n	8004ed8 <_putc_r+0x56>
 8004ed2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed4:	f7ff fb9c 	bl	8004610 <__retarget_lock_release_recursive>
 8004ed8:	4628      	mov	r0, r5
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	4629      	mov	r1, r5
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7ff fa86 	bl	80043f2 <__swbuf_r>
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	e7ed      	b.n	8004ec6 <_putc_r+0x44>
	...

08004eec <_fstat_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	2300      	movs	r3, #0
 8004ef0:	4d06      	ldr	r5, [pc, #24]	@ (8004f0c <_fstat_r+0x20>)
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	602b      	str	r3, [r5, #0]
 8004efa:	f7fc fb51 	bl	80015a0 <_fstat>
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d102      	bne.n	8004f08 <_fstat_r+0x1c>
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	b103      	cbz	r3, 8004f08 <_fstat_r+0x1c>
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	bd38      	pop	{r3, r4, r5, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200044bc 	.word	0x200044bc

08004f10 <_isatty_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	2300      	movs	r3, #0
 8004f14:	4d05      	ldr	r5, [pc, #20]	@ (8004f2c <_isatty_r+0x1c>)
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fc fb4f 	bl	80015be <_isatty>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_isatty_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_isatty_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	200044bc 	.word	0x200044bc

08004f30 <_sbrk_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	2300      	movs	r3, #0
 8004f34:	4d05      	ldr	r5, [pc, #20]	@ (8004f4c <_sbrk_r+0x1c>)
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f7fc fb56 	bl	80015ec <_sbrk>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_sbrk_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_sbrk_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	200044bc 	.word	0x200044bc

08004f50 <memchr>:
 8004f50:	4603      	mov	r3, r0
 8004f52:	b510      	push	{r4, lr}
 8004f54:	b2c9      	uxtb	r1, r1
 8004f56:	4402      	add	r2, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	d101      	bne.n	8004f62 <memchr+0x12>
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e003      	b.n	8004f6a <memchr+0x1a>
 8004f62:	7804      	ldrb	r4, [r0, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	428c      	cmp	r4, r1
 8004f68:	d1f6      	bne.n	8004f58 <memchr+0x8>
 8004f6a:	bd10      	pop	{r4, pc}

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
