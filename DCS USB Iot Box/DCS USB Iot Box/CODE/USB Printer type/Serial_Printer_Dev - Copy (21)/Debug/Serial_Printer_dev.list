
Serial_Printer_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  0000808c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a4c  08006a4c  00007a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a54  08006a54  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08006a5c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ea8  2000008c  08006ae8  0000808c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f34  08006ae8  00008f34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe6  00000000  00000000  000080b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002174  00000000  00000000  00012c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00014e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a8  00000000  00000000  00015810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5d2  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c97a  00000000  00000000  0003458a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2c6b  00000000  00000000  00040f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  000f3bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000f6d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000008c 	.word	0x2000008c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08006414 	.word	0x08006414

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000090 	.word	0x20000090
 80001c0:	08006414 	.word	0x08006414

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <GetSector>:
 * @brief Gets the sector of a given address
 * @param None
 * @retval The sector of a given address
 */
uint32_t GetSector(uint32_t Address)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 uint32_t sector = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]

 if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a44      	ldr	r2, [pc, #272]	@ (80005d0 <GetSector+0x120>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d206      	bcs.n	80004d2 <GetSector+0x22>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80004ca:	d302      	bcc.n	80004d2 <GetSector+0x22>
 {
   sector = FLASH_SECTOR_0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	e077      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a3f      	ldr	r2, [pc, #252]	@ (80005d4 <GetSector+0x124>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d206      	bcs.n	80004e8 <GetSector+0x38>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a3c      	ldr	r2, [pc, #240]	@ (80005d0 <GetSector+0x120>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d302      	bcc.n	80004e8 <GetSector+0x38>
 {
   sector = FLASH_SECTOR_1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e06c      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a3b      	ldr	r2, [pc, #236]	@ (80005d8 <GetSector+0x128>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d206      	bcs.n	80004fe <GetSector+0x4e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a38      	ldr	r2, [pc, #224]	@ (80005d4 <GetSector+0x124>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d302      	bcc.n	80004fe <GetSector+0x4e>
 {
   sector = FLASH_SECTOR_2;
 80004f8:	2302      	movs	r3, #2
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e061      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a36      	ldr	r2, [pc, #216]	@ (80005dc <GetSector+0x12c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d806      	bhi.n	8000514 <GetSector+0x64>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a33      	ldr	r2, [pc, #204]	@ (80005d8 <GetSector+0x128>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d302      	bcc.n	8000514 <GetSector+0x64>
 {
   sector = FLASH_SECTOR_3;
 800050e:	2303      	movs	r3, #3
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	e056      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a32      	ldr	r2, [pc, #200]	@ (80005e0 <GetSector+0x130>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d806      	bhi.n	800052a <GetSector+0x7a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a2f      	ldr	r2, [pc, #188]	@ (80005dc <GetSector+0x12c>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d902      	bls.n	800052a <GetSector+0x7a>
 {
   sector = FLASH_SECTOR_4;
 8000524:	2304      	movs	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e04b      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a2d      	ldr	r2, [pc, #180]	@ (80005e4 <GetSector+0x134>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d806      	bhi.n	8000540 <GetSector+0x90>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a2a      	ldr	r2, [pc, #168]	@ (80005e0 <GetSector+0x130>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d902      	bls.n	8000540 <GetSector+0x90>
 {
   sector = FLASH_SECTOR_5;
 800053a:	2305      	movs	r3, #5
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e040      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a29      	ldr	r2, [pc, #164]	@ (80005e8 <GetSector+0x138>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d806      	bhi.n	8000556 <GetSector+0xa6>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a26      	ldr	r2, [pc, #152]	@ (80005e4 <GetSector+0x134>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d902      	bls.n	8000556 <GetSector+0xa6>
 {
   sector = FLASH_SECTOR_6;
 8000550:	2306      	movs	r3, #6
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e035      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a24      	ldr	r2, [pc, #144]	@ (80005ec <GetSector+0x13c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d806      	bhi.n	800056c <GetSector+0xbc>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <GetSector+0x138>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d902      	bls.n	800056c <GetSector+0xbc>
 {
   sector = FLASH_SECTOR_7;
 8000566:	2307      	movs	r3, #7
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e02a      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a20      	ldr	r2, [pc, #128]	@ (80005f0 <GetSector+0x140>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d806      	bhi.n	8000582 <GetSector+0xd2>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a1d      	ldr	r2, [pc, #116]	@ (80005ec <GetSector+0x13c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d902      	bls.n	8000582 <GetSector+0xd2>
 {
   sector = FLASH_SECTOR_8;
 800057c:	2308      	movs	r3, #8
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e01f      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a1b      	ldr	r2, [pc, #108]	@ (80005f4 <GetSector+0x144>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d806      	bhi.n	8000598 <GetSector+0xe8>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a18      	ldr	r2, [pc, #96]	@ (80005f0 <GetSector+0x140>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d902      	bls.n	8000598 <GetSector+0xe8>
 {
   sector = FLASH_SECTOR_9;
 8000592:	2309      	movs	r3, #9
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e014      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a17      	ldr	r2, [pc, #92]	@ (80005f8 <GetSector+0x148>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d806      	bhi.n	80005ae <GetSector+0xfe>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a14      	ldr	r2, [pc, #80]	@ (80005f4 <GetSector+0x144>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d902      	bls.n	80005ae <GetSector+0xfe>
 {
   sector = FLASH_SECTOR_10;
 80005a8:	230a      	movs	r3, #10
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	e009      	b.n	80005c2 <GetSector+0x112>
 }
 else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80005b4:	d205      	bcs.n	80005c2 <GetSector+0x112>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a0f      	ldr	r2, [pc, #60]	@ (80005f8 <GetSector+0x148>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d901      	bls.n	80005c2 <GetSector+0x112>
 {
   sector = FLASH_SECTOR_11;
 80005be:	230b      	movs	r3, #11
 80005c0:	60fb      	str	r3, [r7, #12]
 }

 return sector;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	08004000 	.word	0x08004000
 80005d4:	08008000 	.word	0x08008000
 80005d8:	0800c000 	.word	0x0800c000
 80005dc:	0800ffff 	.word	0x0800ffff
 80005e0:	0801ffff 	.word	0x0801ffff
 80005e4:	0803ffff 	.word	0x0803ffff
 80005e8:	0805ffff 	.word	0x0805ffff
 80005ec:	0807ffff 	.word	0x0807ffff
 80005f0:	0809ffff 	.word	0x0809ffff
 80005f4:	080bffff 	.word	0x080bffff
 80005f8:	080dffff 	.word	0x080dffff

080005fc <Flash_Erase_sector>:
/**
 * flash_erease_sector
 * xóa hết 1 sector
 */
void Flash_Erase_sector(uint32_t StartSectorAddress)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t SECTORError;
	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000604:	f002 fd60 	bl	80030c8 <HAL_FLASH_Unlock>
	  /* Erase the user Flash area*/
	   /* (xác định bởi FLASH_USER_START_ADDR và FLASH_USER_END_ADDR)*/

	  /* Get the number of sector to erase from 1st sector */

      uint32_t StartSector = GetSector(StartSectorAddress);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff51 	bl	80004b0 <GetSector>
 800060e:	60f8      	str	r0, [r7, #12]
//	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
//	  uint32_t EndSector = GetSector(EndSectorAddress);


	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <Flash_Erase_sector+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <Flash_Erase_sector+0x50>)
 8000618:	2202      	movs	r2, #2
 800061a:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800061c:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <Flash_Erase_sector+0x50>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6093      	str	r3, [r2, #8]
//	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
	  EraseInitStruct.NbSectors     = 1;
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <Flash_Erase_sector+0x50>)
 8000624:	2201      	movs	r2, #1
 8000626:	60da      	str	r2, [r3, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4619      	mov	r1, r3
 800062e:	4807      	ldr	r0, [pc, #28]	@ (800064c <Flash_Erase_sector+0x50>)
 8000630:	f002 feb2 	bl	8003398 <HAL_FLASHEx_Erase>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <Flash_Erase_sector+0x44>
	  {
//		  USBD_UsrLog("HAL_FLASH_GetError");
		  return HAL_FLASH_GetError ();
 800063a:	f002 fd77 	bl	800312c <HAL_FLASH_GetError>
 800063e:	e001      	b.n	8000644 <Flash_Erase_sector+0x48>
	  }

	  HAL_FLASH_Lock();
 8000640:	f002 fd64 	bl	800310c <HAL_FLASH_Lock>
}
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000a8 	.word	0x200000a8

08000650 <Flash_Erase_sector_leng>:
/**
 * flash_erease_sector
 * xóa hết sector  chứa chiều dài
 */
void Flash_Erase_sector_leng(uint32_t StartSectorAddress, uint16_t numberofwords)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t SECTORError;
	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800065c:	f002 fd34 	bl	80030c8 <HAL_FLASH_Unlock>
	  /* Erase the user Flash area*/
	   /* (xác định bởi FLASH_USER_START_ADDR và FLASH_USER_END_ADDR)*/

	  /* Get the number of sector to erase from 1st sector */

      uint32_t StartSector = GetSector(StartSectorAddress);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff25 	bl	80004b0 <GetSector>
 8000666:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8000674:	6938      	ldr	r0, [r7, #16]
 8000676:	f7ff ff1b 	bl	80004b0 <GetSector>
 800067a:	60f8      	str	r0, [r7, #12]


	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <Flash_Erase_sector_leng+0x6c>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <Flash_Erase_sector_leng+0x6c>)
 8000684:	2202      	movs	r2, #2
 8000686:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <Flash_Erase_sector_leng+0x6c>)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	3301      	adds	r3, #1
 8000696:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <Flash_Erase_sector_leng+0x6c>)
 8000698:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	@ (80006bc <Flash_Erase_sector_leng+0x6c>)
 80006a2:	f002 fe79 	bl	8003398 <HAL_FLASHEx_Erase>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <Flash_Erase_sector_leng+0x62>
	  {
//		  USBD_UsrLog("HAL_FLASH_GetError");
		  return HAL_FLASH_GetError ();
 80006ac:	f002 fd3e 	bl	800312c <HAL_FLASH_GetError>
 80006b0:	e001      	b.n	80006b6 <Flash_Erase_sector_leng+0x66>
	  }

	  HAL_FLASH_Lock();
 80006b2:	f002 fd2b 	bl	800310c <HAL_FLASH_Lock>
}
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000bc 	.word	0x200000bc

080006c0 <Flash_Write_Data>:
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD  , addr + i , data[i]|((uint16_t)data[i+1]<<8));
//	}
//}

uint32_t Flash_Write_Data(uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	80fb      	strh	r3, [r7, #6]

	int sofar=0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80006d2:	f002 fcf9 	bl	80030c8 <HAL_FLASH_Unlock>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
//	  __HAL_FLASH_CLEAR_FLAG(HAL_FLASH_ERROR_PGP);
	   while (sofar<numberofwords)
 80006d6:	e01c      	b.n	8000712 <Flash_Write_Data+0x52>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	4413      	add	r3, r2
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	461c      	mov	r4, r3
 80006e6:	4615      	mov	r5, r2
 80006e8:	4622      	mov	r2, r4
 80006ea:	462b      	mov	r3, r5
 80006ec:	68f9      	ldr	r1, [r7, #12]
 80006ee:	2002      	movs	r0, #2
 80006f0:	f002 fc96 	bl	8003020 <HAL_FLASH_Program>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d106      	bne.n	8000708 <Flash_Write_Data+0x48>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3304      	adds	r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	e004      	b.n	8000712 <Flash_Write_Data+0x52>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 uint32_t e =  HAL_FLASH_GetError ();
 8000708:	f002 fd10 	bl	800312c <HAL_FLASH_GetError>
 800070c:	6138      	str	r0, [r7, #16]
	    	 return e;
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	e006      	b.n	8000720 <Flash_Write_Data+0x60>
	   while (sofar<numberofwords)
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbde      	blt.n	80006d8 <Flash_Write_Data+0x18>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800071a:	f002 fcf7 	bl	800310c <HAL_FLASH_Lock>

	   return 0;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bdb0      	pop	{r4, r5, r7, pc}

08000728 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data(uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	4613      	mov	r3, r2
 8000734:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3304      	adds	r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3304      	adds	r3, #4
 8000748:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	80fa      	strh	r2, [r7, #6]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d000      	beq.n	8000756 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000754:	e7ef      	b.n	8000736 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000756:	bf00      	nop
	}
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <convertdata>:

void convertdata(uint32_t data, uint8_t *pData)
{
 8000762:	b480      	push	{r7}
 8000764:	b085      	sub	sp, #20
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	//xx yy zz tt
	uint32_t datatam = data;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60fb      	str	r3, [r7, #12]

	pData[0] =(uint8_t) (datatam  & 0x000000ff);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	701a      	strb	r2, [r3, #0]
	datatam = datatam>>8;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	60fb      	str	r3, [r7, #12]
	pData[1] =(uint8_t) (datatam  & 0x000000ff);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	701a      	strb	r2, [r3, #0]
	datatam = datatam>>8;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	60fb      	str	r3, [r7, #12]
	pData[2] =(uint8_t) (datatam  & 0x000000ff);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	701a      	strb	r2, [r3, #0]
	datatam = datatam>>8;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	60fb      	str	r3, [r7, #12]
	pData[3] =(uint8_t) (datatam  & 0x000000ff);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3303      	adds	r3, #3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]

}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
	...

080007b4 <select_command_pair>:
int selected_end_len = 0;
int selected_end_index = 0;

// Hàm chọn cặp lệnh bắt đầu và kết thúc
void select_command_pair(int index)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (index < 0 || index >= NUM_START_COMMANDS || index >= NUM_END_SIGNATURES) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db05      	blt.n	80007ce <select_command_pair+0x1a>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d802      	bhi.n	80007ce <select_command_pair+0x1a>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d90f      	bls.n	80007ee <select_command_pair+0x3a>
        // Xử lý khi index không hợp lệ, có thể log lỗi hoặc thiết lập giá trị mặc định
        selected_start_cmd = START_PRINT_COMMANDS_DEFAULT;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <select_command_pair+0x80>)
 80007d0:	4a19      	ldr	r2, [pc, #100]	@ (8000838 <select_command_pair+0x84>)
 80007d2:	601a      	str	r2, [r3, #0]
        selected_end_sig = END_PRINT_SIGNATURES_DEFAULT;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <select_command_pair+0x88>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <select_command_pair+0x84>)
 80007d8:	601a      	str	r2, [r3, #0]
        selected_start_len = START_COMMAND_LENGTHS_DEFAULT;
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <select_command_pair+0x8c>)
 80007dc:	2203      	movs	r2, #3
 80007de:	601a      	str	r2, [r3, #0]
        selected_end_len = END_SIGNATURE_LENGTHS_DEFAULT;
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <select_command_pair+0x90>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	601a      	str	r2, [r3, #0]
        selected_end_index = END_SIGNATURE_INDICES_DEFAULT;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <select_command_pair+0x94>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
        return;
 80007ec:	e01d      	b.n	800082a <select_command_pair+0x76>
    }
    // Lấy lệnh bắt đầu và kết thúc cùng độ dài từ các mảng macro
    selected_start_cmd = START_PRINT_COMMANDS[index];
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <select_command_pair+0x98>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000834 <select_command_pair+0x80>)
 80007f8:	6013      	str	r3, [r2, #0]
    selected_end_sig = END_PRINT_SIGNATURES[index];
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <select_command_pair+0x9c>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <select_command_pair+0x88>)
 8000804:	6013      	str	r3, [r2, #0]
    selected_start_len = START_COMMAND_LENGTHS[index];
 8000806:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <select_command_pair+0xa0>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	4a0c      	ldr	r2, [pc, #48]	@ (8000840 <select_command_pair+0x8c>)
 8000810:	6013      	str	r3, [r2, #0]
    selected_end_len = END_SIGNATURE_LENGTHS[index];
 8000812:	4a11      	ldr	r2, [pc, #68]	@ (8000858 <select_command_pair+0xa4>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <select_command_pair+0x90>)
 800081c:	6013      	str	r3, [r2, #0]
    selected_end_index = END_SIGNATURE_INDICES[index];  // Cập nhật chỉ số kết thúc từ mảng
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <select_command_pair+0xa8>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <select_command_pair+0x94>)
 8000828:	6013      	str	r3, [r2, #0]
}
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	200000d0 	.word	0x200000d0
 8000838:	0800643c 	.word	0x0800643c
 800083c:	200000d8 	.word	0x200000d8
 8000840:	200000d4 	.word	0x200000d4
 8000844:	200000dc 	.word	0x200000dc
 8000848:	200000e0 	.word	0x200000e0
 800084c:	20000000 	.word	0x20000000
 8000850:	20000010 	.word	0x20000010
 8000854:	080069d0 	.word	0x080069d0
 8000858:	080069e0 	.word	0x080069e0
 800085c:	080069f0 	.word	0x080069f0

08000860 <check_start_condition>:

// Hàm kiểm tra điều kiện bắt đầu
static int check_start_condition(const uint8_t *data, int length)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
    if (length >= selected_start_len && memcmp(data, selected_start_cmd, selected_start_len) == 0) {
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <check_start_condition+0x38>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	db0c      	blt.n	800088e <check_start_condition+0x2e>
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <check_start_condition+0x3c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <check_start_condition+0x38>)
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f004 fe40 	bl	8005504 <memcmp>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <check_start_condition+0x2e>
        return 1; // Điều kiện bắt đầu in thỏa mãn
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <check_start_condition+0x30>
    }
    return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000d4 	.word	0x200000d4
 800089c:	200000d0 	.word	0x200000d0

080008a0 <check_end_condition>:

// Hàm kiểm tra điều kiện kết thúc
static int check_end_condition(const uint8_t *data, int length)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    if (length >= selected_end_len && memcmp(&data[length - selected_end_index], selected_end_sig, selected_end_len) == 0) {
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <check_end_condition+0x44>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	db12      	blt.n	80008da <check_end_condition+0x3a>
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <check_end_condition+0x48>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <check_end_condition+0x4c>)
 80008c4:	6811      	ldr	r1, [r2, #0]
 80008c6:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <check_end_condition+0x44>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fe1a 	bl	8005504 <memcmp>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <check_end_condition+0x3a>
        return 1; // Điều kiện kết thúc in thỏa mãn
 80008d6:	2301      	movs	r3, #1
 80008d8:	e000      	b.n	80008dc <check_end_condition+0x3c>
#if (0)
    else if (length >= 0 && length < 64 && memcmp(END_PRINT_SIGNATURES_DEFAULT, selected_end_sig, selected_end_len) == 0) {
        return 1; // Điều kiện kết thúc in thỏa mãn
    }
#endif
    return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000dc 	.word	0x200000dc
 80008e8:	200000e0 	.word	0x200000e0
 80008ec:	200000d8 	.word	0x200000d8

080008f0 <initialize_command_pair>:


// Gọi hàm select_command_pair tại một điểm khởi tạo trong chương trình
void initialize_command_pair(int command_pair_index)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    select_command_pair(command_pair_index);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff5b 	bl	80007b4 <select_command_pair>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc (int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);
 8000910:	1d39      	adds	r1, r7, #4
 8000912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000916:	2201      	movs	r2, #1
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <__io_putchar+0x20>)
 800091a:	f003 fcbf 	bl	800429c <HAL_UART_Transmit>

return ch;
 800091e:	687b      	ldr	r3, [r7, #4]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000e4 	.word	0x200000e4

0800092c <PrintUart3Data>:

uint32_t ui32_counter_send_status =0 ;

#if 1
void PrintUart3Data(uint8_t* data, uint16_t size)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
	for (int j = 0; j < size; j++)
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e148      	b.n	8000bd0 <PrintUart3Data+0x2a4>
	{
		switch (data[j])
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b5f      	cmp	r3, #95	@ 0x5f
 8000948:	f000 80e7 	beq.w	8000b1a <PrintUart3Data+0x1ee>
 800094c:	2b5f      	cmp	r3, #95	@ 0x5f
 800094e:	f300 8131 	bgt.w	8000bb4 <PrintUart3Data+0x288>
 8000952:	2b5c      	cmp	r3, #92	@ 0x5c
 8000954:	d077      	beq.n	8000a46 <PrintUart3Data+0x11a>
 8000956:	2b5c      	cmp	r3, #92	@ 0x5c
 8000958:	f300 812c 	bgt.w	8000bb4 <PrintUart3Data+0x288>
 800095c:	2b3c      	cmp	r3, #60	@ 0x3c
 800095e:	d008      	beq.n	8000972 <PrintUart3Data+0x46>
 8000960:	2b3c      	cmp	r3, #60	@ 0x3c
 8000962:	f300 8127 	bgt.w	8000bb4 <PrintUart3Data+0x288>
 8000966:	2b14      	cmp	r3, #20
 8000968:	d038      	beq.n	80009dc <PrintUart3Data+0xb0>
 800096a:	2b1c      	cmp	r3, #28
 800096c:	f000 80a0 	beq.w	8000ab0 <PrintUart3Data+0x184>

            	ui8_printer_status =1;
            }
            break;
		default:
			break;
 8000970:	e120      	b.n	8000bb4 <PrintUart3Data+0x288>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <PrintUart3Data+0x78>
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3302      	adds	r3, #2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10a      	bne.n	80009a4 <PrintUart3Data+0x78>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3303      	adds	r3, #3
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d103      	bne.n	80009a4 <PrintUart3Data+0x78>
				printf("(Read Data): Mo nap may\n");
 800099c:	4892      	ldr	r0, [pc, #584]	@ (8000be8 <PrintUart3Data+0x2bc>)
 800099e:	f004 fcb1 	bl	8005304 <puts>
			break;
 80009a2:	e109      	b.n	8000bb8 <PrintUart3Data+0x28c>
			else if(data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f040 8102 	bne.w	8000bb8 <PrintUart3Data+0x28c>
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3302      	adds	r3, #2
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	f040 80fa 	bne.w	8000bb8 <PrintUart3Data+0x28c>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3303      	adds	r3, #3
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	f040 80f2 	bne.w	8000bb8 <PrintUart3Data+0x28c>
				printf("(Read Data): Mo nap may (PAPER OUT)\n");
 80009d4:	4885      	ldr	r0, [pc, #532]	@ (8000bec <PrintUart3Data+0x2c0>)
 80009d6:	f004 fc95 	bl	8005304 <puts>
			break;
 80009da:	e0ed      	b.n	8000bb8 <PrintUart3Data+0x28c>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d111      	bne.n	8000a0e <PrintUart3Data+0xe2>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3302      	adds	r3, #2
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10a      	bne.n	8000a0e <PrintUart3Data+0xe2>
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3303      	adds	r3, #3
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d103      	bne.n	8000a0e <PrintUart3Data+0xe2>
				printf("(Read Data): Dong nap may\n");
 8000a06:	487a      	ldr	r0, [pc, #488]	@ (8000bf0 <PrintUart3Data+0x2c4>)
 8000a08:	f004 fc7c 	bl	8005304 <puts>
			break;
 8000a0c:	e0d6      	b.n	8000bbc <PrintUart3Data+0x290>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f040 80cf 	bne.w	8000bbc <PrintUart3Data+0x290>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3302      	adds	r3, #2
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	f040 80c7 	bne.w	8000bbc <PrintUart3Data+0x290>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3303      	adds	r3, #3
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	f040 80bf 	bne.w	8000bbc <PrintUart3Data+0x290>
				printf("(Read Data): Dong nap may (PAPER OUT)\n");
 8000a3e:	486d      	ldr	r0, [pc, #436]	@ (8000bf4 <PrintUart3Data+0x2c8>)
 8000a40:	f004 fc60 	bl	8005304 <puts>
			break;
 8000a44:	e0ba      	b.n	8000bbc <PrintUart3Data+0x290>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d111      	bne.n	8000a78 <PrintUart3Data+0x14c>
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3302      	adds	r3, #2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10a      	bne.n	8000a78 <PrintUart3Data+0x14c>
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3303      	adds	r3, #3
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d103      	bne.n	8000a78 <PrintUart3Data+0x14c>
				printf("(Read Data): FEED\n");
 8000a70:	4861      	ldr	r0, [pc, #388]	@ (8000bf8 <PrintUart3Data+0x2cc>)
 8000a72:	f004 fc47 	bl	8005304 <puts>
			break;
 8000a76:	e0a3      	b.n	8000bc0 <PrintUart3Data+0x294>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f040 809c 	bne.w	8000bc0 <PrintUart3Data+0x294>
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	f040 8094 	bne.w	8000bc0 <PrintUart3Data+0x294>
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3303      	adds	r3, #3
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	f040 808c 	bne.w	8000bc0 <PrintUart3Data+0x294>
				printf("(Read Data): FEED (PAPER OUT)\n");
 8000aa8:	4854      	ldr	r0, [pc, #336]	@ (8000bfc <PrintUart3Data+0x2d0>)
 8000aaa:	f004 fc2b 	bl	8005304 <puts>
			break;
 8000aae:	e087      	b.n	8000bc0 <PrintUart3Data+0x294>
			if (data[j+1] == 0x00 && data[j+2] == 0x00 && data[j+3] == 0x0f)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d114      	bne.n	8000ae8 <PrintUart3Data+0x1bc>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10d      	bne.n	8000ae8 <PrintUart3Data+0x1bc>
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3303      	adds	r3, #3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	d106      	bne.n	8000ae8 <PrintUart3Data+0x1bc>
				printf("(Read Data): Turn off machine\n");
 8000ada:	4849      	ldr	r0, [pc, #292]	@ (8000c00 <PrintUart3Data+0x2d4>)
 8000adc:	f004 fc12 	bl	8005304 <puts>
				ui8_printer_status =0;
 8000ae0:	4b48      	ldr	r3, [pc, #288]	@ (8000c04 <PrintUart3Data+0x2d8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
			break;
 8000ae6:	e06d      	b.n	8000bc4 <PrintUart3Data+0x298>
			else if (data[j+1] == 0x00 && data[j+2] == 0x03 && data[j+3] == 0x0f)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d166      	bne.n	8000bc4 <PrintUart3Data+0x298>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3302      	adds	r3, #2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d15f      	bne.n	8000bc4 <PrintUart3Data+0x298>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3303      	adds	r3, #3
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d158      	bne.n	8000bc4 <PrintUart3Data+0x298>
				printf("(Read Data): Turn off machine (PAPER OUT)\n");
 8000b12:	483d      	ldr	r0, [pc, #244]	@ (8000c08 <PrintUart3Data+0x2dc>)
 8000b14:	f004 fbf6 	bl	8005304 <puts>
			break;
 8000b18:	e054      	b.n	8000bc4 <PrintUart3Data+0x298>
            if (data[j+1] == 0x54 && data[j+2] == 0x4d && data[j+3] == 0x2d && data[j+4] == 0x54 &&
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b54      	cmp	r3, #84	@ 0x54
 8000b26:	d14f      	bne.n	8000bc8 <PrintUart3Data+0x29c>
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b4d      	cmp	r3, #77	@ 0x4d
 8000b34:	d148      	bne.n	8000bc8 <PrintUart3Data+0x29c>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b2d      	cmp	r3, #45	@ 0x2d
 8000b42:	d141      	bne.n	8000bc8 <PrintUart3Data+0x29c>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3304      	adds	r3, #4
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b54      	cmp	r3, #84	@ 0x54
 8000b50:	d13a      	bne.n	8000bc8 <PrintUart3Data+0x29c>
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3305      	adds	r3, #5
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
            if (data[j+1] == 0x54 && data[j+2] == 0x4d && data[j+3] == 0x2d && data[j+4] == 0x54 &&
 8000b5c:	2b38      	cmp	r3, #56	@ 0x38
 8000b5e:	d133      	bne.n	8000bc8 <PrintUart3Data+0x29c>
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3306      	adds	r3, #6
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b38      	cmp	r3, #56	@ 0x38
 8000b6c:	d12c      	bne.n	8000bc8 <PrintUart3Data+0x29c>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3307      	adds	r3, #7
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b49      	cmp	r3, #73	@ 0x49
 8000b7a:	d125      	bne.n	8000bc8 <PrintUart3Data+0x29c>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3308      	adds	r3, #8
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b49      	cmp	r3, #73	@ 0x49
 8000b88:	d11e      	bne.n	8000bc8 <PrintUart3Data+0x29c>
                data[j+9] == 0x49 && data[j+10] == 0x00)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3309      	adds	r3, #9
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
                data[j+5] == 0x38 && data[j+6] == 0x38 && data[j+7] == 0x49 && data[j+8] == 0x49 &&
 8000b94:	2b49      	cmp	r3, #73	@ 0x49
 8000b96:	d117      	bne.n	8000bc8 <PrintUart3Data+0x29c>
                data[j+9] == 0x49 && data[j+10] == 0x00)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	330a      	adds	r3, #10
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d110      	bne.n	8000bc8 <PrintUart3Data+0x29c>
            	printf("(Read Data): _TM-T88III.\n");
 8000ba6:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <PrintUart3Data+0x2e0>)
 8000ba8:	f004 fbac 	bl	8005304 <puts>
            	ui8_printer_status =1;
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <PrintUart3Data+0x2d8>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
            break;
 8000bb2:	e009      	b.n	8000bc8 <PrintUart3Data+0x29c>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e008      	b.n	8000bca <PrintUart3Data+0x29e>
			break;
 8000bb8:	bf00      	nop
 8000bba:	e006      	b.n	8000bca <PrintUart3Data+0x29e>
			break;
 8000bbc:	bf00      	nop
 8000bbe:	e004      	b.n	8000bca <PrintUart3Data+0x29e>
			break;
 8000bc0:	bf00      	nop
 8000bc2:	e002      	b.n	8000bca <PrintUart3Data+0x29e>
			break;
 8000bc4:	bf00      	nop
 8000bc6:	e000      	b.n	8000bca <PrintUart3Data+0x29e>
            break;
 8000bc8:	bf00      	nop
	for (int j = 0; j < size; j++)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f6ff aeb2 	blt.w	800093e <PrintUart3Data+0x12>
		}
	}
	printf("\n");
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f004 fb34 	bl	8005248 <putchar>
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08006450 	.word	0x08006450
 8000bec:	08006468 	.word	0x08006468
 8000bf0:	0800648c 	.word	0x0800648c
 8000bf4:	080064a8 	.word	0x080064a8
 8000bf8:	080064d0 	.word	0x080064d0
 8000bfc:	080064e4 	.word	0x080064e4
 8000c00:	08006504 	.word	0x08006504
 8000c04:	20001a3a 	.word	0x20001a3a
 8000c08:	08006524 	.word	0x08006524
 8000c0c:	08006550 	.word	0x08006550

08000c10 <wait_res_init>:
#endif

void wait_res_init(uint32_t timeout_wait_)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	ui32_timerxset = HAL_GetTick() + timeout_wait_;
 8000c18:	f002 f85a 	bl	8002cd0 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <wait_res_init+0x24>)
 8000c24:	6013      	str	r3, [r2, #0]
	ui8_status_esp =1U;
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <wait_res_init+0x28>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20001a48 	.word	0x20001a48
 8000c38:	20001a44 	.word	0x20001a44

08000c3c <xuly_package_ESP>:

void xuly_package_ESP()
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

 #F n$
 	 F: xóa flash
 	 n = 1 : xóa
 */
	if (quanlyESP.str[1] == 'G')
 8000c42:	4b7c      	ldr	r3, [pc, #496]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000c44:	78db      	ldrb	r3, [r3, #3]
 8000c46:	2b47      	cmp	r3, #71	@ 0x47
 8000c48:	d121      	bne.n	8000c8e <xuly_package_ESP+0x52>
	{
		if (quanlyESP.str[3] == '1')
 8000c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000c4c:	795b      	ldrb	r3, [r3, #5]
 8000c4e:	2b31      	cmp	r3, #49	@ 0x31
 8000c50:	d106      	bne.n	8000c60 <xuly_package_ESP+0x24>
		{
			USBH_UsrLog("#CMD G1 Manufacture");
 8000c52:	4879      	ldr	r0, [pc, #484]	@ (8000e38 <xuly_package_ESP+0x1fc>)
 8000c54:	f004 fae6 	bl	8005224 <iprintf>
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f004 faf5 	bl	8005248 <putchar>
 8000c5e:	e167      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '2')
 8000c60:	4b74      	ldr	r3, [pc, #464]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000c62:	795b      	ldrb	r3, [r3, #5]
 8000c64:	2b32      	cmp	r3, #50	@ 0x32
 8000c66:	d106      	bne.n	8000c76 <xuly_package_ESP+0x3a>
		{
			USBH_UsrLog("#CMD G2 Product");
 8000c68:	4874      	ldr	r0, [pc, #464]	@ (8000e3c <xuly_package_ESP+0x200>)
 8000c6a:	f004 fadb 	bl	8005224 <iprintf>
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f004 faea 	bl	8005248 <putchar>
 8000c74:	e15c      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '3')
 8000c76:	4b6f      	ldr	r3, [pc, #444]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000c78:	795b      	ldrb	r3, [r3, #5]
 8000c7a:	2b33      	cmp	r3, #51	@ 0x33
 8000c7c:	f040 8158 	bne.w	8000f30 <xuly_package_ESP+0x2f4>
		{
			USBH_UsrLog("#CMD G3 Serinumber");
 8000c80:	486f      	ldr	r0, [pc, #444]	@ (8000e40 <xuly_package_ESP+0x204>)
 8000c82:	f004 facf 	bl	8005224 <iprintf>
 8000c86:	200a      	movs	r0, #10
 8000c88:	f004 fade 	bl	8005248 <putchar>
 8000c8c:	e150      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
	}
	else if (quanlyESP.str[1] == 'R')
 8000c8e:	4b69      	ldr	r3, [pc, #420]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000c90:	78db      	ldrb	r3, [r3, #3]
 8000c92:	2b52      	cmp	r3, #82	@ 0x52
 8000c94:	d137      	bne.n	8000d06 <xuly_package_ESP+0xca>
	{
		if (quanlyESP.str[3] == '0')
 8000c96:	4b67      	ldr	r3, [pc, #412]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000c98:	795b      	ldrb	r3, [r3, #5]
 8000c9a:	2b30      	cmp	r3, #48	@ 0x30
 8000c9c:	d103      	bne.n	8000ca6 <xuly_package_ESP+0x6a>
		{
			ui8_status_esp =0U;/*ready*/
 8000c9e:	4b69      	ldr	r3, [pc, #420]	@ (8000e44 <xuly_package_ESP+0x208>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e144      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '1')
 8000ca6:	4b63      	ldr	r3, [pc, #396]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000ca8:	795b      	ldrb	r3, [r3, #5]
 8000caa:	2b31      	cmp	r3, #49	@ 0x31
 8000cac:	d103      	bne.n	8000cb6 <xuly_package_ESP+0x7a>
		{
			ui32_timerxset =0;// reset timeout
 8000cae:	4b66      	ldr	r3, [pc, #408]	@ (8000e48 <xuly_package_ESP+0x20c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e13c      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '2')
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b32      	cmp	r3, #50	@ 0x32
 8000cbc:	f040 8138 	bne.w	8000f30 <xuly_package_ESP+0x2f4>
		{
			ui32_timerxset =0;// reset timeout
 8000cc0:	4b61      	ldr	r3, [pc, #388]	@ (8000e48 <xuly_package_ESP+0x20c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]

			USBH_UsrLog(" resend package ");
 8000cc6:	4861      	ldr	r0, [pc, #388]	@ (8000e4c <xuly_package_ESP+0x210>)
 8000cc8:	f004 faac 	bl	8005224 <iprintf>
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f004 fabb 	bl	8005248 <putchar>
			if (quanlyESP.index_pkg)
 8000cd2:	4b58      	ldr	r3, [pc, #352]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d005      	beq.n	8000ce6 <xuly_package_ESP+0xaa>
			{
				quanlyESP.index_pkg--;
 8000cda:	4b56      	ldr	r3, [pc, #344]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
			}
			if (u32_addr_data_user >= lentosend)
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <xuly_package_ESP+0x214>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b59      	ldr	r3, [pc, #356]	@ (8000e54 <xuly_package_ESP+0x218>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f200 811d 	bhi.w	8000f30 <xuly_package_ESP+0x2f4>
			{
				u32_addr_data_user -=lentosend;
 8000cf6:	4b57      	ldr	r3, [pc, #348]	@ (8000e54 <xuly_package_ESP+0x218>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a55      	ldr	r2, [pc, #340]	@ (8000e50 <xuly_package_ESP+0x214>)
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	4a54      	ldr	r2, [pc, #336]	@ (8000e54 <xuly_package_ESP+0x218>)
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e114      	b.n	8000f30 <xuly_package_ESP+0x2f4>
			}
		}
	}
	else if (quanlyESP.str[1] == 'T')
 8000d06:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000d08:	78db      	ldrb	r3, [r3, #3]
 8000d0a:	2b54      	cmp	r3, #84	@ 0x54
 8000d0c:	d153      	bne.n	8000db6 <xuly_package_ESP+0x17a>
	{
		if (quanlyESP.str[3] == '1')
 8000d0e:	4b49      	ldr	r3, [pc, #292]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	2b31      	cmp	r3, #49	@ 0x31
 8000d14:	d115      	bne.n	8000d42 <xuly_package_ESP+0x106>
		{
			user_manage_request.number_printed++;
 8000d16:	4b50      	ldr	r3, [pc, #320]	@ (8000e58 <xuly_package_ESP+0x21c>)
 8000d18:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b4d      	ldr	r3, [pc, #308]	@ (8000e58 <xuly_package_ESP+0x21c>)
 8000d22:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			USBH_UsrLog(" test finish printed %d", user_manage_request.number_printed);
 8000d26:	4b4c      	ldr	r3, [pc, #304]	@ (8000e58 <xuly_package_ESP+0x21c>)
 8000d28:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	484b      	ldr	r0, [pc, #300]	@ (8000e5c <xuly_package_ESP+0x220>)
 8000d30:	f004 fa78 	bl	8005224 <iprintf>
 8000d34:	200a      	movs	r0, #10
 8000d36:	f004 fa87 	bl	8005248 <putchar>
			u32_addr_data_user =0U;
 8000d3a:	4b46      	ldr	r3, [pc, #280]	@ (8000e54 <xuly_package_ESP+0x218>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e0f6      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '2')
 8000d42:	4b3c      	ldr	r3, [pc, #240]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	2b32      	cmp	r3, #50	@ 0x32
 8000d48:	d127      	bne.n	8000d9a <xuly_package_ESP+0x15e>
		{
			USBH_UsrLog(" test format flash ");
 8000d4a:	4845      	ldr	r0, [pc, #276]	@ (8000e60 <xuly_package_ESP+0x224>)
 8000d4c:	f004 fa6a 	bl	8005224 <iprintf>
 8000d50:	200a      	movs	r0, #10
 8000d52:	f004 fa79 	bl	8005248 <putchar>
			USBH_UsrLog("Format disk");
 8000d56:	4843      	ldr	r0, [pc, #268]	@ (8000e64 <xuly_package_ESP+0x228>)
 8000d58:	f004 fa64 	bl	8005224 <iprintf>
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f004 fa73 	bl	8005248 <putchar>
				/*format disk*/
			Flash_Erase_sector(ADDR_FLASH_SECTOR_5);
 8000d62:	4841      	ldr	r0, [pc, #260]	@ (8000e68 <xuly_package_ESP+0x22c>)
 8000d64:	f7ff fc4a 	bl	80005fc <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_6);
 8000d68:	4840      	ldr	r0, [pc, #256]	@ (8000e6c <xuly_package_ESP+0x230>)
 8000d6a:	f7ff fc47 	bl	80005fc <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_7);
 8000d6e:	4840      	ldr	r0, [pc, #256]	@ (8000e70 <xuly_package_ESP+0x234>)
 8000d70:	f7ff fc44 	bl	80005fc <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_8);
 8000d74:	483f      	ldr	r0, [pc, #252]	@ (8000e74 <xuly_package_ESP+0x238>)
 8000d76:	f7ff fc41 	bl	80005fc <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_9);
 8000d7a:	483f      	ldr	r0, [pc, #252]	@ (8000e78 <xuly_package_ESP+0x23c>)
 8000d7c:	f7ff fc3e 	bl	80005fc <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_10);
 8000d80:	483e      	ldr	r0, [pc, #248]	@ (8000e7c <xuly_package_ESP+0x240>)
 8000d82:	f7ff fc3b 	bl	80005fc <Flash_Erase_sector>
			Flash_Erase_sector(ADDR_FLASH_SECTOR_11);
 8000d86:	483e      	ldr	r0, [pc, #248]	@ (8000e80 <xuly_package_ESP+0x244>)
 8000d88:	f7ff fc38 	bl	80005fc <Flash_Erase_sector>
			SERIAL_TO_SERVER("finished");
 8000d8c:	483d      	ldr	r0, [pc, #244]	@ (8000e84 <xuly_package_ESP+0x248>)
 8000d8e:	f004 fa49 	bl	8005224 <iprintf>
 8000d92:	200a      	movs	r0, #10
 8000d94:	f004 fa58 	bl	8005248 <putchar>
 8000d98:	e0ca      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
		else if (quanlyESP.str[3] == '3')
 8000d9a:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000d9c:	795b      	ldrb	r3, [r3, #5]
 8000d9e:	2b33      	cmp	r3, #51	@ 0x33
 8000da0:	f040 80c6 	bne.w	8000f30 <xuly_package_ESP+0x2f4>
		{
			USBH_UsrLog("test format");
 8000da4:	4838      	ldr	r0, [pc, #224]	@ (8000e88 <xuly_package_ESP+0x24c>)
 8000da6:	f004 fa3d 	bl	8005224 <iprintf>
 8000daa:	200a      	movs	r0, #10
 8000dac:	f004 fa4c 	bl	8005248 <putchar>
			clear_flash();
 8000db0:	f000 fd68 	bl	8001884 <clear_flash>
 8000db4:	e0bc      	b.n	8000f30 <xuly_package_ESP+0x2f4>
		}
	}
	else if (quanlyESP.str[1] == 'S')
 8000db6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000db8:	78db      	ldrb	r3, [r3, #3]
 8000dba:	2b53      	cmp	r3, #83	@ 0x53
 8000dbc:	f040 80b8 	bne.w	8000f30 <xuly_package_ESP+0x2f4>
	{
		if (quanlyESP.str[3] == '1')
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <xuly_package_ESP+0x1f8>)
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	2b31      	cmp	r3, #49	@ 0x31
 8000dc6:	d169      	bne.n	8000e9c <xuly_package_ESP+0x260>
		{
			USBH_UsrLog("start sniff");
 8000dc8:	4830      	ldr	r0, [pc, #192]	@ (8000e8c <xuly_package_ESP+0x250>)
 8000dca:	f004 fa2b 	bl	8005224 <iprintf>
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f004 fa3a 	bl	8005248 <putchar>

			/* thiết lập nhận data pringting */

			 int vitridoctin = pcommand->number_printed % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	603b      	str	r3, [r7, #0]

			 if(vitridoctin ==1)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <xuly_package_ESP+0x1be>
			 {
				 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR2;
 8000de8:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a29      	ldr	r2, [pc, #164]	@ (8000e94 <xuly_package_ESP+0x258>)
 8000dee:	615a      	str	r2, [r3, #20]
				 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR2;
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <xuly_package_ESP+0x23c>)
 8000df6:	619a      	str	r2, [r3, #24]
 8000df8:	e007      	b.n	8000e0a <xuly_package_ESP+0x1ce>
			 }
			 else
			 {
				 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a26      	ldr	r2, [pc, #152]	@ (8000e98 <xuly_package_ESP+0x25c>)
 8000e00:	615a      	str	r2, [r3, #20]
				 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <xuly_package_ESP+0x22c>)
 8000e08:	619a      	str	r2, [r3, #24]
			 }

			 pcommand->readytopausesniff =0U;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			 pcommand->data_print_size =0; //reset size
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
			 pcommand->chophepsniff =1U;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			 pcommand->timer_pausesniff = HAL_GetTick();
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <xuly_package_ESP+0x254>)
 8000e28:	681c      	ldr	r4, [r3, #0]
 8000e2a:	f001 ff51 	bl	8002cd0 <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6563      	str	r3, [r4, #84]	@ 0x54
 8000e32:	e07d      	b.n	8000f30 <xuly_package_ESP+0x2f4>
 8000e34:	20000a10 	.word	0x20000a10
 8000e38:	0800656c 	.word	0x0800656c
 8000e3c:	08006580 	.word	0x08006580
 8000e40:	08006590 	.word	0x08006590
 8000e44:	20001a44 	.word	0x20001a44
 8000e48:	20001a48 	.word	0x20001a48
 8000e4c:	080065a4 	.word	0x080065a4
 8000e50:	200001c0 	.word	0x200001c0
 8000e54:	200001c4 	.word	0x200001c4
 8000e58:	20001a4c 	.word	0x20001a4c
 8000e5c:	080065b8 	.word	0x080065b8
 8000e60:	080065d0 	.word	0x080065d0
 8000e64:	080065e4 	.word	0x080065e4
 8000e68:	08020000 	.word	0x08020000
 8000e6c:	08040000 	.word	0x08040000
 8000e70:	08060000 	.word	0x08060000
 8000e74:	08080000 	.word	0x08080000
 8000e78:	080a0000 	.word	0x080a0000
 8000e7c:	080c0000 	.word	0x080c0000
 8000e80:	080e0000 	.word	0x080e0000
 8000e84:	080065f0 	.word	0x080065f0
 8000e88:	080065fc 	.word	0x080065fc
 8000e8c:	08006608 	.word	0x08006608
 8000e90:	20000020 	.word	0x20000020
 8000e94:	080a0028 	.word	0x080a0028
 8000e98:	08020028 	.word	0x08020028

		}
		else if (quanlyESP.str[3] == '2')
 8000e9c:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <xuly_package_ESP+0x304>)
 8000e9e:	795b      	ldrb	r3, [r3, #5]
 8000ea0:	2b32      	cmp	r3, #50	@ 0x32
 8000ea2:	d145      	bne.n	8000f30 <xuly_package_ESP+0x2f4>
		{
			USBH_UsrLog("end sniff");
 8000ea4:	4827      	ldr	r0, [pc, #156]	@ (8000f44 <xuly_package_ESP+0x308>)
 8000ea6:	f004 f9bd 	bl	8005224 <iprintf>
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f004 f9cc 	bl	8005248 <putchar>
			pcommand->readytopausesniff =0U;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			pcommand->chophepsniff =0U;
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			pcommand->ui8_startprint =0U;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	771a      	strb	r2, [r3, #28]
			pcommand->ui8_printing =0U;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	775a      	strb	r2, [r3, #29]
			pcommand->WAIT_SEND_TO_SERVER =1U;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	779a      	strb	r2, [r3, #30]
			pcommand->number_printed++;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000ee4:	3201      	adds	r2, #1
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			uint32_t diachitam = pcommand->u32_addr_header_store;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	607b      	str	r3, [r7, #4]
			//chỉ có 1 gói duy nhất
			pcommand->package_index =1;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24

			/* save total package */
			 Flash_Write_Data(diachitam, &pcommand->package_index, 1U);
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3324      	adds	r3, #36	@ 0x24
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fbda 	bl	80006c0 <Flash_Write_Data>

			 USBD_UsrLogCog(" total package = %ld \n", pcommand->package_index);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <xuly_package_ESP+0x310>)
 8000f16:	f004 f985 	bl	8005224 <iprintf>

			 diachitam+=4;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	607b      	str	r3, [r7, #4]
			 /* save len package */
			Flash_Write_Data(diachitam, &pcommand->data_print_size, 1U);
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <xuly_package_ESP+0x30c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3310      	adds	r3, #16
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fbc8 	bl	80006c0 <Flash_Write_Data>

		}
	}

	quanlyESP.busy =0;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <xuly_package_ESP+0x304>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	759a      	strb	r2, [r3, #22]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000a10 	.word	0x20000a10
 8000f44:	08006614 	.word	0x08006614
 8000f48:	20000020 	.word	0x20000020
 8000f4c:	08006620 	.word	0x08006620

08000f50 <sosanhlenhfct>:

uint8_t sosanhlenhfct(USER_REQUESET_TypeDef *pmydata, int len, uint16_t *myRxDataLength)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
    uint8_t sosanhlenh = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	77fb      	strb	r3, [r7, #31]

    // Kiểm tra điều kiện bắt đầu hoặc kết thúc dựa trên trạng thái in
    if (pcommand->ui8_startprint == 0U)
 8000f60:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <sosanhlenhfct+0xf4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	7f1b      	ldrb	r3, [r3, #28]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10e      	bne.n	8000f88 <sosanhlenhfct+0x38>
    {
        // Kiểm tra điều kiện bắt đầu in
        if (check_start_condition(pmydata->noidung_data, len))
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fc75 	bl	8000860 <check_start_condition>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d05e      	beq.n	800103a <sosanhlenhfct+0xea>
        {
            sosanhlenh = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	77fb      	strb	r3, [r7, #31]
            USBD_UsrLogCog("\n start print 2\n");
 8000f80:	4831      	ldr	r0, [pc, #196]	@ (8001048 <sosanhlenhfct+0xf8>)
 8000f82:	f004 f9bf 	bl	8005304 <puts>
 8000f86:	e058      	b.n	800103a <sosanhlenhfct+0xea>
        }
    }
    else
    {
        // Kiểm tra điều kiện kết thúc in
        if (check_end_condition(pmydata->noidung_data, len))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc86 	bl	80008a0 <check_end_condition>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d04f      	beq.n	800103a <sosanhlenhfct+0xea>
        {
            /*  Kết thúc in */
            sosanhlenh = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	77fb      	strb	r3, [r7, #31]

            *myRxDataLength = len;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	801a      	strh	r2, [r3, #0]
            pcommand->data_print_size += *myRxDataLength;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <sosanhlenhfct+0xf4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <sosanhlenhfct+0xf4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	440a      	add	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
            int numofwords = (*myRxDataLength / 4) + ((*myRxDataLength % 4) != 0);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf14      	ite	ne
 8000fd2:	2301      	movne	r3, #1
 8000fd4:	2300      	moveq	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
            Flash_Write_Data(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, numofwords);
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <sosanhlenhfct+0xf4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6958      	ldr	r0, [r3, #20]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fb68 	bl	80006c0 <Flash_Write_Data>
            pcommand->u32_addr_data_store += *myRxDataLength;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <sosanhlenhfct+0xf4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <sosanhlenhfct+0xf4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	440a      	add	r2, r1
 8001002:	615a      	str	r2, [r3, #20]

            uint8_t lastindex = pcommand->package_index;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <sosanhlenhfct+0xf4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	75fb      	strb	r3, [r7, #23]
            pcommand->chieudaitungfile[lastindex] = pcommand->data_print_size;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <sosanhlenhfct+0xf4>)
 800100e:	6819      	ldr	r1, [r3, #0]
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <sosanhlenhfct+0xf4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	7dfa      	ldrb	r2, [r7, #23]
 8001016:	6909      	ldr	r1, [r1, #16]
 8001018:	320a      	adds	r2, #10
 800101a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            USBD_UsrLogCog(" save last = %d, len = %ld \n", lastindex, pcommand->chieudaitungfile[lastindex]);
 800101e:	7df9      	ldrb	r1, [r7, #23]
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <sosanhlenhfct+0xf4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	7dfa      	ldrb	r2, [r7, #23]
 8001026:	320a      	adds	r2, #10
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	461a      	mov	r2, r3
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <sosanhlenhfct+0xfc>)
 8001030:	f004 f8f8 	bl	8005224 <iprintf>

            USBD_UsrLogCog("\n end print 6\n");
 8001034:	4806      	ldr	r0, [pc, #24]	@ (8001050 <sosanhlenhfct+0x100>)
 8001036:	f004 f965 	bl	8005304 <puts>
        }
    }

    return sosanhlenh;
 800103a:	7ffb      	ldrb	r3, [r7, #31]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000020 	.word	0x20000020
 8001048:	08006638 	.word	0x08006638
 800104c:	08006648 	.word	0x08006648
 8001050:	08006668 	.word	0x08006668

08001054 <kiemtra_request_tu_PC>:
	return sosanhlenh;
}
#endif

void kiemtra_request_tu_PC()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b092      	sub	sp, #72	@ 0x48
 8001058:	af00      	add	r7, sp, #0
      if(user_manage_request.request_dang_thuc_thi < user_manage_request.request_tong_nhan)
 800105a:	4b9c      	ldr	r3, [pc, #624]	@ (80012cc <kiemtra_request_tu_PC+0x278>)
 800105c:	891a      	ldrh	r2, [r3, #8]
 800105e:	4b9b      	ldr	r3, [pc, #620]	@ (80012cc <kiemtra_request_tu_PC+0x278>)
 8001060:	88db      	ldrh	r3, [r3, #6]
 8001062:	429a      	cmp	r2, r3
 8001064:	f080 81fa 	bcs.w	800145c <kiemtra_request_tu_PC+0x408>
      {
    	  USER_REQUESET_TypeDef *pmydata;
    	  int vitridoctin = user_manage_request.request_dang_thuc_thi % MAX_USER_GET_USB_REQUEST;
 8001068:	4b98      	ldr	r3, [pc, #608]	@ (80012cc <kiemtra_request_tu_PC+0x278>)
 800106a:	891a      	ldrh	r2, [r3, #8]
 800106c:	4b98      	ldr	r3, [pc, #608]	@ (80012d0 <kiemtra_request_tu_PC+0x27c>)
 800106e:	fba3 1302 	umull	r1, r3, r3, r2
 8001072:	08d9      	lsrs	r1, r3, #3
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	63bb      	str	r3, [r7, #56]	@ 0x38
    	  pmydata =&user_manage_request.request_noidung[vitridoctin];
 8001082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001084:	2246      	movs	r2, #70	@ 0x46
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	3358      	adds	r3, #88	@ 0x58
 800108c:	4a8f      	ldr	r2, [pc, #572]	@ (80012cc <kiemtra_request_tu_PC+0x278>)
 800108e:	4413      	add	r3, r2
 8001090:	637b      	str	r3, [r7, #52]	@ 0x34
    	  int len = pmydata->noidung_chieudai;
 8001092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
    	  uint16_t myRxDataLength;
    	  user_manage_request.request_dang_thuc_thi++;
 800109a:	4b8c      	ldr	r3, [pc, #560]	@ (80012cc <kiemtra_request_tu_PC+0x278>)
 800109c:	891b      	ldrh	r3, [r3, #8]
 800109e:	3301      	adds	r3, #1
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b8a      	ldr	r3, [pc, #552]	@ (80012cc <kiemtra_request_tu_PC+0x278>)
 80010a4:	811a      	strh	r2, [r3, #8]

    	  //lưu vào vùng flash
    	  if( pcommand->chophepsniff ==1U && len > 0U)
 80010a6:	4b8b      	ldr	r3, [pc, #556]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d14b      	bne.n	800114a <kiemtra_request_tu_PC+0xf6>
 80010b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d048      	beq.n	800114a <kiemtra_request_tu_PC+0xf6>
		  {
    		  int numofwords = (len/4)+((len%4)!=0);
 80010b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da00      	bge.n	80010c0 <kiemtra_request_tu_PC+0x6c>
 80010be:	3303      	adds	r3, #3
 80010c0:	109b      	asrs	r3, r3, #2
 80010c2:	461a      	mov	r2, r3
 80010c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    		  myRxDataLength = numofwords*4;
 80010d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010da:	b29b      	uxth	r3, r3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	817b      	strh	r3, [r7, #10]

    		  // lưu chi�?u dài
    		  uint32_t j = (uint32_t)len;
 80010e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e4:	607b      	str	r3, [r7, #4]
    		  Flash_Write_Data(pcommand->u32_addr_data_store, &j, 1U);
 80010e6:	4b7b      	ldr	r3, [pc, #492]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	1d39      	adds	r1, r7, #4
 80010ee:	2201      	movs	r2, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fae5 	bl	80006c0 <Flash_Write_Data>

    		  pcommand->u32_addr_data_store += 4;
 80010f6:	4b77      	ldr	r3, [pc, #476]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	4b75      	ldr	r3, [pc, #468]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3204      	adds	r2, #4
 8001102:	615a      	str	r2, [r3, #20]
    		  pcommand->data_print_size += 4;
 8001104:	4b73      	ldr	r3, [pc, #460]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	4b72      	ldr	r3, [pc, #456]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3204      	adds	r2, #4
 8001110:	611a      	str	r2, [r3, #16]

    		//lưu data
			Flash_Write_Data(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, numofwords);
 8001112:	4b70      	ldr	r3, [pc, #448]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6958      	ldr	r0, [r3, #20]
 8001118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111a:	3302      	adds	r3, #2
 800111c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800111e:	b292      	uxth	r2, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff facd 	bl	80006c0 <Flash_Write_Data>

			//cập nhật chi�?u dài tổng
			pcommand->data_print_size +=myRxDataLength;
 8001126:	4b6b      	ldr	r3, [pc, #428]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	897b      	ldrh	r3, [r7, #10]
 800112e:	4619      	mov	r1, r3
 8001130:	4b68      	ldr	r3, [pc, #416]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	440a      	add	r2, r1
 8001136:	611a      	str	r2, [r3, #16]
			pcommand->u32_addr_data_store +=myRxDataLength;
 8001138:	4b66      	ldr	r3, [pc, #408]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	897b      	ldrh	r3, [r7, #10]
 8001140:	4619      	mov	r1, r3
 8001142:	4b64      	ldr	r3, [pc, #400]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	440a      	add	r2, r1
 8001148:	615a      	str	r2, [r3, #20]
		  }


    	  /* --------------- start so sanh de xu ly -------------------------------------*/
    	  uint8_t sosanhlenh =sosanhlenhfct(pmydata,len,&myRxDataLength);
 800114a:	f107 030a 	add.w	r3, r7, #10
 800114e:	461a      	mov	r2, r3
 8001150:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001152:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001154:	f7ff fefc 	bl	8000f50 <sosanhlenhfct>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    	  if(sosanhlenh ==1)
 800115e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001162:	2b01      	cmp	r3, #1
 8001164:	d155      	bne.n	8001212 <kiemtra_request_tu_PC+0x1be>
    	  		{
    	  			 //so sánh bộ nhớ trống
    	  			 uint8_t tamnho = pcommand->number_printed - pcommand->number_printed_processing;
 8001166:	4b5b      	ldr	r3, [pc, #364]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800116e:	4b59      	ldr	r3, [pc, #356]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    	  			 if (tamnho >= MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME)
 800117c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001180:	2b01      	cmp	r3, #1
 8001182:	d906      	bls.n	8001192 <kiemtra_request_tu_PC+0x13e>
    	  			 {
    	  				 sosanhlenh =0;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    	  				 USBD_UsrLogCog("\n reach max printed support \n");
 800118a:	4853      	ldr	r0, [pc, #332]	@ (80012d8 <kiemtra_request_tu_PC+0x284>)
 800118c:	f004 f8ba 	bl	8005304 <puts>
 8001190:	e0de      	b.n	8001350 <kiemtra_request_tu_PC+0x2fc>
    	  			 }
    	  			 else
    	  			 {
    	  				//bắt đầu in
    	  				 if (pcommand->duocphepdebug ==DEBUG_OK)
 8001192:	4b50      	ldr	r3, [pc, #320]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <kiemtra_request_tu_PC+0x156>
    	  				 {
    	  					 USBD_UsrLog("#CMD S1");
 800119e:	484f      	ldr	r0, [pc, #316]	@ (80012dc <kiemtra_request_tu_PC+0x288>)
 80011a0:	f004 f840 	bl	8005224 <iprintf>
 80011a4:	200a      	movs	r0, #10
 80011a6:	f004 f84f 	bl	8005248 <putchar>
    	  				 }

    	  				 /* reset các biến */
    	  				 pcommand->data_print_size = 0U;
 80011aa:	4b4a      	ldr	r3, [pc, #296]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
    	  				 pcommand->ui8_startprint =1U;
 80011b2:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	771a      	strb	r2, [r3, #28]
    	  				 pcommand->dataprint_doing =0U;
 80011ba:	4b46      	ldr	r3, [pc, #280]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	805a      	strh	r2, [r3, #2]
    	  				 pcommand->dataprint_tonglenh =0U;
 80011c2:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
    	  				 pcommand->print_length_tam =0U;
 80011ca:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	809a      	strh	r2, [r3, #4]
    	  				 pcommand->package_index =0U;
 80011d2:	4b40      	ldr	r3, [pc, #256]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24


    	  				 /* thiết lập nhận data pringting */

    	  				 int vitridoctin = pcommand->number_printed % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 80011da:	4b3e      	ldr	r3, [pc, #248]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]

    	  				 if(vitridoctin ==1)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <kiemtra_request_tu_PC+0x1ac>
    	  				 {
    	  					 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR2;
 80011ee:	4b39      	ldr	r3, [pc, #228]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a3b      	ldr	r2, [pc, #236]	@ (80012e0 <kiemtra_request_tu_PC+0x28c>)
 80011f4:	615a      	str	r2, [r3, #20]
    	  					 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR2;
 80011f6:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a3a      	ldr	r2, [pc, #232]	@ (80012e4 <kiemtra_request_tu_PC+0x290>)
 80011fc:	619a      	str	r2, [r3, #24]
 80011fe:	e0a7      	b.n	8001350 <kiemtra_request_tu_PC+0x2fc>
    	  				 }
    	  				 else
    	  				 {
    	  					 pcommand->u32_addr_data_store = FLASH_USER_START_ADDR;
 8001200:	4b34      	ldr	r3, [pc, #208]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a38      	ldr	r2, [pc, #224]	@ (80012e8 <kiemtra_request_tu_PC+0x294>)
 8001206:	615a      	str	r2, [r3, #20]
    	  					 pcommand->u32_addr_header_store =FLASH_USER_HEADDER_ADDR;
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a37      	ldr	r2, [pc, #220]	@ (80012ec <kiemtra_request_tu_PC+0x298>)
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	e09e      	b.n	8001350 <kiemtra_request_tu_PC+0x2fc>
    	  				 }
    	  			 }
    	  		}
    	  		else if(sosanhlenh ==2)
 8001212:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001216:	2b02      	cmp	r3, #2
 8001218:	f040 809a 	bne.w	8001350 <kiemtra_request_tu_PC+0x2fc>
    	  		{
    	  			USBD_UsrLogCog(" have end, stt = %x \n", pcommand->ui8_startprint);
 800121c:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	7f1b      	ldrb	r3, [r3, #28]
 8001222:	4619      	mov	r1, r3
 8001224:	4832      	ldr	r0, [pc, #200]	@ (80012f0 <kiemtra_request_tu_PC+0x29c>)
 8001226:	f003 fffd 	bl	8005224 <iprintf>
    	  			//kết thúc in
    	  			if(pcommand->ui8_startprint == 1U)
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	7f1b      	ldrb	r3, [r3, #28]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 808d 	bne.w	8001350 <kiemtra_request_tu_PC+0x2fc>
    	  			{
    	  				pcommand->ui8_startprint =0U;
 8001236:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	771a      	strb	r2, [r3, #28]
    	  				pcommand->ui8_printing =0U;
 800123e:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	775a      	strb	r2, [r3, #29]
    	  				 pcommand->WAIT_SEND_TO_SERVER =1U;
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	779a      	strb	r2, [r3, #30]
    	  				 pcommand->number_printed++;
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001256:	3201      	adds	r2, #1
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


    	  				 pcommand->package_index++;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001264:	3201      	adds	r2, #1
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24

    	  				 /* tính tổng gói từ các gói thành phần */
    	  				 uint32_t pp = pcommand->package_index;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    	  				 uint32_t tamlen =0U;
 8001270:	2300      	movs	r3, #0
 8001272:	647b      	str	r3, [r7, #68]	@ 0x44
    	  				 uint32_t diachitam = pcommand->u32_addr_header_store;
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40

    	  				 /* save total package */
    	  				 Flash_Write_Data(diachitam, &pcommand->package_index, 1U);
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3324      	adds	r3, #36	@ 0x24
 8001282:	2201      	movs	r2, #1
 8001284:	4619      	mov	r1, r3
 8001286:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001288:	f7ff fa1a 	bl	80006c0 <Flash_Write_Data>
    	  				 USBD_UsrLogCog(" total package = %ld \n", pcommand->package_index);
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4817      	ldr	r0, [pc, #92]	@ (80012f4 <kiemtra_request_tu_PC+0x2a0>)
 8001296:	f003 ffc5 	bl	8005224 <iprintf>

    	  				 diachitam+=4;
 800129a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800129c:	3304      	adds	r3, #4
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
    	  				 /* save len package */
    	  				 if (pp ==1U)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10f      	bne.n	80012c6 <kiemtra_request_tu_PC+0x272>
    	  				 {
    	  					 USBD_UsrLogCog(" 1 package = %ld \n", pcommand->data_print_size);
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4812      	ldr	r0, [pc, #72]	@ (80012f8 <kiemtra_request_tu_PC+0x2a4>)
 80012b0:	f003 ffb8 	bl	8005224 <iprintf>
    	  					 Flash_Write_Data(diachitam, &pcommand->data_print_size, 1U);
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <kiemtra_request_tu_PC+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3310      	adds	r3, #16
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80012c0:	f7ff f9fe 	bl	80006c0 <Flash_Write_Data>
 80012c4:	e03d      	b.n	8001342 <kiemtra_request_tu_PC+0x2ee>
    	  				 }
    	  				 else
    	  				 {
    	  					 for (int k =0; k< pp;k++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012ca:	e036      	b.n	800133a <kiemtra_request_tu_PC+0x2e6>
 80012cc:	20001a4c 	.word	0x20001a4c
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	20000020 	.word	0x20000020
 80012d8:	08006678 	.word	0x08006678
 80012dc:	08006698 	.word	0x08006698
 80012e0:	080a0028 	.word	0x080a0028
 80012e4:	080a0000 	.word	0x080a0000
 80012e8:	08020028 	.word	0x08020028
 80012ec:	08020000 	.word	0x08020000
 80012f0:	080066a0 	.word	0x080066a0
 80012f4:	08006620 	.word	0x08006620
 80012f8:	080066b8 	.word	0x080066b8
    	  					 {
    	  						 tamlen += pcommand->chieudaitungfile[k];/* get save file*/
 80012fc:	4b59      	ldr	r3, [pc, #356]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001302:	320a      	adds	r2, #10
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800130a:	4413      	add	r3, r2
 800130c:	647b      	str	r3, [r7, #68]	@ 0x44
    	  						 Flash_Write_Data(diachitam, &pcommand->chieudaitungfile[k], 1U);
 800130e:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001314:	330a      	adds	r3, #10
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001320:	f7ff f9ce 	bl	80006c0 <Flash_Write_Data>
    	  						 diachitam += 4;
 8001324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001326:	3304      	adds	r3, #4
 8001328:	643b      	str	r3, [r7, #64]	@ 0x40

    	  						 USBD_UsrLogCog(" index = %d, total = %ld \n", k, tamlen);
 800132a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800132c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800132e:	484e      	ldr	r0, [pc, #312]	@ (8001468 <kiemtra_request_tu_PC+0x414>)
 8001330:	f003 ff78 	bl	8005224 <iprintf>
    	  					 for (int k =0; k< pp;k++)
 8001334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001336:	3301      	adds	r3, #1
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800133c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133e:	429a      	cmp	r2, r3
 8001340:	d8dc      	bhi.n	80012fc <kiemtra_request_tu_PC+0x2a8>
    	  				 }


    	 				/* reset timer*/
    	 				/* sau 1 giây mới bắt đầu xử lý bill mới */
    	 				timer_process_bill = HAL_GetTick() + 1000;
 8001342:	f001 fcc5 	bl	8002cd0 <HAL_GetTick>
 8001346:	4603      	mov	r3, r0
 8001348:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800134c:	4a47      	ldr	r2, [pc, #284]	@ (800146c <kiemtra_request_tu_PC+0x418>)
 800134e:	6013      	str	r3, [r2, #0]


    	  		/* --------------- start copy data vào vùng nhớ -------------------------------------*/

    	  		/* xác định data bắt đầu in */
    	  		if((len == 0x40) && (pcommand->ui8_startprint ==1U))
 8001350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001352:	2b40      	cmp	r3, #64	@ 0x40
 8001354:	d108      	bne.n	8001368 <kiemtra_request_tu_PC+0x314>
 8001356:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	7f1b      	ldrb	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d103      	bne.n	8001368 <kiemtra_request_tu_PC+0x314>
    	  		{
    	  			pcommand->ui8_printing =1U;
 8001360:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	775a      	strb	r2, [r3, #29]
    	  		}

    	  		if (pcommand->ui8_printing ==1U)
 8001368:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	7f5b      	ldrb	r3, [r3, #29]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d174      	bne.n	800145c <kiemtra_request_tu_PC+0x408>
    	  		{
    	  			if(len > 0U)
 8001372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001374:	2b00      	cmp	r3, #0
 8001376:	d071      	beq.n	800145c <kiemtra_request_tu_PC+0x408>
    	  			{
    	  				myRxDataLength =len;
 8001378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800137a:	b29b      	uxth	r3, r3
 800137c:	817b      	strh	r3, [r7, #10]
    	  				pcommand->data_print_size +=myRxDataLength;
 800137e:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	897b      	ldrh	r3, [r7, #10]
 8001386:	4619      	mov	r1, r3
 8001388:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	440a      	add	r2, r1
 800138e:	611a      	str	r2, [r3, #16]

    	  				/* cập nhật chi�?u dài file */
    	  				uint8_t indenew = pcommand->package_index;
 8001390:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	76fb      	strb	r3, [r7, #27]
    	  				pcommand->chieudaitungfile[indenew] = pcommand->data_print_size;
 8001398:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	4b31      	ldr	r3, [pc, #196]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	7efa      	ldrb	r2, [r7, #27]
 80013a2:	6909      	ldr	r1, [r1, #16]
 80013a4:	320a      	adds	r2, #10
 80013a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    	  				/*store data to flash */
    	  				int u = len %4;
 80013aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ac:	425a      	negs	r2, r3
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	bf58      	it	pl
 80013b8:	4253      	negpl	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
    	  				if (u)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d02a      	beq.n	8001418 <kiemtra_request_tu_PC+0x3c4>
    	  				{
    	  					u = 4 -u;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f1c3 0304 	rsb	r3, r3, #4
 80013c8:	617b      	str	r3, [r7, #20]
    	  					myRxDataLength += u;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	897b      	ldrh	r3, [r7, #10]
 80013d0:	4413      	add	r3, r2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	817b      	strh	r3, [r7, #10]

    	  					/* lưu chi�?u dài file 1*/
    	  					uint8_t l = pcommand->package_index;
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013dc:	74fb      	strb	r3, [r7, #19]
    	  					pcommand->chieudaitungfile[l] = pcommand->data_print_size;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	7cfa      	ldrb	r2, [r7, #19]
 80013e8:	6909      	ldr	r1, [r1, #16]
 80013ea:	320a      	adds	r2, #10
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    	  					USBD_UsrLogCog(" save index = %d, len = %ld \n", l, pcommand->chieudaitungfile[l]);
 80013f0:	7cf9      	ldrb	r1, [r7, #19]
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7cfa      	ldrb	r2, [r7, #19]
 80013f8:	320a      	adds	r2, #10
 80013fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fe:	461a      	mov	r2, r3
 8001400:	481b      	ldr	r0, [pc, #108]	@ (8001470 <kiemtra_request_tu_PC+0x41c>)
 8001402:	f003 ff0f 	bl	8005224 <iprintf>

    	  					pcommand->data_print_size =0U;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
    	  					pcommand->package_index++;
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001414:	3201      	adds	r2, #1
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
    	  				}

    	  				int numofwords = (myRxDataLength/4)+((myRxDataLength%4)!=0);
 8001418:	897b      	ldrh	r3, [r7, #10]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	897b      	ldrh	r3, [r7, #10]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	b29b      	uxth	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
    	  				Flash_Write_Data(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, numofwords);
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6958      	ldr	r0, [r3, #20]
 800143c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143e:	3302      	adds	r3, #2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	b292      	uxth	r2, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff f93b 	bl	80006c0 <Flash_Write_Data>

    	  //				Flash_Write_byte(pcommand->u32_addr_data_store, (uint32_t *)pmydata->noidung_data, myRxDataLength);

    	  				pcommand->u32_addr_data_store +=myRxDataLength;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	897b      	ldrh	r3, [r7, #10]
 8001452:	4619      	mov	r1, r3
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <kiemtra_request_tu_PC+0x410>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	440a      	add	r2, r1
 800145a:	615a      	str	r2, [r3, #20]
    	  		/* --------------- end copy data vào vùng nhớ -------------------------------------*/



      }
}
 800145c:	bf00      	nop
 800145e:	3748      	adds	r7, #72	@ 0x48
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000020 	.word	0x20000020
 8001468:	080066cc 	.word	0x080066cc
 800146c:	20001a40 	.word	0x20001a40
 8001470:	080066e8 	.word	0x080066e8

08001474 <transmit_to_esp_process>:
 * dùng ngắt tx truy�?n qua ESP
 *
 *
 */
void transmit_to_esp_process()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	switch (quanlyESP.indextx)
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <transmit_to_esp_process+0xa0>)
 800147c:	7f1b      	ldrb	r3, [r3, #28]
 800147e:	2b04      	cmp	r3, #4
 8001480:	d83b      	bhi.n	80014fa <transmit_to_esp_process+0x86>
 8001482:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <transmit_to_esp_process+0x14>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	080014bf 	.word	0x080014bf
 800148c:	080014fb 	.word	0x080014fb
 8001490:	080014df 	.word	0x080014df
 8001494:	0800149d 	.word	0x0800149d
 8001498:	080014ab 	.word	0x080014ab
	{
	  case ESP_INIT:
	  {
		  ui8_status_esp =1U;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <transmit_to_esp_process+0xa4>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
		  quanlyESP.indextx =ESP_WAIT_ESPIDLE;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	771a      	strb	r2, [r3, #28]
		  break;
 80014a8:	e030      	b.n	800150c <transmit_to_esp_process+0x98>
	  }
	  case ESP_WAIT_ESPIDLE:
	  {
		  /* ch�? esp rảnh */
		  check_status_esp();
 80014aa:	f000 f975 	bl	8001798 <check_status_esp>
		  if (ui8_status_esp ==0U)
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <transmit_to_esp_process+0xa4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d125      	bne.n	8001502 <transmit_to_esp_process+0x8e>
		  {
			  quanlyESP.indextx =ESP_STATE_SETUP;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	771a      	strb	r2, [r3, #28]
		  }
		  break;
 80014bc:	e021      	b.n	8001502 <transmit_to_esp_process+0x8e>
	  }
	  case ESP_STATE_SETUP:/* idle */
	  {
		  HAL_StatusTypeDef tt = HAL_UART_Transmit_IT(&huart1,PRINTER_TX_Buffer,quanlyESP.lentx);
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014c2:	461a      	mov	r2, r3
 80014c4:	4915      	ldr	r1, [pc, #84]	@ (800151c <transmit_to_esp_process+0xa8>)
 80014c6:	4816      	ldr	r0, [pc, #88]	@ (8001520 <transmit_to_esp_process+0xac>)
 80014c8:	f002 ff6b 	bl	80043a2 <HAL_UART_Transmit_IT>
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
		  if (tt == HAL_OK)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d117      	bne.n	8001506 <transmit_to_esp_process+0x92>
		  {
			  quanlyESP.indextx =ESP_WAITSEND;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014d8:	2202      	movs	r2, #2
 80014da:	771a      	strb	r2, [r3, #28]
		  }
		  break;
 80014dc:	e013      	b.n	8001506 <transmit_to_esp_process+0x92>
	  }
	  case ESP_WAITSEND:
	  {
			if (quanlyESP.status_tx_datruyenxong == 1)
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014e0:	7f5b      	ldrb	r3, [r3, #29]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d111      	bne.n	800150a <transmit_to_esp_process+0x96>
			  {
#if (0)
				uint32_t tam1 = HAL_GetTick() - biendebug_code.u32_meas;
				USBH_UsrLog("#tx finish = %d %d time = %ld ms",user_manage_request.request_tx_to_esp,user_manage_request.request_tong_nhan,tam1);
#endif
				quanlyESP.cmd_tx =0U;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	849a      	strh	r2, [r3, #36]	@ 0x24
				quanlyESP.status_tx_datruyenxong =0;
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	775a      	strb	r2, [r3, #29]
				quanlyESP.indextx =ESP_INIT;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014f4:	2203      	movs	r2, #3
 80014f6:	771a      	strb	r2, [r3, #28]
			  }
		  break;
 80014f8:	e007      	b.n	800150a <transmit_to_esp_process+0x96>
	  }

	  default:
		  quanlyESP.indextx =ESP_INIT;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <transmit_to_esp_process+0xa0>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	771a      	strb	r2, [r3, #28]
		  break;
 8001500:	e004      	b.n	800150c <transmit_to_esp_process+0x98>
		  break;
 8001502:	bf00      	nop
 8001504:	e002      	b.n	800150c <transmit_to_esp_process+0x98>
		  break;
 8001506:	bf00      	nop
 8001508:	e000      	b.n	800150c <transmit_to_esp_process+0x98>
		  break;
 800150a:	bf00      	nop
	}
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000a10 	.word	0x20000a10
 8001518:	20001a44 	.word	0x20001a44
 800151c:	200001dc 	.word	0x200001dc
 8001520:	200000e4 	.word	0x200000e4

08001524 <get_header>:
int get_header()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	@ 0x38
 8001528:	af02      	add	r7, sp, #8
	int kq =0;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USBD_CongLog("--------------get_header------------------------------\n");
 800152e:	484e      	ldr	r0, [pc, #312]	@ (8001668 <get_header+0x144>)
 8001530:	f003 fe78 	bl	8005224 <iprintf>
 8001534:	484d      	ldr	r0, [pc, #308]	@ (800166c <get_header+0x148>)
 8001536:	f003 fee5 	bl	8005304 <puts>

	 uint32_t totaltam =0;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]

	u32_addr_data_user =get_addr_header();
 800153e:	f000 f961 	bl	8001804 <get_addr_header>
 8001542:	4603      	mov	r3, r0
 8001544:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <get_header+0x14c>)
 8001546:	6013      	str	r3, [r2, #0]

	/*đ�?c tổng số package */

	uint32_t pp =0;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
	ui32_total_data_print =0;
 800154c:	4b49      	ldr	r3, [pc, #292]	@ (8001674 <get_header+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

	Flash_Read_Data(u32_addr_data_user, &pp, 1U);
 8001552:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <get_header+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f107 011c 	add.w	r1, r7, #28
 800155a:	2201      	movs	r2, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f8e3 	bl	8000728 <Flash_Read_Data>
	ui32_package_index_total = pp;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4a44      	ldr	r2, [pc, #272]	@ (8001678 <get_header+0x154>)
 8001566:	6013      	str	r3, [r2, #0]

	u32_addr_data_user += 4; //địa chỉ gói đầu tiên
 8001568:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <get_header+0x14c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	4a40      	ldr	r2, [pc, #256]	@ (8001670 <get_header+0x14c>)
 8001570:	6013      	str	r3, [r2, #0]
	USBD_CongLog("total package =%ld\n",pp);
 8001572:	483d      	ldr	r0, [pc, #244]	@ (8001668 <get_header+0x144>)
 8001574:	f003 fe56 	bl	8005224 <iprintf>
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4619      	mov	r1, r3
 800157c:	483f      	ldr	r0, [pc, #252]	@ (800167c <get_header+0x158>)
 800157e:	f003 fe51 	bl	8005224 <iprintf>

	if(pp==1)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d111      	bne.n	80015ac <get_header+0x88>
	{
		Flash_Read_Data(u32_addr_data_user, &totaltam, 1U);
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <get_header+0x14c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f107 0120 	add.w	r1, r7, #32
 8001590:	2201      	movs	r2, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f8c8 	bl	8000728 <Flash_Read_Data>
		ui32_total_data_print = totaltam;
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	4a36      	ldr	r2, [pc, #216]	@ (8001674 <get_header+0x150>)
 800159c:	6013      	str	r3, [r2, #0]
		USBD_UsrLogCog(" read 1 package = %ld \n", ui32_total_data_print);
 800159e:	4b35      	ldr	r3, [pc, #212]	@ (8001674 <get_header+0x150>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4836      	ldr	r0, [pc, #216]	@ (8001680 <get_header+0x15c>)
 80015a6:	f003 fe3d 	bl	8005224 <iprintf>
 80015aa:	e03b      	b.n	8001624 <get_header+0x100>
	}
	else if (pp > 0 && pp < 10)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d036      	beq.n	8001620 <get_header+0xfc>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	d833      	bhi.n	8001620 <get_header+0xfc>
	{
		ui32_total_data_print =0U;
 80015b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <get_header+0x150>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
		uint32_t quai[6];
		Flash_Read_Data(u32_addr_data_user, quai, 5U);
 80015be:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <get_header+0x14c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1d39      	adds	r1, r7, #4
 80015c4:	2205      	movs	r2, #5
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f8ae 	bl	8000728 <Flash_Read_Data>

		int uu = (int)pp;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int kk = 0; kk < uu; kk++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d4:	e01f      	b.n	8001616 <get_header+0xf2>
		 {
//			 Flash_Read_Data(u32_addr_data_user, &totaltam, 1U);

			totaltam=quai[kk];
 80015d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	3330      	adds	r3, #48	@ 0x30
 80015dc:	443b      	add	r3, r7
 80015de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80015e2:	623b      	str	r3, [r7, #32]
			ui32_total_data_print += totaltam;
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <get_header+0x150>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <get_header+0x150>)
 80015ee:	6013      	str	r3, [r2, #0]

			 u32_addr_data_user += 4;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <get_header+0x14c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3304      	adds	r3, #4
 80015f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001670 <get_header+0x14c>)
 80015f8:	6013      	str	r3, [r2, #0]

			 USBD_UsrLogCog(" index = %d, addr = %lx, len1 = %ld, total = %ld \n", kk, u32_addr_data_user, totaltam, ui32_total_data_print);
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <get_header+0x14c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	6a39      	ldr	r1, [r7, #32]
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <get_header+0x150>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	460b      	mov	r3, r1
 8001608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800160a:	481e      	ldr	r0, [pc, #120]	@ (8001684 <get_header+0x160>)
 800160c:	f003 fe0a 	bl	8005224 <iprintf>
		for (int kk = 0; kk < uu; kk++)
 8001610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001612:	3301      	adds	r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	429a      	cmp	r2, r3
 800161c:	dbdb      	blt.n	80015d6 <get_header+0xb2>
	{
 800161e:	e001      	b.n	8001624 <get_header+0x100>
		 }
	}
	else
	{
		kq =1;
 8001620:	2301      	movs	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	if (ui32_total_data_print > 3*128*1024)/* 3 sector *128k*/
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <get_header+0x150>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800162c:	d907      	bls.n	800163e <get_header+0x11a>
	{
		ui32_total_data_print =0;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <get_header+0x150>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
		USBD_UsrLogCog(" set totallen = 0 \n");
 8001634:	4814      	ldr	r0, [pc, #80]	@ (8001688 <get_header+0x164>)
 8001636:	f003 fe65 	bl	8005304 <puts>
		kq=1;
 800163a:	2301      	movs	r3, #1
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	USBD_CongLog("Read =%ld\n",ui32_total_data_print);
 800163e:	480a      	ldr	r0, [pc, #40]	@ (8001668 <get_header+0x144>)
 8001640:	f003 fdf0 	bl	8005224 <iprintf>
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <get_header+0x150>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	4810      	ldr	r0, [pc, #64]	@ (800168c <get_header+0x168>)
 800164c:	f003 fdea 	bl	8005224 <iprintf>

	USBD_CongLog("--------------End get_header------------------------------\n");
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <get_header+0x144>)
 8001652:	f003 fde7 	bl	8005224 <iprintf>
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <get_header+0x16c>)
 8001658:	f003 fe54 	bl	8005304 <puts>
	return kq;
 800165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800165e:	4618      	mov	r0, r3
 8001660:	3730      	adds	r7, #48	@ 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08006708 	.word	0x08006708
 800166c:	08006710 	.word	0x08006710
 8001670:	200001c4 	.word	0x200001c4
 8001674:	200001c8 	.word	0x200001c8
 8001678:	200001bc 	.word	0x200001bc
 800167c:	08006748 	.word	0x08006748
 8001680:	0800675c 	.word	0x0800675c
 8001684:	08006774 	.word	0x08006774
 8001688:	080067a8 	.word	0x080067a8
 800168c:	080067bc 	.word	0x080067bc
 8001690:	080067c8 	.word	0x080067c8

08001694 <get_nextdata>:
int get_nextdata()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
	int kq =0;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
	USBD_CongLog("--------------get_nextdata------------------------------\n");
 800169e:	4833      	ldr	r0, [pc, #204]	@ (800176c <get_nextdata+0xd8>)
 80016a0:	f003 fdc0 	bl	8005224 <iprintf>
 80016a4:	4832      	ldr	r0, [pc, #200]	@ (8001770 <get_nextdata+0xdc>)
 80016a6:	f003 fe2d 	bl	8005304 <puts>
	/* offset cho data tiếp theo */
	u32_addr_data_user += ui32_data_offset;
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <get_nextdata+0xe0>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <get_nextdata+0xe4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001774 <get_nextdata+0xe0>)
 80016b6:	6013      	str	r3, [r2, #0]
	USBD_UsrLogCog(" u32_addr_data_user = %lx \n", u32_addr_data_user);
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <get_nextdata+0xe0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	482f      	ldr	r0, [pc, #188]	@ (800177c <get_nextdata+0xe8>)
 80016c0:	f003 fdb0 	bl	8005224 <iprintf>

	 uint32_t totaltam =0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
	 uint32_t diachitam =0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
	 uint32_t tam =0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
	/*lấy địa chỉ tạm*/

	 diachitam = ui32_package_index_sending*4;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <get_nextdata+0xec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
	 tam = get_addr_header();
 80016d8:	f000 f894 	bl	8001804 <get_addr_header>
 80016dc:	60f8      	str	r0, [r7, #12]
	 diachitam += tam;//offset
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
	 diachitam += 4;//b�? qua total package
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	3304      	adds	r3, #4
 80016ea:	613b      	str	r3, [r7, #16]

	 Flash_Read_Data(diachitam, &totaltam, 1U);
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2201      	movs	r2, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	6938      	ldr	r0, [r7, #16]
 80016f4:	f7ff f818 	bl	8000728 <Flash_Read_Data>

	 USBD_UsrLogCog(" new package %ld, len1 = %ld \n", ui32_package_index_sending, totaltam);
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <get_nextdata+0xec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4619      	mov	r1, r3
 8001700:	4820      	ldr	r0, [pc, #128]	@ (8001784 <get_nextdata+0xf0>)
 8001702:	f003 fd8f 	bl	8005224 <iprintf>

	 /* d�?i offset data */
	 int u = totaltam %4;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	60bb      	str	r3, [r7, #8]
	if (u)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00b      	beq.n	800172c <get_nextdata+0x98>
	{
		ui32_data_offset = 4 -u;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f1c3 0304 	rsb	r3, r3, #4
 800171a:	461a      	mov	r2, r3
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <get_nextdata+0xe4>)
 800171e:	601a      	str	r2, [r3, #0]
		USBD_UsrLogCog(" next offset data = %ld \n", ui32_data_offset);
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <get_nextdata+0xe4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	4818      	ldr	r0, [pc, #96]	@ (8001788 <get_nextdata+0xf4>)
 8001728:	f003 fd7c 	bl	8005224 <iprintf>
	}


	 ui32_txprinterlength = totaltam;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <get_nextdata+0xf8>)
 8001730:	6013      	str	r3, [r2, #0]

	if (ui32_txprinterlength > 3*128*1024)/* 3 sector *128k*/
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <get_nextdata+0xf8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800173a:	d907      	bls.n	800174c <get_nextdata+0xb8>
	{
		ui32_txprinterlength =0;
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <get_nextdata+0xf8>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
		USBD_UsrLogCog(" set len = 0 \n");
 8001742:	4813      	ldr	r0, [pc, #76]	@ (8001790 <get_nextdata+0xfc>)
 8001744:	f003 fdde 	bl	8005304 <puts>
		kq =1;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
	}

	 ui32_package_index_sending++; //chỉ tới gói tiếp theo
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <get_nextdata+0xec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <get_nextdata+0xec>)
 8001754:	6013      	str	r3, [r2, #0]
	USBD_CongLog("--------------End get_nextdata------------------------------\n");
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <get_nextdata+0xd8>)
 8001758:	f003 fd64 	bl	8005224 <iprintf>
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <get_nextdata+0x100>)
 800175e:	f003 fdd1 	bl	8005304 <puts>
	return kq;
 8001762:	697b      	ldr	r3, [r7, #20]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	08006708 	.word	0x08006708
 8001770:	08006804 	.word	0x08006804
 8001774:	200001c4 	.word	0x200001c4
 8001778:	200001d0 	.word	0x200001d0
 800177c:	08006840 	.word	0x08006840
 8001780:	200001cc 	.word	0x200001cc
 8001784:	0800685c 	.word	0x0800685c
 8001788:	0800687c 	.word	0x0800687c
 800178c:	200001d8 	.word	0x200001d8
 8001790:	08006898 	.word	0x08006898
 8001794:	080068a8 	.word	0x080068a8

08001798 <check_status_esp>:
int check_status_esp()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	int kq =1;
 800179e:	2301      	movs	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
	if (ui8_status_esp ==0U) return 0; /*idle*/
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <check_status_esp+0x5c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <check_status_esp+0x16>
 80017aa:	2300      	movs	r3, #0
 80017ac:	e01d      	b.n	80017ea <check_status_esp+0x52>

	uint32_t tam = HAL_GetTick();
 80017ae:	f001 fa8f 	bl	8002cd0 <HAL_GetTick>
 80017b2:	6038      	str	r0, [r7, #0]

	if(tam > ui32_timerxset)
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <check_status_esp+0x60>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d914      	bls.n	80017e8 <check_status_esp+0x50>
	{
		/*
		 nếu timeout thì truy�?n lại gói check
		 đến khi nào ready mới xử lý truy�?n
		*/
		SERIAL_TO_SERVER("#CMD RD");
 80017be:	480f      	ldr	r0, [pc, #60]	@ (80017fc <check_status_esp+0x64>)
 80017c0:	f003 fd30 	bl	8005224 <iprintf>
 80017c4:	200a      	movs	r0, #10
 80017c6:	f003 fd3f 	bl	8005248 <putchar>
		ui32_timerxset = HAL_GetTick() + 1000;
 80017ca:	f001 fa81 	bl	8002cd0 <HAL_GetTick>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017d4:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <check_status_esp+0x60>)
 80017d6:	6013      	str	r3, [r2, #0]
		ui32_counter_send_status=HAL_GetTick() + 25000;
 80017d8:	f001 fa7a 	bl	8002cd0 <HAL_GetTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	f503 43c3 	add.w	r3, r3, #24960	@ 0x6180
 80017e2:	3328      	adds	r3, #40	@ 0x28
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <check_status_esp+0x68>)
 80017e6:	6013      	str	r3, [r2, #0]
		//{
			//u32_addr_data_user =0;
		//}
	}

	return kq;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20001a44 	.word	0x20001a44
 80017f8:	20001a48 	.word	0x20001a48
 80017fc:	080068e8 	.word	0x080068e8
 8001800:	20002db8 	.word	0x20002db8

08001804 <get_addr_header>:
uint32_t get_addr_header()
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
	uint32_t kq=0;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
	int vitridoctin = user_manage_request.number_printed_processing % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <get_addr_header+0x34>)
 8001810:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	603b      	str	r3, [r7, #0]

	 if(vitridoctin ==1)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d102      	bne.n	8001826 <get_addr_header+0x22>
	 {
		 kq =FLASH_USER_HEADDER_ADDR2;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <get_addr_header+0x38>)
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <get_addr_header+0x26>
	 }
	 else
	 {
		 kq =FLASH_USER_HEADDER_ADDR;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <get_addr_header+0x3c>)
 8001828:	607b      	str	r3, [r7, #4]
	 }
	 return kq;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20001a4c 	.word	0x20001a4c
 800183c:	080a0000 	.word	0x080a0000
 8001840:	08020000 	.word	0x08020000

08001844 <get_addr_data>:
uint32_t get_addr_data()
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
	uint32_t kq=0;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
	int vitridoctin = user_manage_request.number_printed_processing % MAX_USER_PRINTED_SUPPORT_AT_THE_SAME_TIME;
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <get_addr_data+0x34>)
 8001850:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	603b      	str	r3, [r7, #0]

	 if(vitridoctin ==1)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d102      	bne.n	8001866 <get_addr_data+0x22>
	 {
		 kq =FLASH_USER_START_ADDR2;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <get_addr_data+0x38>)
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	e001      	b.n	800186a <get_addr_data+0x26>
	 }
	 else
	 {
		 kq =FLASH_USER_START_ADDR;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <get_addr_data+0x3c>)
 8001868:	607b      	str	r3, [r7, #4]
	 }
	 return kq;
 800186a:	687b      	ldr	r3, [r7, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20001a4c 	.word	0x20001a4c
 800187c:	080a0028 	.word	0x080a0028
 8001880:	08020028 	.word	0x08020028

08001884 <clear_flash>:
void clear_flash()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
#if (DEBUG_NO_ERASER_FLASH ==10U)
	USBD_UsrLog(" clear_flash: DEBUG_NO_ERASER_FLASH");

#else
	uint32_t diachicanxoa = get_addr_header();
 800188a:	f7ff ffbb 	bl	8001804 <get_addr_header>
 800188e:	6078      	str	r0, [r7, #4]
	uint16_t numberofwords = (ui32_total_data_print/4)+((ui32_total_data_print%4)!=0);
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <clear_flash+0x50>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	b29b      	uxth	r3, r3
 8001898:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <clear_flash+0x50>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2201      	movne	r2, #1
 80018a6:	2200      	moveq	r2, #0
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	4413      	add	r3, r2
 80018ac:	807b      	strh	r3, [r7, #2]
	Flash_Erase_sector_leng(diachicanxoa, numberofwords);
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe fecc 	bl	8000650 <Flash_Erase_sector_leng>
	SERIAL_TO_SERVER("clear @%lx, len = %ld", diachicanxoa, ui32_total_data_print);
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <clear_flash+0x50>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <clear_flash+0x54>)
 80018c2:	f003 fcaf 	bl	8005224 <iprintf>
 80018c6:	200a      	movs	r0, #10
 80018c8:	f003 fcbe 	bl	8005248 <putchar>
#endif
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200001c8 	.word	0x200001c8
 80018d8:	080068f0 	.word	0x080068f0

080018dc <set_erro>:
void set_erro()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	SERIAL_TO_SERVER(" set_erro ");
 80018e0:	480b      	ldr	r0, [pc, #44]	@ (8001910 <set_erro+0x34>)
 80018e2:	f003 fc9f 	bl	8005224 <iprintf>
 80018e6:	200a      	movs	r0, #10
 80018e8:	f003 fcae 	bl	8005248 <putchar>
	/*xóa flash sau khi truy�?n qua esp*/
	clear_flash();
 80018ec:	f7ff ffca 	bl	8001884 <clear_flash>
	ui8_finished_printer =0U;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <set_erro+0x38>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	u32_addr_data_user = 0U;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <set_erro+0x3c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
	user_manage_request.number_printed_processing++;
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <set_erro+0x40>)
 80018fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <set_erro+0x40>)
 8001908:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	08006908 	.word	0x08006908
 8001914:	200001d4 	.word	0x200001d4
 8001918:	200001c4 	.word	0x200001c4
 800191c:	20001a4c 	.word	0x20001a4c

08001920 <check_data_print>:

void check_data_print()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
	if (ui8_finished_printer)
 800192a:	4ba4      	ldr	r3, [pc, #656]	@ (8001bbc <check_data_print+0x29c>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8277 	beq.w	8001e22 <check_data_print+0x502>
		uint32_t Rx_Dataread[1024];
		 int numofwords;
		 uint8_t u[5];

		 //load giá trị ban đầu
		if (u32_addr_data_user == 0U)
 8001934:	4ba2      	ldr	r3, [pc, #648]	@ (8001bc0 <check_data_print+0x2a0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d13e      	bne.n	80019ba <check_data_print+0x9a>
		{
			int eroo = get_header();
 800193c:	f7ff fdf2 	bl	8001524 <get_header>
 8001940:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001944:	f103 030c 	add.w	r3, r3, #12
 8001948:	6018      	str	r0, [r3, #0]
			if(eroo)
 800194a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800194e:	f103 030c 	add.w	r3, r3, #12
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <check_data_print+0x3e>
			{
				set_erro();
 8001958:	f7ff ffc0 	bl	80018dc <set_erro>
				return;
 800195c:	e27d      	b.n	8001e5a <check_data_print+0x53a>
			}
			else
			{
				ui32_package_index_sending =0U;
 800195e:	4b99      	ldr	r3, [pc, #612]	@ (8001bc4 <check_data_print+0x2a4>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
				ui32_data_offset =0;
 8001964:	4b98      	ldr	r3, [pc, #608]	@ (8001bc8 <check_data_print+0x2a8>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
				eroo = get_nextdata();
 800196a:	f7ff fe93 	bl	8001694 <get_nextdata>
 800196e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001972:	f103 030c 	add.w	r3, r3, #12
 8001976:	6018      	str	r0, [r3, #0]

				if (eroo)
 8001978:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800197c:	f103 030c 	add.w	r3, r3, #12
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <check_data_print+0x6c>
				{
					set_erro();
 8001986:	f7ff ffa9 	bl	80018dc <set_erro>
					return;
 800198a:	e266      	b.n	8001e5a <check_data_print+0x53a>
				}
				else
				{
					u32_addr_data_user = get_addr_data();
 800198c:	f7ff ff5a 	bl	8001844 <get_addr_data>
 8001990:	4603      	mov	r3, r0
 8001992:	4a8b      	ldr	r2, [pc, #556]	@ (8001bc0 <check_data_print+0x2a0>)
 8001994:	6013      	str	r3, [r2, #0]
					quanlyESP.index_pkg =0U;
 8001996:	4b8d      	ldr	r3, [pc, #564]	@ (8001bcc <check_data_print+0x2ac>)
 8001998:	2200      	movs	r2, #0
 800199a:	851a      	strh	r2, [r3, #40]	@ 0x28
					//bắt đầu in
		//			SERIAL_TO_SERVER("#CMD 11%d",ui32_total_data_print);
					quanlyESP.lentx = sprintf ((char *)PRINTER_TX_Buffer, "#CMD 11%ld\n", ui32_total_data_print);
 800199c:	4b8c      	ldr	r3, [pc, #560]	@ (8001bd0 <check_data_print+0x2b0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	498c      	ldr	r1, [pc, #560]	@ (8001bd4 <check_data_print+0x2b4>)
 80019a4:	488c      	ldr	r0, [pc, #560]	@ (8001bd8 <check_data_print+0x2b8>)
 80019a6:	f003 fcb5 	bl	8005314 <siprintf>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b87      	ldr	r3, [pc, #540]	@ (8001bcc <check_data_print+0x2ac>)
 80019b0:	84da      	strh	r2, [r3, #38]	@ 0x26
					quanlyESP.cmd_tx =1U;
 80019b2:	4b86      	ldr	r3, [pc, #536]	@ (8001bcc <check_data_print+0x2ac>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	849a      	strh	r2, [r3, #36]	@ 0x24
					return;
 80019b8:	e24f      	b.n	8001e5a <check_data_print+0x53a>
				}
			}
		}

		if (ui32_txprinterlength > 0U)
 80019ba:	4b88      	ldr	r3, [pc, #544]	@ (8001bdc <check_data_print+0x2bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8202 	beq.w	8001dc8 <check_data_print+0x4a8>
		{
				/* truy�?n data*/
				if (ui32_txprinterlength > BUFFER_TX_SERVER_SIZE)
 80019c4:	4b85      	ldr	r3, [pc, #532]	@ (8001bdc <check_data_print+0x2bc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019cc:	d90a      	bls.n	80019e4 <check_data_print+0xc4>
				{
					ui32_txprinterlength-=BUFFER_TX_SERVER_SIZE;
 80019ce:	4b83      	ldr	r3, [pc, #524]	@ (8001bdc <check_data_print+0x2bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80019d6:	4a81      	ldr	r2, [pc, #516]	@ (8001bdc <check_data_print+0x2bc>)
 80019d8:	6013      	str	r3, [r2, #0]
					lentosend = BUFFER_TX_SERVER_SIZE;
 80019da:	4b81      	ldr	r3, [pc, #516]	@ (8001be0 <check_data_print+0x2c0>)
 80019dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <check_data_print+0xd4>
				}
				else
				{
					lentosend = ui32_txprinterlength;
 80019e4:	4b7d      	ldr	r3, [pc, #500]	@ (8001bdc <check_data_print+0x2bc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b7d      	ldr	r3, [pc, #500]	@ (8001be0 <check_data_print+0x2c0>)
 80019ec:	801a      	strh	r2, [r3, #0]
					ui32_txprinterlength =0U;
 80019ee:	4b7b      	ldr	r3, [pc, #492]	@ (8001bdc <check_data_print+0x2bc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
				}

				numofwords = (lentosend/4)+((lentosend%4)!=0);
 80019f4:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <check_data_print+0x2c0>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b78      	ldr	r3, [pc, #480]	@ (8001be0 <check_data_print+0x2c0>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a18:	f102 0218 	add.w	r2, r2, #24
 8001a1c:	6013      	str	r3, [r2, #0]
				Flash_Read_Data(u32_addr_data_user, Rx_Dataread, numofwords);
 8001a1e:	4b68      	ldr	r3, [pc, #416]	@ (8001bc0 <check_data_print+0x2a0>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a26:	f103 0318 	add.w	r3, r3, #24
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	3b04      	subs	r3, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7fe fe77 	bl	8000728 <Flash_Read_Data>

				int so_byte_da_truyen = 4*(numofwords -1);
 8001a3a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a3e:	f103 0318 	add.w	r3, r3, #24
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a4c:	f102 0214 	add.w	r2, r2, #20
 8001a50:	6013      	str	r3, [r2, #0]
				int so_byte_conphaitruyen = lentosend - so_byte_da_truyen;
 8001a52:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <check_data_print+0x2c0>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a5c:	f103 0314 	add.w	r3, r3, #20
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a68:	f102 0210 	add.w	r2, r2, #16
 8001a6c:	6013      	str	r3, [r2, #0]

				int tamtru = sprintf ((char *)PRINTER_TX_Buffer, "#CMD P%dL%04d", quanlyESP.index_pkg, (uint16_t)lentosend);
 8001a6e:	4b57      	ldr	r3, [pc, #348]	@ (8001bcc <check_data_print+0x2ac>)
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <check_data_print+0x2c0>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	495a      	ldr	r1, [pc, #360]	@ (8001be4 <check_data_print+0x2c4>)
 8001a7a:	4857      	ldr	r0, [pc, #348]	@ (8001bd8 <check_data_print+0x2b8>)
 8001a7c:	f003 fc4a 	bl	8005314 <siprintf>
 8001a80:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a84:	f103 0304 	add.w	r3, r3, #4
 8001a88:	6018      	str	r0, [r3, #0]

				PRINTER_TX_Buffer[tamtru]='\n';
 8001a8a:	4a53      	ldr	r2, [pc, #332]	@ (8001bd8 <check_data_print+0x2b8>)
 8001a8c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a90:	f103 0304 	add.w	r3, r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	220a      	movs	r2, #10
 8001a9a:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001a9c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001aa0:	f103 0304 	add.w	r3, r3, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001aac:	f102 0204 	add.w	r2, r2, #4
 8001ab0:	6013      	str	r3, [r2, #0]

				/*truy�?n khúc đầu*/
				for(int i =0; i< numofwords-1 ; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e058      	b.n	8001b6e <check_data_print+0x24e>
				{
					convertdata(Rx_Dataread[i] , u);
 8001abc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001ad0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001ad4:	f102 0204 	add.w	r2, r2, #4
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fe41 	bl	8000762 <convertdata>
//					HAL_UART_Transmit(&huart1,u,4,0xFFFF);
					PRINTER_TX_Buffer[tamtru]=u[0];
 8001ae0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ae4:	f103 0304 	add.w	r3, r3, #4
 8001ae8:	7819      	ldrb	r1, [r3, #0]
 8001aea:	4a3b      	ldr	r2, [pc, #236]	@ (8001bd8 <check_data_print+0x2b8>)
 8001aec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001af0:	f103 0304 	add.w	r3, r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	460a      	mov	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
					PRINTER_TX_Buffer[tamtru+1]=u[1];
 8001afc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b00:	f103 0304 	add.w	r3, r3, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b0c:	f102 0205 	add.w	r2, r2, #5
 8001b10:	7811      	ldrb	r1, [r2, #0]
 8001b12:	4a31      	ldr	r2, [pc, #196]	@ (8001bd8 <check_data_print+0x2b8>)
 8001b14:	54d1      	strb	r1, [r2, r3]
					PRINTER_TX_Buffer[tamtru+2]=u[2];
 8001b16:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b1a:	f103 0304 	add.w	r3, r3, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3302      	adds	r3, #2
 8001b22:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b26:	f102 0206 	add.w	r2, r2, #6
 8001b2a:	7811      	ldrb	r1, [r2, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd8 <check_data_print+0x2b8>)
 8001b2e:	54d1      	strb	r1, [r2, r3]
					PRINTER_TX_Buffer[tamtru+3]=u[3];
 8001b30:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b34:	f103 0304 	add.w	r3, r3, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b40:	f102 0207 	add.w	r2, r2, #7
 8001b44:	7811      	ldrb	r1, [r2, #0]
 8001b46:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <check_data_print+0x2b8>)
 8001b48:	54d1      	strb	r1, [r2, r3]
					tamtru += 4;
 8001b4a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b4e:	f103 0304 	add.w	r3, r3, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3304      	adds	r3, #4
 8001b56:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b5a:	f102 0204 	add.w	r2, r2, #4
 8001b5e:	6013      	str	r3, [r2, #0]
				for(int i =0; i< numofwords-1 ; i++)
 8001b60:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b72:	f103 0318 	add.w	r3, r3, #24
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	db9b      	blt.n	8001abc <check_data_print+0x19c>
				}

				/*truy�?n khúc cuối*/

				convertdata(Rx_Dataread[numofwords-1] , u);
 8001b84:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b88:	f103 0318 	add.w	r3, r3, #24
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001b9c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001ba0:	f102 0204 	add.w	r2, r2, #4
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fddb 	bl	8000762 <convertdata>
//				HAL_UART_Transmit(&huart1,u,so_byte_conphaitruyen,0xFFFF);
				for(int m =0;m<so_byte_conphaitruyen;m++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001bb2:	f102 021c 	add.w	r2, r2, #28
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e040      	b.n	8001c3c <check_data_print+0x31c>
 8001bba:	bf00      	nop
 8001bbc:	200001d4 	.word	0x200001d4
 8001bc0:	200001c4 	.word	0x200001c4
 8001bc4:	200001cc 	.word	0x200001cc
 8001bc8:	200001d0 	.word	0x200001d0
 8001bcc:	20000a10 	.word	0x20000a10
 8001bd0:	200001c8 	.word	0x200001c8
 8001bd4:	08006914 	.word	0x08006914
 8001bd8:	200001dc 	.word	0x200001dc
 8001bdc:	200001d8 	.word	0x200001d8
 8001be0:	200001c0 	.word	0x200001c0
 8001be4:	08006920 	.word	0x08006920
				{
					PRINTER_TX_Buffer[tamtru]=u[m];
 8001be8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001bec:	f102 0204 	add.w	r2, r2, #4
 8001bf0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001bf4:	f103 031c 	add.w	r3, r3, #28
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	7819      	ldrb	r1, [r3, #0]
 8001bfe:	4a99      	ldr	r2, [pc, #612]	@ (8001e64 <check_data_print+0x544>)
 8001c00:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c04:	f103 0304 	add.w	r3, r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
					tamtru++;
 8001c10:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c14:	f103 0304 	add.w	r3, r3, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c20:	f102 0204 	add.w	r2, r2, #4
 8001c24:	6013      	str	r3, [r2, #0]
				for(int m =0;m<so_byte_conphaitruyen;m++)
 8001c26:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c2a:	f103 031c 	add.w	r3, r3, #28
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001c36:	f102 021c 	add.w	r2, r2, #28
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c40:	f103 031c 	add.w	r3, r3, #28
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c4a:	f103 0310 	add.w	r3, r3, #16
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbc9      	blt.n	8001be8 <check_data_print+0x2c8>
				}
//				SERIAL_TO_SERVER("EOP");
//				SERIAL_TO_SERVER("endpackage");

				PRINTER_TX_Buffer[tamtru]='E';
 8001c54:	4a83      	ldr	r2, [pc, #524]	@ (8001e64 <check_data_print+0x544>)
 8001c56:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c5a:	f103 0304 	add.w	r3, r3, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	2245      	movs	r2, #69	@ 0x45
 8001c64:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001c66:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c6a:	f103 0304 	add.w	r3, r3, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c76:	f102 0204 	add.w	r2, r2, #4
 8001c7a:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='O';
 8001c7c:	4a79      	ldr	r2, [pc, #484]	@ (8001e64 <check_data_print+0x544>)
 8001c7e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c82:	f103 0304 	add.w	r3, r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	224f      	movs	r2, #79	@ 0x4f
 8001c8c:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001c8e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c92:	f103 0304 	add.w	r3, r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c9e:	f102 0204 	add.w	r2, r2, #4
 8001ca2:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='P';
 8001ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8001e64 <check_data_print+0x544>)
 8001ca6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001caa:	f103 0304 	add.w	r3, r3, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2250      	movs	r2, #80	@ 0x50
 8001cb4:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001cb6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cba:	f103 0304 	add.w	r3, r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cc6:	f102 0204 	add.w	r2, r2, #4
 8001cca:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='\n';
 8001ccc:	4a65      	ldr	r2, [pc, #404]	@ (8001e64 <check_data_print+0x544>)
 8001cce:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cd2:	f103 0304 	add.w	r3, r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	220a      	movs	r2, #10
 8001cdc:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001cde:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ce2:	f103 0304 	add.w	r3, r3, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cee:	f102 0204 	add.w	r2, r2, #4
 8001cf2:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='e';
 8001cf4:	4a5b      	ldr	r2, [pc, #364]	@ (8001e64 <check_data_print+0x544>)
 8001cf6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cfa:	f103 0304 	add.w	r3, r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	2265      	movs	r2, #101	@ 0x65
 8001d04:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d06:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d0a:	f103 0304 	add.w	r3, r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d16:	f102 0204 	add.w	r2, r2, #4
 8001d1a:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='o';
 8001d1c:	4a51      	ldr	r2, [pc, #324]	@ (8001e64 <check_data_print+0x544>)
 8001d1e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d22:	f103 0304 	add.w	r3, r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	226f      	movs	r2, #111	@ 0x6f
 8001d2c:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d2e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d32:	f103 0304 	add.w	r3, r3, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d3e:	f102 0204 	add.w	r2, r2, #4
 8001d42:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='p';
 8001d44:	4a47      	ldr	r2, [pc, #284]	@ (8001e64 <check_data_print+0x544>)
 8001d46:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d4a:	f103 0304 	add.w	r3, r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	2270      	movs	r2, #112	@ 0x70
 8001d54:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d56:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d5a:	f103 0304 	add.w	r3, r3, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d66:	f102 0204 	add.w	r2, r2, #4
 8001d6a:	6013      	str	r3, [r2, #0]
				PRINTER_TX_Buffer[tamtru]='\n';
 8001d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e64 <check_data_print+0x544>)
 8001d6e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d72:	f103 0304 	add.w	r3, r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	220a      	movs	r2, #10
 8001d7c:	701a      	strb	r2, [r3, #0]
				tamtru++;
 8001d7e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d82:	f103 0304 	add.w	r3, r3, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d8e:	f102 0204 	add.w	r2, r2, #4
 8001d92:	6013      	str	r3, [r2, #0]

				quanlyESP.index_pkg ++;
 8001d94:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <check_data_print+0x548>)
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <check_data_print+0x548>)
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
				u32_addr_data_user +=lentosend;
 8001da0:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <check_data_print+0x54c>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <check_data_print+0x550>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a30      	ldr	r2, [pc, #192]	@ (8001e70 <check_data_print+0x550>)
 8001dae:	6013      	str	r3, [r2, #0]
				quanlyESP.lentx =tamtru;
 8001db0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001db4:	f103 0304 	add.w	r3, r3, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <check_data_print+0x548>)
 8001dbe:	84da      	strh	r2, [r3, #38]	@ 0x26
				quanlyESP.cmd_tx =1U;
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <check_data_print+0x548>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001dc6:	e048      	b.n	8001e5a <check_data_print+0x53a>
		}
		else
		{
			/*kiểm tra xem còn gói package nào không*/
			if (ui32_package_index_sending < ui32_package_index_total)
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <check_data_print+0x554>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <check_data_print+0x558>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d202      	bcs.n	8001dda <check_data_print+0x4ba>
			{
				/*get next package*/
				get_nextdata();
 8001dd4:	f7ff fc5e 	bl	8001694 <get_nextdata>
 8001dd8:	e03f      	b.n	8001e5a <check_data_print+0x53a>
			else
			{
				/* kết thúc truy�?n*/
//				SERIAL_TO_SERVER("#CMD 10");

				quanlyESP.lentx = sprintf ((char *)PRINTER_TX_Buffer, "#CMD 10\n");
 8001dda:	4928      	ldr	r1, [pc, #160]	@ (8001e7c <check_data_print+0x55c>)
 8001ddc:	4821      	ldr	r0, [pc, #132]	@ (8001e64 <check_data_print+0x544>)
 8001dde:	f003 fa99 	bl	8005314 <siprintf>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <check_data_print+0x548>)
 8001de8:	84da      	strh	r2, [r3, #38]	@ 0x26
				quanlyESP.cmd_tx =1U;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <check_data_print+0x548>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	849a      	strh	r2, [r3, #36]	@ 0x24

				/*xóa flash sau khi truy�?n qua esp*/
//				USBD_UsrLog(" !!!!!!!!!!! ------------debug 1957: uncomment this line");

				clear_flash();
 8001df0:	f7ff fd48 	bl	8001884 <clear_flash>

				wait_res_init(1000);
 8001df4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001df8:	f7fe ff0a 	bl	8000c10 <wait_res_init>

				ui8_finished_printer =0U;
 8001dfc:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <check_data_print+0x560>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
				u32_addr_data_user = 0U;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <check_data_print+0x550>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
				user_manage_request.number_printed_processing++;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <check_data_print+0x564>)
 8001e0a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <check_data_print+0x564>)
 8001e14:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
				user_manage_request.duocphepdebug =DEBUG_OK;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <check_data_print+0x564>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001e20:	e01b      	b.n	8001e5a <check_data_print+0x53a>
			}
		}
	}
	else
	{
		ui8_status_esp =1U;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <check_data_print+0x568>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
		quanlyESP.cmd_tx =0U;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <check_data_print+0x548>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
		//kiểm tra xem có data in hay không
		if (user_manage_request.number_printed_processing < user_manage_request.number_printed)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <check_data_print+0x564>)
 8001e30:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8001e34:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <check_data_print+0x564>)
 8001e36:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d20d      	bcs.n	8001e5a <check_data_print+0x53a>
		{
			if(HAL_GetTick() > timer_process_bill )
 8001e3e:	f000 ff47 	bl	8002cd0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <check_data_print+0x56c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d906      	bls.n	8001e5a <check_data_print+0x53a>
			{
				ui8_finished_printer =1;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <check_data_print+0x560>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
				user_manage_request.duocphepdebug =DEBUG_BUSY;
 8001e52:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <check_data_print+0x564>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			}
		}
	}
}
 8001e5a:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200001dc 	.word	0x200001dc
 8001e68:	20000a10 	.word	0x20000a10
 8001e6c:	200001c0 	.word	0x200001c0
 8001e70:	200001c4 	.word	0x200001c4
 8001e74:	200001cc 	.word	0x200001cc
 8001e78:	200001bc 	.word	0x200001bc
 8001e7c:	08006930 	.word	0x08006930
 8001e80:	200001d4 	.word	0x200001d4
 8001e84:	20001a4c 	.word	0x20001a4c
 8001e88:	20001a44 	.word	0x20001a44
 8001e8c:	20001a40 	.word	0x20001a40

08001e90 <xuly_data_print_itx>:
 * xuly_data_print_itx()
 *
 *
 */
void xuly_data_print_itx()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	if (quanlyESP.cmd_tx == 1U)
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <xuly_data_print_itx+0x1c>)
 8001e96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <xuly_data_print_itx+0x12>
	{
		transmit_to_esp_process();
 8001e9c:	f7ff faea 	bl	8001474 <transmit_to_esp_process>
	}
	else
	{
		check_data_print();
	}
}
 8001ea0:	e001      	b.n	8001ea6 <xuly_data_print_itx+0x16>
		check_data_print();
 8001ea2:	f7ff fd3d 	bl	8001920 <check_data_print>
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000a10 	.word	0x20000a10

08001eb0 <chuyentiepPrintertoPC>:
  * @param
  * @Note:
  */

void chuyentiepPrintertoPC()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
	//nhan data tu uart 3 gui cho uart2
	if(xulyUart.uart3_receivedData == 1 && xulyUart.uart2_processingData == 0)
 8001eb6:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d15d      	bne.n	8001f7e <chuyentiepPrintertoPC+0xce>
 8001ec2:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d157      	bne.n	8001f7e <chuyentiepPrintertoPC+0xce>
	  {
			HAL_UART_Transmit_IT(&huart2, xulyUart.ui8_tx2Data, xulyUart.ui16_tx2Size);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ed8:	461a      	mov	r2, r3
 8001eda:	492c      	ldr	r1, [pc, #176]	@ (8001f8c <chuyentiepPrintertoPC+0xdc>)
 8001edc:	482c      	ldr	r0, [pc, #176]	@ (8001f90 <chuyentiepPrintertoPC+0xe0>)
 8001ede:	f002 fa60 	bl	80043a2 <HAL_UART_Transmit_IT>
			xulyUart.uart2_processingData = 1;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2301      	movs	r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
			xulyUart.uart3_receivedData = 0;
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63d3      	str	r3, [r2, #60]	@ 0x3c

			printf("to PC Size = %d : ", xulyUart.ui16_tx2Size);
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f04:	4619      	mov	r1, r3
 8001f06:	4823      	ldr	r0, [pc, #140]	@ (8001f94 <chuyentiepPrintertoPC+0xe4>)
 8001f08:	f003 f98c 	bl	8005224 <iprintf>
			for (int i = 0; i < xulyUart.ui16_tx2Size; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e020      	b.n	8001f54 <chuyentiepPrintertoPC+0xa4>
					printf("%02x ", xulyUart.ui8_tx2Data[i]);
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	f603 0321 	addw	r3, r3, #2081	@ 0x821
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481d      	ldr	r0, [pc, #116]	@ (8001f98 <chuyentiepPrintertoPC+0xe8>)
 8001f22:	f003 f97f 	bl	8005224 <iprintf>

					if (i>0 && i % 20 == 0) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd10      	ble.n	8001f4e <chuyentiepPrintertoPC+0x9e>
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <chuyentiepPrintertoPC+0xec>)
 8001f30:	fb83 2301 	smull	r2, r3, r3, r1
 8001f34:	10da      	asrs	r2, r3, #3
 8001f36:	17cb      	asrs	r3, r1, #31
 8001f38:	1ad2      	subs	r2, r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	1aca      	subs	r2, r1, r3
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d102      	bne.n	8001f4e <chuyentiepPrintertoPC+0x9e>
						printf("\n");
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f003 f97d 	bl	8005248 <putchar>
			for (int i = 0; i < xulyUart.ui16_tx2Size; i++) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3301      	adds	r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	dbd5      	blt.n	8001f12 <chuyentiepPrintertoPC+0x62>
					}
			  }
			printf("\n");
 8001f66:	200a      	movs	r0, #10
 8001f68:	f003 f96e 	bl	8005248 <putchar>

			PrintUart3Data(xulyUart.ui8_rx3Data, xulyUart.ui16_tx2Size);
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <chuyentiepPrintertoPC+0xd8>)
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f76:	4619      	mov	r1, r3
 8001f78:	4809      	ldr	r0, [pc, #36]	@ (8001fa0 <chuyentiepPrintertoPC+0xf0>)
 8001f7a:	f7fe fcd7 	bl	800092c <PrintUart3Data>
	  }
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20001d64 	.word	0x20001d64
 8001f8c:	20002585 	.word	0x20002585
 8001f90:	2000012c 	.word	0x2000012c
 8001f94:	0800693c 	.word	0x0800693c
 8001f98:	08006950 	.word	0x08006950
 8001f9c:	66666667 	.word	0x66666667
 8001fa0:	20002185 	.word	0x20002185

08001fa4 <chuyentiepPCtoPrinter>:
  *         Gửi dữ liệu nhận được từ PC, chuyển cho Printer
  * @param
  * @retval none
  */
void chuyentiepPCtoPrinter()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
	if (xulyUart.uart3_processingData == 1)return;	/* đang gửi tin */
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <chuyentiepPCtoPrinter+0x84>)
 8001fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d033      	beq.n	800201e <chuyentiepPCtoPrinter+0x7a>

		if(user_manage_request.request_dang_guitin < user_manage_request.request_tong_nhan)
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <chuyentiepPCtoPrinter+0x88>)
 8001fb8:	895a      	ldrh	r2, [r3, #10]
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <chuyentiepPCtoPrinter+0x88>)
 8001fbc:	88db      	ldrh	r3, [r3, #6]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d22e      	bcs.n	8002020 <chuyentiepPCtoPrinter+0x7c>
		{
			USER_REQUESET_TypeDef *pmydata;
			  int vitridoctin = user_manage_request.request_dang_guitin % MAX_USER_GET_USB_REQUEST;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <chuyentiepPCtoPrinter+0x88>)
 8001fc4:	895a      	ldrh	r2, [r3, #10]
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <chuyentiepPCtoPrinter+0x8c>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	08d9      	lsrs	r1, r3, #3
 8001fce:	460b      	mov	r3, r1
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	60fb      	str	r3, [r7, #12]
			  pmydata =&user_manage_request.request_noidung[vitridoctin];
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2246      	movs	r2, #70	@ 0x46
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	3358      	adds	r3, #88	@ 0x58
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <chuyentiepPCtoPrinter+0x88>)
 8001fe8:	4413      	add	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
			  int len = pmydata->noidung_chieudai;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ff2:	607b      	str	r3, [r7, #4]
			  user_manage_request.request_dang_guitin++;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <chuyentiepPCtoPrinter+0x88>)
 8001ff6:	895b      	ldrh	r3, [r3, #10]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <chuyentiepPCtoPrinter+0x88>)
 8001ffe:	815a      	strh	r2, [r3, #10]

			  /* chuyển tiếp tin */
//			  printf("to prt : %d \n", len);
			  HAL_UART_Transmit_IT(&huart3, pmydata->noidung_data, len);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3302      	adds	r3, #2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	b292      	uxth	r2, r2
 8002008:	4619      	mov	r1, r3
 800200a:	480a      	ldr	r0, [pc, #40]	@ (8002034 <chuyentiepPCtoPrinter+0x90>)
 800200c:	f002 f9c9 	bl	80043a2 <HAL_UART_Transmit_IT>
			  xulyUart.uart3_processingData = 1;
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <chuyentiepPCtoPrinter+0x84>)
 8002012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002016:	461a      	mov	r2, r3
 8002018:	2301      	movs	r3, #1
 800201a:	6353      	str	r3, [r2, #52]	@ 0x34
 800201c:	e000      	b.n	8002020 <chuyentiepPCtoPrinter+0x7c>
	if (xulyUart.uart3_processingData == 1)return;	/* đang gửi tin */
 800201e:	bf00      	nop
		  HAL_UART_Transmit_IT(&huart3, xulyUart.ui8_tx3Data, xulyUart.ui16_tx3Size);
		  xulyUart.uart3_processingData = 1;
		  xulyUart.uart2_receivedData = 0;
	  }
#endif
}
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20001d64 	.word	0x20001d64
 800202c:	20001a4c 	.word	0x20001a4c
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	20000174 	.word	0x20000174

08002038 <inmainstatus>:

void inmainstatus()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	if ( HAL_GetTick() > ui32_counter_led )
 800203c:	f000 fe48 	bl	8002cd0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <inmainstatus+0xbc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d951      	bls.n	80020ee <inmainstatus+0xb6>
	{

		if (status_led == 1U) {
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <inmainstatus+0xc0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d126      	bne.n	80020a0 <inmainstatus+0x68>
			status_led =0;
 8002052:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <inmainstatus+0xc0>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,LED_Pin,1);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800205e:	4827      	ldr	r0, [pc, #156]	@ (80020fc <inmainstatus+0xc4>)
 8002060:	f001 fc60 	bl	8003924 <HAL_GPIO_WritePin>
			if(ui8_finished_printer == 1U)
 8002064:	4b26      	ldr	r3, [pc, #152]	@ (8002100 <inmainstatus+0xc8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <inmainstatus+0x42>
			{
				ui32_counter_led=HAL_GetTick() + 100;
 800206c:	f000 fe30 	bl	8002cd0 <HAL_GetTick>
 8002070:	4603      	mov	r3, r0
 8002072:	3364      	adds	r3, #100	@ 0x64
 8002074:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <inmainstatus+0xbc>)
 8002076:	6013      	str	r3, [r2, #0]
					ui32_counter_led=HAL_GetTick() + 500;
				}
			}
		}
	}
}
 8002078:	e039      	b.n	80020ee <inmainstatus+0xb6>
				if(ui8_printer_status ==1U)
 800207a:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <inmainstatus+0xcc>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <inmainstatus+0x58>
					ui32_counter_led=HAL_GetTick() + 50;
 8002082:	f000 fe25 	bl	8002cd0 <HAL_GetTick>
 8002086:	4603      	mov	r3, r0
 8002088:	3332      	adds	r3, #50	@ 0x32
 800208a:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <inmainstatus+0xbc>)
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	e02e      	b.n	80020ee <inmainstatus+0xb6>
					ui32_counter_led=HAL_GetTick() + 500;
 8002090:	f000 fe1e 	bl	8002cd0 <HAL_GetTick>
 8002094:	4603      	mov	r3, r0
 8002096:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800209a:	4a16      	ldr	r2, [pc, #88]	@ (80020f4 <inmainstatus+0xbc>)
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	e026      	b.n	80020ee <inmainstatus+0xb6>
			status_led =1;
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <inmainstatus+0xc0>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,LED_Pin,0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020ac:	4813      	ldr	r0, [pc, #76]	@ (80020fc <inmainstatus+0xc4>)
 80020ae:	f001 fc39 	bl	8003924 <HAL_GPIO_WritePin>
			if(ui8_finished_printer ==1U )
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <inmainstatus+0xc8>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d106      	bne.n	80020c8 <inmainstatus+0x90>
				ui32_counter_led=HAL_GetTick() + 100;
 80020ba:	f000 fe09 	bl	8002cd0 <HAL_GetTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	3364      	adds	r3, #100	@ 0x64
 80020c2:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <inmainstatus+0xbc>)
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	e012      	b.n	80020ee <inmainstatus+0xb6>
				if(ui8_printer_status ==1U)
 80020c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <inmainstatus+0xcc>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <inmainstatus+0xa8>
					ui32_counter_led=HAL_GetTick() + 950;
 80020d0:	f000 fdfe 	bl	8002cd0 <HAL_GetTick>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f203 33b6 	addw	r3, r3, #950	@ 0x3b6
 80020da:	4a06      	ldr	r2, [pc, #24]	@ (80020f4 <inmainstatus+0xbc>)
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	e006      	b.n	80020ee <inmainstatus+0xb6>
					ui32_counter_led=HAL_GetTick() + 500;
 80020e0:	f000 fdf6 	bl	8002cd0 <HAL_GetTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80020ea:	4a02      	ldr	r2, [pc, #8]	@ (80020f4 <inmainstatus+0xbc>)
 80020ec:	6013      	str	r3, [r2, #0]
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20001a3c 	.word	0x20001a3c
 80020f8:	20001a3b 	.word	0x20001a3b
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	200001d4 	.word	0x200001d4
 8002104:	20001a3a 	.word	0x20001a3a

08002108 <send_satatus>:

void send_satatus()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af02      	add	r7, sp, #8
	if(ui8_finished_printer ==1U )
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <send_satatus+0x5c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <send_satatus+0x20>
	{
		ui32_counter_send_status=HAL_GetTick() + 25000;
 8002116:	f000 fddb 	bl	8002cd0 <HAL_GetTick>
 800211a:	4603      	mov	r3, r0
 800211c:	f503 43c3 	add.w	r3, r3, #24960	@ 0x6180
 8002120:	3328      	adds	r3, #40	@ 0x28
 8002122:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <send_satatus+0x60>)
 8002124:	6013      	str	r3, [r2, #0]
		return;
 8002126:	e01b      	b.n	8002160 <send_satatus+0x58>
	}

	if ( HAL_GetTick() > ui32_counter_send_status )
 8002128:	f000 fdd2 	bl	8002cd0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <send_satatus+0x60>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d914      	bls.n	8002160 <send_satatus+0x58>
	{
		ui32_counter_send_status=HAL_GetTick() + 25000;
 8002136:	f000 fdcb 	bl	8002cd0 <HAL_GetTick>
 800213a:	4603      	mov	r3, r0
 800213c:	f503 43c3 	add.w	r3, r3, #24960	@ 0x6180
 8002140:	3328      	adds	r3, #40	@ 0x28
 8002142:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <send_satatus+0x60>)
 8002144:	6013      	str	r3, [r2, #0]
		SERIAL_TO_SERVER("CMD I%d %d.%d.%d", ui8_printer_status,HWVERSION,PRINTER_MODEL,RELEASEVS);
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <send_satatus+0x64>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	2304      	movs	r3, #4
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2305      	movs	r3, #5
 8002152:	2203      	movs	r2, #3
 8002154:	4806      	ldr	r0, [pc, #24]	@ (8002170 <send_satatus+0x68>)
 8002156:	f003 f865 	bl	8005224 <iprintf>
 800215a:	200a      	movs	r0, #10
 800215c:	f003 f874 	bl	8005248 <putchar>
	}

}
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200001d4 	.word	0x200001d4
 8002168:	20002db8 	.word	0x20002db8
 800216c:	20001a3a 	.word	0x20001a3a
 8002170:	08006958 	.word	0x08006958

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f000 fd45 	bl	8002c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 f8ed 	bl	800235c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f000 f9af 	bl	80024e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002186:	f000 f92f 	bl	80023e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800218a:	f000 f957 	bl	800243c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800218e:	f000 f97f 	bl	8002490 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	2110      	movs	r1, #16
 8002196:	485d      	ldr	r0, [pc, #372]	@ (800230c <main+0x198>)
 8002198:	f001 fbc4 	bl	8003924 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN2_Pin, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2120      	movs	r1, #32
 80021a0:	485a      	ldr	r0, [pc, #360]	@ (800230c <main+0x198>)
 80021a2:	f001 fbbf 	bl	8003924 <HAL_GPIO_WritePin>

  xulyUart.CountTX = 0;
 80021a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002310 <main+0x19c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
  xulyUart.ui8_indexUart = 0;
 80021ac:	4b58      	ldr	r3, [pc, #352]	@ (8002310 <main+0x19c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	761a      	strb	r2, [r3, #24]

  HAL_UART_Receive_IT(&huart1, xulyUart.ui8_RX_buf, 1);
 80021b2:	2201      	movs	r2, #1
 80021b4:	4956      	ldr	r1, [pc, #344]	@ (8002310 <main+0x19c>)
 80021b6:	4857      	ldr	r0, [pc, #348]	@ (8002314 <main+0x1a0>)
 80021b8:	f002 f928 	bl	800440c <HAL_UART_Receive_IT>

  /* thiết lập buffer nhận data từ PC */
  int i = pcommand->request_tong_nhan % MAX_USER_GET_USB_REQUEST;
 80021bc:	4b56      	ldr	r3, [pc, #344]	@ (8002318 <main+0x1a4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	88da      	ldrh	r2, [r3, #6]
 80021c2:	4b56      	ldr	r3, [pc, #344]	@ (800231c <main+0x1a8>)
 80021c4:	fba3 1302 	umull	r1, r3, r3, r2
 80021c8:	08d9      	lsrs	r1, r3, #3
 80021ca:	460b      	mov	r3, r1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	607b      	str	r3, [r7, #4]
  pmydataglobal =&pcommand->request_noidung[i];
 80021d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002318 <main+0x1a4>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2146      	movs	r1, #70	@ 0x46
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	3358      	adds	r3, #88	@ 0x58
 80021e6:	4413      	add	r3, r2
 80021e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <main+0x1ac>)
 80021ea:	6013      	str	r3, [r2, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, pmydataglobal->noidung_data, CHUNK_SIZE);
 80021ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002320 <main+0x1ac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3302      	adds	r3, #2
 80021f2:	2240      	movs	r2, #64	@ 0x40
 80021f4:	4619      	mov	r1, r3
 80021f6:	484b      	ldr	r0, [pc, #300]	@ (8002324 <main+0x1b0>)
 80021f8:	f002 f92d 	bl	8004456 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_UARTEx_ReceiveToIdle_IT(&huart3, xulyUart.ui8_rx3Data, CHUNK_SIZE);
 80021fc:	2240      	movs	r2, #64	@ 0x40
 80021fe:	494a      	ldr	r1, [pc, #296]	@ (8002328 <main+0x1b4>)
 8002200:	484a      	ldr	r0, [pc, #296]	@ (800232c <main+0x1b8>)
 8002202:	f002 f928 	bl	8004456 <HAL_UARTEx_ReceiveToIdle_IT>

//  uint32_t flash_write_start_time = 0;

  initialize_command_pair(0);
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fb72 	bl	80008f0 <initialize_command_pair>
  USBD_UsrLogCog("\n init values: \n");
 800220c:	4848      	ldr	r0, [pc, #288]	@ (8002330 <main+0x1bc>)
 800220e:	f003 f879 	bl	8005304 <puts>
  USBD_UsrLogCog(" selected_start_cmd: %d \n",0);
 8002212:	2100      	movs	r1, #0
 8002214:	4847      	ldr	r0, [pc, #284]	@ (8002334 <main+0x1c0>)
 8002216:	f003 f805 	bl	8005224 <iprintf>

  printf("selected_start_cmd = %d : ", selected_start_len);
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <main+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4846      	ldr	r0, [pc, #280]	@ (800233c <main+0x1c8>)
 8002222:	f002 ffff 	bl	8005224 <iprintf>
  			for (int i = 0; i < selected_start_len; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e01f      	b.n	800226c <main+0xf8>
  					printf("%02x ", selected_start_cmd[i]);
 800222c:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <main+0x1cc>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4842      	ldr	r0, [pc, #264]	@ (8002344 <main+0x1d0>)
 800223a:	f002 fff3 	bl	8005224 <iprintf>

  					if (i>0 && i % 20 == 0) {
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	dd10      	ble.n	8002266 <main+0xf2>
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	4b40      	ldr	r3, [pc, #256]	@ (8002348 <main+0x1d4>)
 8002248:	fb83 2301 	smull	r2, r3, r3, r1
 800224c:	10da      	asrs	r2, r3, #3
 800224e:	17cb      	asrs	r3, r1, #31
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	1aca      	subs	r2, r1, r3
 800225c:	2a00      	cmp	r2, #0
 800225e:	d102      	bne.n	8002266 <main+0xf2>
  						printf("\n");
 8002260:	200a      	movs	r0, #10
 8002262:	f002 fff1 	bl	8005248 <putchar>
  			for (int i = 0; i < selected_start_len; i++) {
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <main+0x1c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	429a      	cmp	r2, r3
 8002274:	dbda      	blt.n	800222c <main+0xb8>
  					}
  			  }
  			printf("\n");
 8002276:	200a      	movs	r0, #10
 8002278:	f002 ffe6 	bl	8005248 <putchar>

  		  printf("selected_end_sig = %d : ", selected_end_len);
 800227c:	4b33      	ldr	r3, [pc, #204]	@ (800234c <main+0x1d8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	4833      	ldr	r0, [pc, #204]	@ (8002350 <main+0x1dc>)
 8002284:	f002 ffce 	bl	8005224 <iprintf>
  		  			for (int i = 0; i < selected_end_len; i++) {
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	e01f      	b.n	80022ce <main+0x15a>
  		  					printf("%02x ", selected_end_sig[i]);
 800228e:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <main+0x1e0>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	482a      	ldr	r0, [pc, #168]	@ (8002344 <main+0x1d0>)
 800229c:	f002 ffc2 	bl	8005224 <iprintf>

  		  					if (i>0 && i % 20 == 0) {
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	dd10      	ble.n	80022c8 <main+0x154>
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <main+0x1d4>)
 80022aa:	fb83 2301 	smull	r2, r3, r3, r1
 80022ae:	10da      	asrs	r2, r3, #3
 80022b0:	17cb      	asrs	r3, r1, #31
 80022b2:	1ad2      	subs	r2, r2, r3
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	1aca      	subs	r2, r1, r3
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d102      	bne.n	80022c8 <main+0x154>
  		  						printf("\n");
 80022c2:	200a      	movs	r0, #10
 80022c4:	f002 ffc0 	bl	8005248 <putchar>
  		  			for (int i = 0; i < selected_end_len; i++) {
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <main+0x1d8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbda      	blt.n	800228e <main+0x11a>
  		  					}
  		  			  }
  		  			printf("\n");
 80022d8:	200a      	movs	r0, #10
 80022da:	f002 ffb5 	bl	8005248 <putchar>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  inmainstatus();
 80022de:	f7ff feab 	bl	8002038 <inmainstatus>
	  send_satatus();
 80022e2:	f7ff ff11 	bl	8002108 <send_satatus>
      kiemtra_request_tu_PC();
 80022e6:	f7fe feb5 	bl	8001054 <kiemtra_request_tu_PC>
      xuly_data_print_itx();
 80022ea:	f7ff fdd1 	bl	8001e90 <xuly_data_print_itx>

      chuyentiepPCtoPrinter();
 80022ee:	f7ff fe59 	bl	8001fa4 <chuyentiepPCtoPrinter>
      chuyentiepPrintertoPC();
 80022f2:	f7ff fddd 	bl	8001eb0 <chuyentiepPrintertoPC>

	  if(quanlyESP.newcmd == 1)
 80022f6:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <main+0x1e4>)
 80022f8:	7edb      	ldrb	r3, [r3, #27]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d1ef      	bne.n	80022de <main+0x16a>
	  {
		  quanlyESP.newcmd = 0;
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <main+0x1e4>)
 8002300:	2200      	movs	r2, #0
 8002302:	76da      	strb	r2, [r3, #27]
		  xuly_package_ESP();
 8002304:	f7fe fc9a 	bl	8000c3c <xuly_package_ESP>
	  inmainstatus();
 8002308:	e7e9      	b.n	80022de <main+0x16a>
 800230a:	bf00      	nop
 800230c:	40020800 	.word	0x40020800
 8002310:	20001d64 	.word	0x20001d64
 8002314:	200000e4 	.word	0x200000e4
 8002318:	20000020 	.word	0x20000020
 800231c:	cccccccd 	.word	0xcccccccd
 8002320:	20001d60 	.word	0x20001d60
 8002324:	2000012c 	.word	0x2000012c
 8002328:	20002185 	.word	0x20002185
 800232c:	20000174 	.word	0x20000174
 8002330:	0800696c 	.word	0x0800696c
 8002334:	0800697c 	.word	0x0800697c
 8002338:	200000d4 	.word	0x200000d4
 800233c:	08006998 	.word	0x08006998
 8002340:	200000d0 	.word	0x200000d0
 8002344:	08006950 	.word	0x08006950
 8002348:	66666667 	.word	0x66666667
 800234c:	200000dc 	.word	0x200000dc
 8002350:	080069b4 	.word	0x080069b4
 8002354:	200000d8 	.word	0x200000d8
 8002358:	20000a10 	.word	0x20000a10

0800235c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b092      	sub	sp, #72	@ 0x48
 8002360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002362:	f107 0318 	add.w	r3, r7, #24
 8002366:	2230      	movs	r2, #48	@ 0x30
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f003 f8da 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800237e:	2301      	movs	r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002382:	2301      	movs	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002386:	2302      	movs	r3, #2
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800238a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 20;
 8002390:	2314      	movs	r3, #20
 8002392:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002394:	23c0      	movs	r3, #192	@ 0xc0
 8002396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002398:	2302      	movs	r3, #2
 800239a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800239c:	2304      	movs	r3, #4
 800239e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fad5 	bl	8003954 <HAL_RCC_OscConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023b0:	f000 fa18 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b4:	230f      	movs	r3, #15
 80023b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b8:	2302      	movs	r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	2103      	movs	r1, #3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fd13 	bl	8003dfc <HAL_RCC_ClockConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023dc:	f000 fa02 	bl	80027e4 <Error_Handler>
  }
}
 80023e0:	bf00      	nop
 80023e2:	3748      	adds	r7, #72	@ 0x48
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 80023ee:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <MX_USART1_UART_Init+0x50>)
 80023f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 80023f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002406:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 800240e:	220c      	movs	r2, #12
 8002410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800241e:	4805      	ldr	r0, [pc, #20]	@ (8002434 <MX_USART1_UART_Init+0x4c>)
 8002420:	f001 feec 	bl	80041fc <HAL_UART_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800242a:	f000 f9db 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200000e4 	.word	0x200000e4
 8002438:	40011000 	.word	0x40011000

0800243c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <MX_USART2_UART_Init+0x50>)
 8002444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800244c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_USART2_UART_Init+0x4c>)
 8002474:	f001 fec2 	bl	80041fc <HAL_UART_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800247e:	f000 f9b1 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000012c 	.word	0x2000012c
 800248c:	40004400 	.word	0x40004400

08002490 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <MX_USART3_UART_Init+0x50>)
 8002498:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 800249c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_USART3_UART_Init+0x4c>)
 80024c8:	f001 fe98 	bl	80041fc <HAL_UART_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024d2:	f000 f987 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000174 	.word	0x20000174
 80024e0:	40004800 	.word	0x40004800

080024e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a37      	ldr	r2, [pc, #220]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b31      	ldr	r3, [pc, #196]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a30      	ldr	r2, [pc, #192]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a29      	ldr	r2, [pc, #164]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a22      	ldr	r2, [pc, #136]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <MX_GPIO_Init+0xfc>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	2130      	movs	r1, #48	@ 0x30
 800256e:	481d      	ldr	r0, [pc, #116]	@ (80025e4 <MX_GPIO_Init+0x100>)
 8002570:	f001 f9d8 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800257a:	481b      	ldr	r0, [pc, #108]	@ (80025e8 <MX_GPIO_Init+0x104>)
 800257c:	f001 f9d2 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 8002580:	2310      	movs	r3, #16
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002584:	2301      	movs	r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002588:	2302      	movs	r3, #2
 800258a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4813      	ldr	r0, [pc, #76]	@ (80025e4 <MX_GPIO_Init+0x100>)
 8002598:	f001 f826 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 800259c:	2320      	movs	r3, #32
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	480c      	ldr	r0, [pc, #48]	@ (80025e4 <MX_GPIO_Init+0x100>)
 80025b4:	f001 f818 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80025b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <MX_GPIO_Init+0x104>)
 80025d2:	f001 f809 	bl	80035e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	@ 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00

080025ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

	//	#data$
#if (1)
	 if(huart->Instance == USART1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a24      	ldr	r2, [pc, #144]	@ (800268c <HAL_UART_RxCpltCallback+0xa0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d142      	bne.n	8002684 <HAL_UART_RxCpltCallback+0x98>
	 {

	/*xử lý nhận uart theo gói*/
		 	 uint8_t inchar = quanlyESP.RX_buf[0];
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	73fb      	strb	r3, [r7, #15]

		 	if (quanlyESP.busy == 0)
 8002604:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002606:	7d9b      	ldrb	r3, [r3, #22]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d136      	bne.n	800267a <HAL_UART_RxCpltCallback+0x8e>
		 	{
				 if(inchar =='#')
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b23      	cmp	r3, #35	@ 0x23
 8002610:	d105      	bne.n	800261e <HAL_UART_RxCpltCallback+0x32>
				{
					quanlyESP.RX=1;
 8002612:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002614:	2201      	movs	r2, #1
 8002616:	761a      	strb	r2, [r3, #24]
					quanlyESP.index_uarrt =0;
 8002618:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	765a      	strb	r2, [r3, #25]
				}

				if(quanlyESP.RX ==1)
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002620:	7e1b      	ldrb	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d123      	bne.n	800266e <HAL_UART_RxCpltCallback+0x82>
				{
						quanlyESP.str[quanlyESP.index_uarrt]=inchar;
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002628:	7e5b      	ldrb	r3, [r3, #25]
 800262a:	461a      	mov	r2, r3
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 800262e:	4413      	add	r3, r2
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	709a      	strb	r2, [r3, #2]
						quanlyESP.index_uarrt++;
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002636:	7e5b      	ldrb	r3, [r3, #25]
 8002638:	3301      	adds	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 800263e:	765a      	strb	r2, [r3, #25]

						if (quanlyESP.index_uarrt > MAX_BUFFER_CMD_ESP -1 )
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002642:	7e5b      	ldrb	r3, [r3, #25]
 8002644:	2b13      	cmp	r3, #19
 8002646:	d905      	bls.n	8002654 <HAL_UART_RxCpltCallback+0x68>
						{
							/*tràn buffer*/
							quanlyESP.RX=0;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 800264a:	2200      	movs	r2, #0
 800264c:	761a      	strb	r2, [r3, #24]
							quanlyESP.index_uarrt =0;
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002650:	2200      	movs	r2, #0
 8002652:	765a      	strb	r2, [r3, #25]
						}
						if (inchar =='$')
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b24      	cmp	r3, #36	@ 0x24
 8002658:	d10f      	bne.n	800267a <HAL_UART_RxCpltCallback+0x8e>
						{
							quanlyESP.newcmd =1;
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 800265c:	2201      	movs	r2, #1
 800265e:	76da      	strb	r2, [r3, #27]
							quanlyESP.RX=0;
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002662:	2200      	movs	r2, #0
 8002664:	761a      	strb	r2, [r3, #24]
							quanlyESP.busy =1;
 8002666:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002668:	2201      	movs	r2, #1
 800266a:	759a      	strb	r2, [r3, #22]
 800266c:	e005      	b.n	800267a <HAL_UART_RxCpltCallback+0x8e>
						}
				}
				else
				{
					quanlyESP.newpagkage =1;
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002670:	2201      	movs	r2, #1
 8002672:	769a      	strb	r2, [r3, #26]
					quanlyESP.newinchar=inchar;
 8002674:	4a06      	ldr	r2, [pc, #24]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	75d3      	strb	r3, [r2, #23]
				}
		 	}

			HAL_UART_Receive_IT(&huart1, quanlyESP.RX_buf,1);
 800267a:	2201      	movs	r2, #1
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_UART_RxCpltCallback+0xa4>)
 800267e:	4805      	ldr	r0, [pc, #20]	@ (8002694 <HAL_UART_RxCpltCallback+0xa8>)
 8002680:	f001 fec4 	bl	800440c <HAL_UART_Receive_IT>
	 }
#endif

}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40011000 	.word	0x40011000
 8002690:	20000a10 	.word	0x20000a10
 8002694:	200000e4 	.word	0x200000e4

08002698 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
	static int vitriluutin;

	if (huart->Instance == USART2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <HAL_UARTEx_RxEventCallback+0xbc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12d      	bne.n	800270a <HAL_UARTEx_RxEventCallback+0x72>
			printf("\n");
		}
#endif

		/* thông báo có data mới */
		pmydataglobal->noidung_chieudai = Size;
 80026ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <HAL_UARTEx_RxEventCallback+0xc0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		pcommand->request_tong_nhan++;
 80026b8:	4b28      	ldr	r3, [pc, #160]	@ (800275c <HAL_UARTEx_RxEventCallback+0xc4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	88da      	ldrh	r2, [r3, #6]
 80026be:	3201      	adds	r2, #1
 80026c0:	b292      	uxth	r2, r2
 80026c2:	80da      	strh	r2, [r3, #6]

		/* chuẩn bị buffer để lưu data mới */
		vitriluutin = pcommand->request_tong_nhan % MAX_USER_GET_USB_REQUEST;
 80026c4:	4b25      	ldr	r3, [pc, #148]	@ (800275c <HAL_UARTEx_RxEventCallback+0xc4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	88da      	ldrh	r2, [r3, #6]
 80026ca:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_UARTEx_RxEventCallback+0xc8>)
 80026cc:	fba3 1302 	umull	r1, r3, r3, r2
 80026d0:	08d9      	lsrs	r1, r3, #3
 80026d2:	460b      	mov	r3, r1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	4b20      	ldr	r3, [pc, #128]	@ (8002764 <HAL_UARTEx_RxEventCallback+0xcc>)
 80026e2:	601a      	str	r2, [r3, #0]
		pmydataglobal =&pcommand->request_noidung[vitriluutin];
 80026e4:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_UARTEx_RxEventCallback+0xc4>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_UARTEx_RxEventCallback+0xcc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2146      	movs	r1, #70	@ 0x46
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	3358      	adds	r3, #88	@ 0x58
 80026f4:	4413      	add	r3, r2
 80026f6:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <HAL_UARTEx_RxEventCallback+0xc0>)
 80026f8:	6013      	str	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, pmydataglobal->noidung_data, CHUNK_SIZE);
 80026fa:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <HAL_UARTEx_RxEventCallback+0xc0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3302      	adds	r3, #2
 8002700:	2240      	movs	r2, #64	@ 0x40
 8002702:	4619      	mov	r1, r3
 8002704:	4818      	ldr	r0, [pc, #96]	@ (8002768 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002706:	f001 fea6 	bl	8004456 <HAL_UARTEx_ReceiveToIdle_IT>

	}
	if (huart->Instance == USART3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_UARTEx_RxEventCallback+0xd4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d11b      	bne.n	800274c <HAL_UARTEx_RxEventCallback+0xb4>
	{
		/* thông báo có data mới */
		xulyUart.ui16_tx2Size = Size;
 8002714:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800271a:	461a      	mov	r2, r3
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
		memcpy(xulyUart.ui8_tx2Data, xulyUart.ui8_rx3Data, xulyUart.ui16_tx2Size);
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800272c:	461a      	mov	r2, r3
 800272e:	4911      	ldr	r1, [pc, #68]	@ (8002774 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002730:	4811      	ldr	r0, [pc, #68]	@ (8002778 <HAL_UARTEx_RxEventCallback+0xe0>)
 8002732:	f002 ff72 	bl	800561a <memcpy>
		xulyUart.uart3_receivedData = 1;
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273c:	461a      	mov	r2, r3
 800273e:	2301      	movs	r3, #1
 8002740:	63d3      	str	r3, [r2, #60]	@ 0x3c

		/* chuẩn bị buffer để lưu data mới */
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, xulyUart.ui8_rx3Data, CHUNK_SIZE);
 8002742:	2240      	movs	r2, #64	@ 0x40
 8002744:	490b      	ldr	r1, [pc, #44]	@ (8002774 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002746:	480d      	ldr	r0, [pc, #52]	@ (800277c <HAL_UARTEx_RxEventCallback+0xe4>)
 8002748:	f001 fe85 	bl	8004456 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40004400 	.word	0x40004400
 8002758:	20001d60 	.word	0x20001d60
 800275c:	20000020 	.word	0x20000020
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	20002dbc 	.word	0x20002dbc
 8002768:	2000012c 	.word	0x2000012c
 800276c:	40004800 	.word	0x40004800
 8002770:	20001d64 	.word	0x20001d64
 8002774:	20002185 	.word	0x20002185
 8002778:	20002585 	.word	0x20002585
 800277c:	20000174 	.word	0x20000174

08002780 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a10      	ldr	r2, [pc, #64]	@ (80027d0 <HAL_UART_TxCpltCallback+0x50>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d102      	bne.n	8002798 <HAL_UART_TxCpltCallback+0x18>
	{
		quanlyESP.status_tx_datruyenxong = 1;
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_UART_TxCpltCallback+0x54>)
 8002794:	2201      	movs	r2, #1
 8002796:	775a      	strb	r2, [r3, #29]
	}
	if (huart->Instance == USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0e      	ldr	r2, [pc, #56]	@ (80027d8 <HAL_UART_TxCpltCallback+0x58>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d105      	bne.n	80027ae <HAL_UART_TxCpltCallback+0x2e>
	{
		xulyUart.uart2_processingData = 0;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <HAL_UART_TxCpltCallback+0x5c>)
 80027a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a8:	461a      	mov	r2, r3
 80027aa:	2300      	movs	r3, #0
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if (huart->Instance == USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a0b      	ldr	r2, [pc, #44]	@ (80027e0 <HAL_UART_TxCpltCallback+0x60>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d105      	bne.n	80027c4 <HAL_UART_TxCpltCallback+0x44>
	{
		xulyUart.uart3_processingData = 0;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <HAL_UART_TxCpltCallback+0x5c>)
 80027ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027be:	461a      	mov	r2, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	6353      	str	r3, [r2, #52]	@ 0x34
	}
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40011000 	.word	0x40011000
 80027d4:	20000a10 	.word	0x20000a10
 80027d8:	40004400 	.word	0x40004400
 80027dc:	20001d64 	.word	0x20001d64
 80027e0:	40004800 	.word	0x40004800

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <Error_Handler+0x8>

080027f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <HAL_MspInit+0x48>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002838 <HAL_MspInit+0x48>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002804:	6453      	str	r3, [r2, #68]	@ 0x44
 8002806:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <HAL_MspInit+0x48>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_MspInit+0x48>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a07      	ldr	r2, [pc, #28]	@ (8002838 <HAL_MspInit+0x48>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_MspInit+0x48>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08e      	sub	sp, #56	@ 0x38
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <HAL_UART_MspInit+0x180>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d135      	bne.n	80028ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	4a56      	ldr	r2, [pc, #344]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	6453      	str	r3, [r2, #68]	@ 0x44
 800286e:	4b54      	ldr	r3, [pc, #336]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	4b50      	ldr	r3, [pc, #320]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a4f      	ldr	r2, [pc, #316]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002896:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a8:	2307      	movs	r3, #7
 80028aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4844      	ldr	r0, [pc, #272]	@ (80029c4 <HAL_UART_MspInit+0x188>)
 80028b4:	f000 fe98 	bl	80035e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	2025      	movs	r0, #37	@ 0x25
 80028be:	f000 fae8 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c2:	2025      	movs	r0, #37	@ 0x25
 80028c4:	f000 fb01 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028c8:	e073      	b.n	80029b2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3e      	ldr	r2, [pc, #248]	@ (80029c8 <HAL_UART_MspInit+0x18c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d134      	bne.n	800293e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	4b39      	ldr	r3, [pc, #228]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	4a38      	ldr	r2, [pc, #224]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 80028de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	4b32      	ldr	r3, [pc, #200]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	4a31      	ldr	r2, [pc, #196]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002900:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800290c:	230c      	movs	r3, #12
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800291c:	2307      	movs	r3, #7
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	4827      	ldr	r0, [pc, #156]	@ (80029c4 <HAL_UART_MspInit+0x188>)
 8002928:	f000 fe5e 	bl	80035e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800292c:	2200      	movs	r2, #0
 800292e:	2100      	movs	r1, #0
 8002930:	2026      	movs	r0, #38	@ 0x26
 8002932:	f000 faae 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002936:	2026      	movs	r0, #38	@ 0x26
 8002938:	f000 fac7 	bl	8002eca <HAL_NVIC_EnableIRQ>
}
 800293c:	e039      	b.n	80029b2 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <HAL_UART_MspInit+0x190>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d134      	bne.n	80029b2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002952:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002956:	6413      	str	r3, [r2, #64]	@ 0x40
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	4a14      	ldr	r2, [pc, #80]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	6313      	str	r3, [r2, #48]	@ 0x30
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_UART_MspInit+0x184>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002980:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002992:	2307      	movs	r3, #7
 8002994:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299a:	4619      	mov	r1, r3
 800299c:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <HAL_UART_MspInit+0x194>)
 800299e:	f000 fe23 	bl	80035e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	2027      	movs	r0, #39	@ 0x27
 80029a8:	f000 fa73 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029ac:	2027      	movs	r0, #39	@ 0x27
 80029ae:	f000 fa8c 	bl	8002eca <HAL_NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3738      	adds	r7, #56	@ 0x38
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000
 80029c8:	40004400 	.word	0x40004400
 80029cc:	40004800 	.word	0x40004800
 80029d0:	40020c00 	.word	0x40020c00

080029d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <NMI_Handler+0x4>

080029dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <HardFault_Handler+0x4>

080029e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <MemManage_Handler+0x4>

080029ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <BusFault_Handler+0x4>

080029f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <UsageFault_Handler+0x4>

080029fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a24:	f000 f942 	bl	8002cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a30:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <USART1_IRQHandler+0x10>)
 8002a32:	f001 fd6d 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200000e4 	.word	0x200000e4

08002a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <USART2_IRQHandler+0x10>)
 8002a46:	f001 fd63 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000012c 	.word	0x2000012c

08002a54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a58:	4802      	ldr	r0, [pc, #8]	@ (8002a64 <USART3_IRQHandler+0x10>)
 8002a5a:	f001 fd59 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000174 	.word	0x20000174

08002a68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e00a      	b.n	8002a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a7a:	f3af 8000 	nop.w
 8002a7e:	4601      	mov	r1, r0
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	b2ca      	uxtb	r2, r1
 8002a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	dbf0      	blt.n	8002a7a <_read+0x12>
  }

  return len;
 8002a98:	687b      	ldr	r3, [r7, #4]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e009      	b.n	8002ac8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	60ba      	str	r2, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd ff23 	bl	8000908 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dbf1      	blt.n	8002ab4 <_write+0x12>
  }
  return len;
 8002ad0:	687b      	ldr	r3, [r7, #4]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <_close>:

int _close(int file)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b00:	605a      	str	r2, [r3, #4]
  return 0;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <_isatty>:

int _isatty(int file)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
	...

08002b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b44:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <_sbrk+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <_sbrk+0x60>)
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <_sbrk+0x64>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <_sbrk+0x68>)
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b6c:	f002 fd28 	bl	80055c0 <__errno>
 8002b70:	4603      	mov	r3, r0
 8002b72:	220c      	movs	r2, #12
 8002b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e009      	b.n	8002b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <_sbrk+0x64>)
 8002b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20020000 	.word	0x20020000
 8002b9c:	00000400 	.word	0x00000400
 8002ba0:	20002dc0 	.word	0x20002dc0
 8002ba4:	20002f38 	.word	0x20002f38

08002ba8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002bb8:	f7ff fff6 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	@ (8002bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f002 fcf3 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7ff fac5 	bl	8002174 <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002bf8:	08006a5c 	.word	0x08006a5c
  ldr r2, =_sbss
 8002bfc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002c00:	20002f34 	.word	0x20002f34

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <HAL_Init+0x40>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_Init+0x40>)
 8002c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c24:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a07      	ldr	r2, [pc, #28]	@ (8002c48 <HAL_Init+0x40>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c30:	2003      	movs	r0, #3
 8002c32:	f000 f923 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c36:	200f      	movs	r0, #15
 8002c38:	f000 f808 	bl	8002c4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c3c:	f7ff fdd8 	bl	80027f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00

08002c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c54:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_InitTick+0x54>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x58>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f93b 	bl	8002ee6 <HAL_SYSTICK_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00e      	b.n	8002c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d80a      	bhi.n	8002c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f000 f903 	bl	8002e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <HAL_InitTick+0x5c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000024 	.word	0x20000024
 8002ca4:	2000002c 	.word	0x2000002c
 8002ca8:	20000028 	.word	0x20000028

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <HAL_IncTick+0x1c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_IncTick+0x20>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a03      	ldr	r2, [pc, #12]	@ (8002ccc <HAL_IncTick+0x20>)
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	2000002c 	.word	0x2000002c
 8002ccc:	20002dc4 	.word	0x20002dc4

08002cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd4:	4b02      	ldr	r3, [pc, #8]	@ (8002ce0 <HAL_GetTick+0x10>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20002dc4 	.word	0x20002dc4

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4906      	ldr	r1, [pc, #24]	@ (8002d7c <__NVIC_EnableIRQ+0x34>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	@ (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f7ff ff90 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff2d 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff42 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff90 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5f 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff35 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa2 	bl	8002e38 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff fee0 	bl	8002cd0 <HAL_GetTick>
 8002f10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d008      	beq.n	8002f30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2280      	movs	r2, #128	@ 0x80
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e052      	b.n	8002fd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0216 	bic.w	r2, r2, #22
 8002f3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d103      	bne.n	8002f60 <HAL_DMA_Abort+0x62>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f80:	e013      	b.n	8002faa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f82:	f7ff fea5 	bl	8002cd0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d90c      	bls.n	8002faa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e015      	b.n	8002fd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e4      	bne.n	8002f82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	223f      	movs	r2, #63	@ 0x3f
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e00c      	b.n	8003016 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2205      	movs	r2, #5
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003032:	4b23      	ldr	r3, [pc, #140]	@ (80030c0 <HAL_FLASH_Program+0xa0>)
 8003034:	7e1b      	ldrb	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_FLASH_Program+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e03b      	b.n	80030b6 <HAL_FLASH_Program+0x96>
 800303e:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <HAL_FLASH_Program+0xa0>)
 8003040:	2201      	movs	r2, #1
 8003042:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003044:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003048:	f000 f87a 	bl	8003140 <FLASH_WaitForLastOperation>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d12b      	bne.n	80030ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800305c:	783b      	ldrb	r3, [r7, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	68b8      	ldr	r0, [r7, #8]
 8003062:	f000 f923 	bl	80032ac <FLASH_Program_Byte>
 8003066:	e016      	b.n	8003096 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d105      	bne.n	800307a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800306e:	883b      	ldrh	r3, [r7, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	68b8      	ldr	r0, [r7, #8]
 8003074:	f000 f8f8 	bl	8003268 <FLASH_Program_HalfWord>
 8003078:	e00d      	b.n	8003096 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d105      	bne.n	800308c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4619      	mov	r1, r3
 8003084:	68b8      	ldr	r0, [r7, #8]
 8003086:	f000 f8cd 	bl	8003224 <FLASH_Program_Word>
 800308a:	e004      	b.n	8003096 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800308c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f000 f895 	bl	80031c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003096:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800309a:	f000 f851 	bl	8003140 <FLASH_WaitForLastOperation>
 800309e:	4603      	mov	r3, r0
 80030a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <HAL_FLASH_Program+0xa4>)
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	4a07      	ldr	r2, [pc, #28]	@ (80030c4 <HAL_FLASH_Program+0xa4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <HAL_FLASH_Program+0xa0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20002dc8 	.word	0x20002dc8
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_FLASH_Unlock+0x38>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da0b      	bge.n	80030f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030da:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_FLASH_Unlock+0x38>)
 80030dc:	4a09      	ldr	r2, [pc, #36]	@ (8003104 <HAL_FLASH_Unlock+0x3c>)
 80030de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <HAL_FLASH_Unlock+0x38>)
 80030e2:	4a09      	ldr	r2, [pc, #36]	@ (8003108 <HAL_FLASH_Unlock+0x40>)
 80030e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_FLASH_Unlock+0x38>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da01      	bge.n	80030f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80030f2:	79fb      	ldrb	r3, [r7, #7]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00
 8003104:	45670123 	.word	0x45670123
 8003108:	cdef89ab 	.word	0xcdef89ab

0800310c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_FLASH_Lock+0x1c>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_FLASH_Lock+0x1c>)
 8003116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800311a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00

0800312c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003130:	4b02      	ldr	r3, [pc, #8]	@ (800313c <HAL_FLASH_GetError+0x10>)
 8003132:	69db      	ldr	r3, [r3, #28]
}  
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	20002dc8 	.word	0x20002dc8

08003140 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <FLASH_WaitForLastOperation+0x78>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003152:	f7ff fdbd 	bl	8002cd0 <HAL_GetTick>
 8003156:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003158:	e010      	b.n	800317c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d00c      	beq.n	800317c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <FLASH_WaitForLastOperation+0x38>
 8003168:	f7ff fdb2 	bl	8002cd0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d201      	bcs.n	800317c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e019      	b.n	80031b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800317c:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <FLASH_WaitForLastOperation+0x7c>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e8      	bne.n	800315a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <FLASH_WaitForLastOperation+0x7c>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <FLASH_WaitForLastOperation+0x7c>)
 8003196:	2201      	movs	r2, #1
 8003198:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800319a:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <FLASH_WaitForLastOperation+0x7c>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80031a6:	f000 f8a1 	bl	80032ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
  
}  
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20002dc8 	.word	0x20002dc8
 80031bc:	40023c00 	.word	0x40023c00

080031c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031cc:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <FLASH_Program_DoubleWord+0x60>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	4a13      	ldr	r2, [pc, #76]	@ (8003220 <FLASH_Program_DoubleWord+0x60>)
 80031d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <FLASH_Program_DoubleWord+0x60>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4a10      	ldr	r2, [pc, #64]	@ (8003220 <FLASH_Program_DoubleWord+0x60>)
 80031de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80031e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <FLASH_Program_DoubleWord+0x60>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <FLASH_Program_DoubleWord+0x60>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80031f6:	f3bf 8f6f 	isb	sy
}
 80031fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80031fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	000a      	movs	r2, r1
 800320a:	2300      	movs	r3, #0
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	3104      	adds	r1, #4
 8003210:	4613      	mov	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023c00 	.word	0x40023c00

08003224 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <FLASH_Program_Word+0x40>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <FLASH_Program_Word+0x40>)
 8003234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003238:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <FLASH_Program_Word+0x40>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	4a09      	ldr	r2, [pc, #36]	@ (8003264 <FLASH_Program_Word+0x40>)
 8003240:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003244:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <FLASH_Program_Word+0x40>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	4a06      	ldr	r2, [pc, #24]	@ (8003264 <FLASH_Program_Word+0x40>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	601a      	str	r2, [r3, #0]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023c00 	.word	0x40023c00

08003268 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <FLASH_Program_HalfWord+0x40>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <FLASH_Program_HalfWord+0x40>)
 800327a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <FLASH_Program_HalfWord+0x40>)
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	4a08      	ldr	r2, [pc, #32]	@ (80032a8 <FLASH_Program_HalfWord+0x40>)
 8003286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <FLASH_Program_HalfWord+0x40>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <FLASH_Program_HalfWord+0x40>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	801a      	strh	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40023c00 	.word	0x40023c00

080032ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <FLASH_Program_Byte+0x3c>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	@ (80032e8 <FLASH_Program_Byte+0x3c>)
 80032be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <FLASH_Program_Byte+0x3c>)
 80032c6:	4a08      	ldr	r2, [pc, #32]	@ (80032e8 <FLASH_Program_Byte+0x3c>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <FLASH_Program_Byte+0x3c>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	4a05      	ldr	r2, [pc, #20]	@ (80032e8 <FLASH_Program_Byte+0x3c>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	701a      	strb	r2, [r3, #0]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40023c00 	.word	0x40023c00

080032ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	4a23      	ldr	r2, [pc, #140]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 8003306:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003308:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 800330a:	2210      	movs	r2, #16
 800330c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800331a:	4b1e      	ldr	r3, [pc, #120]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	4a1c      	ldr	r2, [pc, #112]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 8003324:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003326:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 8003328:	2220      	movs	r2, #32
 800332a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800332c:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003338:	4b16      	ldr	r3, [pc, #88]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	4a14      	ldr	r2, [pc, #80]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 8003342:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 8003346:	2240      	movs	r2, #64	@ 0x40
 8003348:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800334a:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003356:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 8003360:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003362:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003374:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f043 0310 	orr.w	r3, r3, #16
 800337c:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <FLASH_SetErrorCode+0xa8>)
 800337e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <FLASH_SetErrorCode+0xa4>)
 8003382:	2202      	movs	r2, #2
 8003384:	60da      	str	r2, [r3, #12]
  }
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00
 8003394:	20002dc8 	.word	0x20002dc8

08003398 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033aa:	4b31      	ldr	r3, [pc, #196]	@ (8003470 <HAL_FLASHEx_Erase+0xd8>)
 80033ac:	7e1b      	ldrb	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_FLASHEx_Erase+0x1e>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e058      	b.n	8003468 <HAL_FLASHEx_Erase+0xd0>
 80033b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003470 <HAL_FLASHEx_Erase+0xd8>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033c0:	f7ff febe 	bl	8003140 <FLASH_WaitForLastOperation>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d148      	bne.n	8003460 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d115      	bne.n	800340a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f000 f8da 	bl	80035a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033f4:	f7ff fea4 	bl	8003140 <FLASH_WaitForLastOperation>
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_FLASHEx_Erase+0xdc>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_FLASHEx_Erase+0xdc>)
 8003402:	f023 0304 	bic.w	r3, r3, #4
 8003406:	6113      	str	r3, [r2, #16]
 8003408:	e028      	b.n	800345c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	e01c      	b.n	800344c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f000 f82c 	bl	8003478 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003420:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003424:	f7ff fe8c 	bl	8003140 <FLASH_WaitForLastOperation>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_FLASHEx_Erase+0xdc>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <HAL_FLASHEx_Erase+0xdc>)
 8003432:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8003436:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	601a      	str	r2, [r3, #0]
          break;
 8003444:	e00a      	b.n	800345c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4413      	add	r3, r2
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d3da      	bcc.n	8003412 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800345c:	f000 f85e 	bl	800351c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003460:	4b03      	ldr	r3, [pc, #12]	@ (8003470 <HAL_FLASHEx_Erase+0xd8>)
 8003462:	2200      	movs	r2, #0
 8003464:	761a      	strb	r2, [r3, #24]

  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20002dc8 	.word	0x20002dc8
 8003474:	40023c00 	.word	0x40023c00

08003478 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e010      	b.n	80034b6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d103      	bne.n	80034a2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800349a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e009      	b.n	80034b6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d103      	bne.n	80034b0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80034a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e002      	b.n	80034b6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80034b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034b4:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034b6:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	4914      	ldr	r1, [pc, #80]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4a11      	ldr	r2, [pc, #68]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80034d8:	6113      	str	r3, [r2, #16]
 80034da:	23f8      	movs	r3, #248	@ 0xf8
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034e6:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4093      	lsls	r3, r2
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	4906      	ldr	r1, [pc, #24]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <FLASH_Erase_Sector+0xa0>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350c:	6113      	str	r3, [r2, #16]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40023c00 	.word	0x40023c00

0800351c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003520:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800352c:	4b1c      	ldr	r3, [pc, #112]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003532:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003536:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800353e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a15      	ldr	r2, [pc, #84]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800354a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800354e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003550:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800355a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800355c:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003568:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0c      	ldr	r2, [pc, #48]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800356e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003572:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003574:	4b0a      	ldr	r3, [pc, #40]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a09      	ldr	r2, [pc, #36]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800357a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a06      	ldr	r2, [pc, #24]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800358a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a03      	ldr	r2, [pc, #12]	@ (80035a0 <FLASH_FlushCaches+0x84>)
 8003592:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003596:	6013      	str	r3, [r2, #0]
  }
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40023c00 	.word	0x40023c00

080035a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <FLASH_MassErase+0x40>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	4a0b      	ldr	r2, [pc, #44]	@ (80035e4 <FLASH_MassErase+0x40>)
 80035b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <FLASH_MassErase+0x40>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4a08      	ldr	r2, [pc, #32]	@ (80035e4 <FLASH_MassErase+0x40>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <FLASH_MassErase+0x40>)
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	4313      	orrs	r3, r2
 80035d2:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <FLASH_MassErase+0x40>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	6113      	str	r3, [r2, #16]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40023c00 	.word	0x40023c00

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	e16f      	b.n	80038d8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8161 	beq.w	80038d2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <HAL_GPIO_Init+0x40>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d130      	bne.n	800368a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365e:	2201      	movs	r2, #1
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 0201 	and.w	r2, r3, #1
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b03      	cmp	r3, #3
 8003694:	d017      	beq.n	80036c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d123      	bne.n	800371a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	6939      	ldr	r1, [r7, #16]
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80bb 	beq.w	80038d2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	4b64      	ldr	r3, [pc, #400]	@ (80038f4 <HAL_GPIO_Init+0x30c>)
 8003762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003764:	4a63      	ldr	r2, [pc, #396]	@ (80038f4 <HAL_GPIO_Init+0x30c>)
 8003766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800376a:	6453      	str	r3, [r2, #68]	@ 0x44
 800376c:	4b61      	ldr	r3, [pc, #388]	@ (80038f4 <HAL_GPIO_Init+0x30c>)
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003778:	4a5f      	ldr	r2, [pc, #380]	@ (80038f8 <HAL_GPIO_Init+0x310>)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a57      	ldr	r2, [pc, #348]	@ (80038fc <HAL_GPIO_Init+0x314>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <HAL_GPIO_Init+0x220>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a56      	ldr	r2, [pc, #344]	@ (8003900 <HAL_GPIO_Init+0x318>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d02b      	beq.n	8003804 <HAL_GPIO_Init+0x21c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a55      	ldr	r2, [pc, #340]	@ (8003904 <HAL_GPIO_Init+0x31c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d025      	beq.n	8003800 <HAL_GPIO_Init+0x218>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a54      	ldr	r2, [pc, #336]	@ (8003908 <HAL_GPIO_Init+0x320>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01f      	beq.n	80037fc <HAL_GPIO_Init+0x214>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a53      	ldr	r2, [pc, #332]	@ (800390c <HAL_GPIO_Init+0x324>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d019      	beq.n	80037f8 <HAL_GPIO_Init+0x210>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a52      	ldr	r2, [pc, #328]	@ (8003910 <HAL_GPIO_Init+0x328>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_GPIO_Init+0x20c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a51      	ldr	r2, [pc, #324]	@ (8003914 <HAL_GPIO_Init+0x32c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00d      	beq.n	80037f0 <HAL_GPIO_Init+0x208>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a50      	ldr	r2, [pc, #320]	@ (8003918 <HAL_GPIO_Init+0x330>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d007      	beq.n	80037ec <HAL_GPIO_Init+0x204>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a4f      	ldr	r2, [pc, #316]	@ (800391c <HAL_GPIO_Init+0x334>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d101      	bne.n	80037e8 <HAL_GPIO_Init+0x200>
 80037e4:	2308      	movs	r3, #8
 80037e6:	e010      	b.n	800380a <HAL_GPIO_Init+0x222>
 80037e8:	2309      	movs	r3, #9
 80037ea:	e00e      	b.n	800380a <HAL_GPIO_Init+0x222>
 80037ec:	2307      	movs	r3, #7
 80037ee:	e00c      	b.n	800380a <HAL_GPIO_Init+0x222>
 80037f0:	2306      	movs	r3, #6
 80037f2:	e00a      	b.n	800380a <HAL_GPIO_Init+0x222>
 80037f4:	2305      	movs	r3, #5
 80037f6:	e008      	b.n	800380a <HAL_GPIO_Init+0x222>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e006      	b.n	800380a <HAL_GPIO_Init+0x222>
 80037fc:	2303      	movs	r3, #3
 80037fe:	e004      	b.n	800380a <HAL_GPIO_Init+0x222>
 8003800:	2302      	movs	r3, #2
 8003802:	e002      	b.n	800380a <HAL_GPIO_Init+0x222>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_GPIO_Init+0x222>
 8003808:	2300      	movs	r3, #0
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	f002 0203 	and.w	r2, r2, #3
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	4093      	lsls	r3, r2
 8003814:	461a      	mov	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800381c:	4936      	ldr	r1, [pc, #216]	@ (80038f8 <HAL_GPIO_Init+0x310>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	3302      	adds	r3, #2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800382a:	4b3d      	ldr	r3, [pc, #244]	@ (8003920 <HAL_GPIO_Init+0x338>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800384e:	4a34      	ldr	r2, [pc, #208]	@ (8003920 <HAL_GPIO_Init+0x338>)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003854:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <HAL_GPIO_Init+0x338>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003878:	4a29      	ldr	r2, [pc, #164]	@ (8003920 <HAL_GPIO_Init+0x338>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800387e:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_GPIO_Init+0x338>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003920 <HAL_GPIO_Init+0x338>)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003920 <HAL_GPIO_Init+0x338>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <HAL_GPIO_Init+0x338>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	3301      	adds	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f47f ae88 	bne.w	80035f8 <HAL_GPIO_Init+0x10>
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40013800 	.word	0x40013800
 80038fc:	40020000 	.word	0x40020000
 8003900:	40020400 	.word	0x40020400
 8003904:	40020800 	.word	0x40020800
 8003908:	40020c00 	.word	0x40020c00
 800390c:	40021000 	.word	0x40021000
 8003910:	40021400 	.word	0x40021400
 8003914:	40021800 	.word	0x40021800
 8003918:	40021c00 	.word	0x40021c00
 800391c:	40022000 	.word	0x40022000
 8003920:	40013c00 	.word	0x40013c00

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003934:	787b      	ldrb	r3, [r7, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003940:	e003      	b.n	800394a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	041a      	lsls	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	619a      	str	r2, [r3, #24]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e23b      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d050      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4b9e      	ldr	r3, [pc, #632]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b9b      	ldr	r3, [pc, #620]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b98      	ldr	r3, [pc, #608]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b94      	ldr	r3, [pc, #592]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d036      	beq.n	8003a12 <HAL_RCC_OscConfig+0xbe>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d132      	bne.n	8003a12 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e216      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf0 <HAL_RCC_OscConfig+0x29c>)
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d013      	beq.n	80039ea <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7ff f985 	bl	8002cd0 <HAL_GetTick>
 80039c6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ca:	f7ff f981 	bl	8002cd0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	@ 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e200      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039dc:	4b83      	ldr	r3, [pc, #524]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x76>
 80039e8:	e014      	b.n	8003a14 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7ff f971 	bl	8002cd0 <HAL_GetTick>
 80039ee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f2:	f7ff f96d 	bl	8002cd0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	@ 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1ec      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a04:	4b79      	ldr	r3, [pc, #484]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x9e>
 8003a10:	e000      	b.n	8003a14 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d077      	beq.n	8003b10 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a20:	4b72      	ldr	r3, [pc, #456]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d126      	bne.n	8003a86 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a38:	4b6c      	ldr	r3, [pc, #432]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d120      	bne.n	8003a86 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a44:	4b69      	ldr	r3, [pc, #420]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e1c0      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b63      	ldr	r3, [pc, #396]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	21f8      	movs	r1, #248	@ 0xf8
 8003a6a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	fa91 f1a1 	rbit	r1, r1
 8003a72:	6179      	str	r1, [r7, #20]
  return result;
 8003a74:	6979      	ldr	r1, [r7, #20]
 8003a76:	fab1 f181 	clz	r1, r1
 8003a7a:	b2c9      	uxtb	r1, r1
 8003a7c:	408b      	lsls	r3, r1
 8003a7e:	495b      	ldr	r1, [pc, #364]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a84:	e044      	b.n	8003b10 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02a      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8e:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_RCC_OscConfig+0x2a0>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7ff f91c 	bl	8002cd0 <HAL_GetTick>
 8003a98:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7ff f918 	bl	8002cd0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e197      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b4f      	ldr	r3, [pc, #316]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b4c      	ldr	r3, [pc, #304]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	21f8      	movs	r1, #248	@ 0xf8
 8003ac8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6939      	ldr	r1, [r7, #16]
 8003acc:	fa91 f1a1 	rbit	r1, r1
 8003ad0:	60f9      	str	r1, [r7, #12]
  return result;
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	fab1 f181 	clz	r1, r1
 8003ad8:	b2c9      	uxtb	r1, r1
 8003ada:	408b      	lsls	r3, r1
 8003adc:	4943      	ldr	r1, [pc, #268]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
 8003ae2:	e015      	b.n	8003b10 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae4:	4b43      	ldr	r3, [pc, #268]	@ (8003bf4 <HAL_RCC_OscConfig+0x2a0>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7ff f8f1 	bl	8002cd0 <HAL_GetTick>
 8003aee:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af2:	f7ff f8ed 	bl	8002cd0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e16c      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b04:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d030      	beq.n	8003b7e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b24:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_OscConfig+0x2a4>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2a:	f7ff f8d1 	bl	8002cd0 <HAL_GetTick>
 8003b2e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b32:	f7ff f8cd 	bl	8002cd0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e14c      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b44:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b52:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_RCC_OscConfig+0x2a4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7ff f8ba 	bl	8002cd0 <HAL_GetTick>
 8003b5c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7ff f8b6 	bl	8002cd0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e135      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b72:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8087 	beq.w	8003c9a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d110      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	4a11      	ldr	r2, [pc, #68]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bae:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <HAL_RCC_OscConfig+0x298>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <HAL_RCC_OscConfig+0x2a8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bfc <HAL_RCC_OscConfig+0x2a8>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bca:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCC_OscConfig+0x2a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d122      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <HAL_RCC_OscConfig+0x2a8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a07      	ldr	r2, [pc, #28]	@ (8003bfc <HAL_RCC_OscConfig+0x2a8>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be4:	f7ff f874 	bl	8002cd0 <HAL_GetTick>
 8003be8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	e012      	b.n	8003c12 <HAL_RCC_OscConfig+0x2be>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40023802 	.word	0x40023802
 8003bf4:	42470000 	.word	0x42470000
 8003bf8:	42470e80 	.word	0x42470e80
 8003bfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7ff f866 	bl	8002cd0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0e5      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b75      	ldr	r3, [pc, #468]	@ (8003de8 <HAL_RCC_OscConfig+0x494>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	4b72      	ldr	r3, [pc, #456]	@ (8003dec <HAL_RCC_OscConfig+0x498>)
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c30:	f7ff f84e 	bl	8002cd0 <HAL_GetTick>
 8003c34:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7ff f84a 	bl	8002cd0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0c7      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	4b68      	ldr	r3, [pc, #416]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ee      	beq.n	8003c38 <HAL_RCC_OscConfig+0x2e4>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7ff f838 	bl	8002cd0 <HAL_GetTick>
 8003c60:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7ff f834 	bl	8002cd0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0b1      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ee      	bne.n	8003c64 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b58      	ldr	r3, [pc, #352]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	4a57      	ldr	r2, [pc, #348]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 809c 	beq.w	8003ddc <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca4:	4b52      	ldr	r3, [pc, #328]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d061      	beq.n	8003d74 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d146      	bne.n	8003d46 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003df4 <HAL_RCC_OscConfig+0x4a0>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7ff f807 	bl	8002cd0 <HAL_GetTick>
 8003cc2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7ff f803 	bl	8002cd0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b64      	cmp	r3, #100	@ 0x64
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e082      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	4b45      	ldr	r3, [pc, #276]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce4:	4b42      	ldr	r3, [pc, #264]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	4b43      	ldr	r3, [pc, #268]	@ (8003df8 <HAL_RCC_OscConfig+0x4a4>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	69d1      	ldr	r1, [r2, #28]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6a12      	ldr	r2, [r2, #32]
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cfa:	0192      	lsls	r2, r2, #6
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d02:	0612      	lsls	r2, r2, #24
 8003d04:	4311      	orrs	r1, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d0a:	0852      	lsrs	r2, r2, #1
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	0412      	lsls	r2, r2, #16
 8003d10:	430a      	orrs	r2, r1
 8003d12:	4937      	ldr	r1, [pc, #220]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <HAL_RCC_OscConfig+0x4a0>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe ffd7 	bl	8002cd0 <HAL_GetTick>
 8003d22:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe ffd3 	bl	8002cd0 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	@ 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e052      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
 8003d44:	e04a      	b.n	8003ddc <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <HAL_RCC_OscConfig+0x4a0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe ffc0 	bl	8002cd0 <HAL_GetTick>
 8003d50:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe ffbc 	bl	8002cd0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e03b      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b22      	ldr	r3, [pc, #136]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x400>
 8003d72:	e033      	b.n	8003ddc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e02e      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x49c>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d121      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d11a      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dae:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d111      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40007000 	.word	0x40007000
 8003dec:	40023870 	.word	0x40023870
 8003df0:	40023800 	.word	0x40023800
 8003df4:	42470060 	.word	0x42470060
 8003df8:	f0bc8000 	.word	0xf0bc8000

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0d2      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d90c      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b68      	ldr	r3, [pc, #416]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b66      	ldr	r3, [pc, #408]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0be      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003e68:	4b56      	ldr	r3, [pc, #344]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a55      	ldr	r2, [pc, #340]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b53      	ldr	r3, [pc, #332]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4950      	ldr	r1, [pc, #320]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d040      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d115      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e085      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b44      	ldr	r3, [pc, #272]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e079      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b40      	ldr	r3, [pc, #256]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e071      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4939      	ldr	r1, [pc, #228]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fe fef4 	bl	8002cd0 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fe fef0 	bl	8002cd0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e059      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b30      	ldr	r3, [pc, #192]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d20c      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b27      	ldr	r3, [pc, #156]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e03c      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	491b      	ldr	r1, [pc, #108]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f66:	4b17      	ldr	r3, [pc, #92]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4913      	ldr	r1, [pc, #76]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f7a:	f000 f82b 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f88:	22f0      	movs	r2, #240	@ 0xf0
 8003f8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	fa92 f2a2 	rbit	r2, r2
 8003f92:	60fa      	str	r2, [r7, #12]
  return result;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	fab2 f282 	clz	r2, r2
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	40d3      	lsrs	r3, r2
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fa6:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <HAL_RCC_ClockConfig+0x1d0>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003faa:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1d4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fe4c 	bl	8002c4c <HAL_InitTick>

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	08006a00 	.word	0x08006a00
 8003fcc:	20000024 	.word	0x20000024
 8003fd0:	20000028 	.word	0x20000028

08003fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b090      	sub	sp, #64	@ 0x40
 8003fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fec:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d00d      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x40>
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	f200 80a2 	bhi.w	8004142 <HAL_RCC_GetSysClockFreq+0x16e>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x34>
 8004002:	2b04      	cmp	r3, #4
 8004004:	d003      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x3a>
 8004006:	e09c      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x184>)
 800400a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800400c:	e09c      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800400e:	4b53      	ldr	r3, [pc, #332]	@ (800415c <HAL_RCC_GetSysClockFreq+0x188>)
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004012:	e099      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004014:	4b4f      	ldr	r3, [pc, #316]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401e:	4b4d      	ldr	r3, [pc, #308]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d027      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402a:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	099b      	lsrs	r3, r3, #6
 8004030:	2200      	movs	r2, #0
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	627a      	str	r2, [r7, #36]	@ 0x24
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800403c:	2100      	movs	r1, #0
 800403e:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_RCC_GetSysClockFreq+0x188>)
 8004040:	fb03 f201 	mul.w	r2, r3, r1
 8004044:	2300      	movs	r3, #0
 8004046:	fb00 f303 	mul.w	r3, r0, r3
 800404a:	4413      	add	r3, r2
 800404c:	4a43      	ldr	r2, [pc, #268]	@ (800415c <HAL_RCC_GetSysClockFreq+0x188>)
 800404e:	fba0 2102 	umull	r2, r1, r0, r2
 8004052:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004054:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004058:	4413      	add	r3, r2
 800405a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	2200      	movs	r2, #0
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	61fa      	str	r2, [r7, #28]
 8004064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004068:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800406c:	f7fc f8aa 	bl	80001c4 <__aeabi_uldivmod>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4613      	mov	r3, r2
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004078:	e055      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407a:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	2200      	movs	r2, #0
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	617a      	str	r2, [r7, #20]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800408c:	f04f 0b00 	mov.w	fp, #0
 8004090:	4652      	mov	r2, sl
 8004092:	465b      	mov	r3, fp
 8004094:	f04f 0000 	mov.w	r0, #0
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	0159      	lsls	r1, r3, #5
 800409e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a2:	0150      	lsls	r0, r2, #5
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	ebb2 080a 	subs.w	r8, r2, sl
 80040ac:	eb63 090b 	sbc.w	r9, r3, fp
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040bc:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040c0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040c4:	ebb2 0408 	subs.w	r4, r2, r8
 80040c8:	eb63 0509 	sbc.w	r5, r3, r9
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	00eb      	lsls	r3, r5, #3
 80040d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	eb14 030a 	adds.w	r3, r4, sl
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	eb45 030b 	adc.w	r3, r5, fp
 80040ea:	607b      	str	r3, [r7, #4]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f8:	4629      	mov	r1, r5
 80040fa:	028b      	lsls	r3, r1, #10
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	4604      	mov	r4, r0
 8004102:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004106:	4601      	mov	r1, r0
 8004108:	028a      	lsls	r2, r1, #10
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	2200      	movs	r2, #0
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	60fa      	str	r2, [r7, #12]
 8004116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800411a:	f7fc f853 	bl	80001c4 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4613      	mov	r3, r2
 8004124:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	3301      	adds	r3, #1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004136:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004140:	e002      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004142:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x184>)
 8004144:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004146:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800414a:	4618      	mov	r0, r3
 800414c:	3740      	adds	r7, #64	@ 0x40
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400
 800415c:	017d7840 	.word	0x017d7840

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b02      	ldr	r3, [pc, #8]	@ (8004170 <HAL_RCC_GetHCLKFreq+0x10>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20000024 	.word	0x20000024

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800417a:	f7ff fff1 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 800417e:	4601      	mov	r1, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004188:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800418c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	603a      	str	r2, [r7, #0]
  return result;
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	40d3      	lsrs	r3, r2
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08006a10 	.word	0x08006a10

080041b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80041be:	f7ff ffcf 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041c2:	4601      	mov	r1, r0
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80041cc:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80041d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	fa92 f2a2 	rbit	r2, r2
 80041d8:	603a      	str	r2, [r7, #0]
  return result;
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	fab2 f282 	clz	r2, r2
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	40d3      	lsrs	r3, r2
 80041e4:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80041e6:	5cd3      	ldrb	r3, [r2, r3]
 80041e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08006a10 	.word	0x08006a10

080041fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e042      	b.n	8004294 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fe fb0a 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	@ 0x24
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800423e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fe43 	bl	8004ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	@ 0x28
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d16d      	bne.n	8004398 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Transmit+0x2c>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e066      	b.n	800439a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2221      	movs	r2, #33	@ 0x21
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042da:	f7fe fcf9 	bl	8002cd0 <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f4:	d108      	bne.n	8004308 <HAL_UART_Transmit+0x6c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d104      	bne.n	8004308 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e003      	b.n	8004310 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004310:	e02a      	b.n	8004368 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	@ 0x80
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fb92 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e036      	b.n	800439a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	3302      	adds	r3, #2
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e007      	b.n	800435a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	3301      	adds	r3, #1
 8004358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1cf      	bne.n	8004312 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2200      	movs	r2, #0
 800437a:	2140      	movs	r1, #64	@ 0x40
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb62 	bl	8004a46 <UART_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e006      	b.n	800439a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d121      	bne.n	8004400 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_UART_Transmit_IT+0x26>
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e01a      	b.n	8004402 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2221      	movs	r2, #33	@ 0x21
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b20      	cmp	r3, #32
 8004424:	d112      	bne.n	800444c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_Receive_IT+0x26>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e00b      	b.n	800444e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	461a      	mov	r2, r3
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fb6d 	bl	8004b22 <UART_Start_Receive_IT>
 8004448:	4603      	mov	r3, r0
 800444a:	e000      	b.n	800444e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08c      	sub	sp, #48	@ 0x30
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	4613      	mov	r3, r2
 8004462:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b20      	cmp	r3, #32
 800446e:	d14a      	bne.n	8004506 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e043      	b.n	8004508 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	461a      	mov	r2, r3
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fb45 	bl	8004b22 <UART_Start_Receive_IT>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800449e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12c      	bne.n	8004500 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d125      	bne.n	80044fa <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	617b      	str	r3, [r7, #20]
   return(result);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80044e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6a39      	ldr	r1, [r7, #32]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80044f8:	e002      	b.n	8004500 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004504:	e000      	b.n	8004508 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3730      	adds	r7, #48	@ 0x30
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0ba      	sub	sp, #232	@ 0xe8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fbed 	bl	8004d4e <UART_Receive_IT>
      return;
 8004574:	e25b      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80de 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80d1 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f043 0208 	orr.w	r2, r3, #8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 81f2 	beq.w	8004a24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fb78 	bl	8004d4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_UART_IRQHandler+0x17a>
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04f      	beq.n	800472a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa82 	bl	8004b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d141      	bne.n	8004722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1d9      	bne.n	800469e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	4a7e      	ldr	r2, [pc, #504]	@ (80048f0 <HAL_UART_IRQHandler+0x3e0>)
 80046f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fc6d 	bl	8002fde <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00e      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f98a 	bl	8004a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00a      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f986 	bl	8004a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e006      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f982 	bl	8004a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004736:	e175      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	bf00      	nop
    return;
 800473a:	e173      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 814f 	bne.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8148 	beq.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8141 	beq.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	f040 80b6 	bne.w	80048f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8145 	beq.w	8004a28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f080 813e 	bcs.w	8004a28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047be:	f000 8088 	beq.w	80048d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800481e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800483a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e1      	bne.n	800480e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800485a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800486e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800487c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e3      	bne.n	8004890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe fb16 	bl	8002efe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fd fed5 	bl	8002698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048ee:	e09b      	b.n	8004a28 <HAL_UART_IRQHandler+0x518>
 80048f0:	08004c59 	.word	0x08004c59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 808e 	beq.w	8004a2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8089 	beq.w	8004a2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800493e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004940:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800494c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e3      	bne.n	800491a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	623b      	str	r3, [r7, #32]
   return(result);
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004976:	633a      	str	r2, [r7, #48]	@ 0x30
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049bc:	61fa      	str	r2, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e3      	bne.n	8004998 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fd fe5b 	bl	8002698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e2:	e023      	b.n	8004a2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_UART_IRQHandler+0x4f4>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f93f 	bl	8004c80 <UART_Transmit_IT>
    return;
 8004a02:	e014      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <HAL_UART_IRQHandler+0x51e>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f97e 	bl	8004d1e <UART_EndTransmit_IT>
    return;
 8004a22:	e004      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a2c:	bf00      	nop
  }
}
 8004a2e:	37e8      	adds	r7, #232	@ 0xe8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b090      	sub	sp, #64	@ 0x40
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a56:	e050      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d04c      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a66:	f7fe f933 	bl	8002cd0 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d241      	bcs.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a96:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a98:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e5      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004aca:	623a      	str	r2, [r7, #32]
 8004acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	69f9      	ldr	r1, [r7, #28]
 8004ad0:	6a3a      	ldr	r2, [r7, #32]
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00f      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d09f      	beq.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3740      	adds	r7, #64	@ 0x40
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2222      	movs	r2, #34	@ 0x22
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0220 	orr.w	r2, r2, #32
 8004b86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b095      	sub	sp, #84	@ 0x54
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3314      	adds	r3, #20
 8004bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d119      	bne.n	8004c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c2c:	61ba      	str	r2, [r7, #24]
 8004c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6979      	ldr	r1, [r7, #20]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c4e:	bf00      	nop
 8004c50:	3754      	adds	r7, #84	@ 0x54
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fede 	bl	8004a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b21      	cmp	r3, #33	@ 0x21
 8004c92:	d13e      	bne.n	8004d12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9c:	d114      	bne.n	8004cc8 <UART_Transmit_IT+0x48>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d110      	bne.n	8004cc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]
 8004cc6:	e008      	b.n	8004cda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6211      	str	r1, [r2, #32]
 8004cd2:	781a      	ldrb	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fd fd1e 	bl	8002780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b08c      	sub	sp, #48	@ 0x30
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b22      	cmp	r3, #34	@ 0x22
 8004d60:	f040 80ae 	bne.w	8004ec0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6c:	d117      	bne.n	8004d9e <UART_Receive_IT+0x50>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d113      	bne.n	8004d9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d9c:	e026      	b.n	8004dec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db0:	d007      	beq.n	8004dc2 <UART_Receive_IT+0x74>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <UART_Receive_IT+0x82>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e008      	b.n	8004de2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d15d      	bne.n	8004ebc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0220 	bic.w	r2, r2, #32
 8004e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d135      	bne.n	8004eb2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f023 0310 	bic.w	r3, r3, #16
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6c:	623a      	str	r2, [r7, #32]
 8004e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69f9      	ldr	r1, [r7, #28]
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d10a      	bne.n	8004ea4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fd fbf4 	bl	8002698 <HAL_UARTEx_RxEventCallback>
 8004eb0:	e002      	b.n	8004eb8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fd fb9a 	bl	80025ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e002      	b.n	8004ec2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3730      	adds	r7, #48	@ 0x30
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004f0c:	f023 030c 	bic.w	r3, r3, #12
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	430b      	orrs	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a57      	ldr	r2, [pc, #348]	@ (8005094 <UART_SetConfig+0x1c8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <UART_SetConfig+0x78>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a56      	ldr	r2, [pc, #344]	@ (8005098 <UART_SetConfig+0x1cc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d103      	bne.n	8004f4c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7ff f938 	bl	80041b8 <HAL_RCC_GetPCLK2Freq>
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	e002      	b.n	8004f52 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7ff f912 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8004f50:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5a:	d14c      	bne.n	8004ff6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	4a4a      	ldr	r2, [pc, #296]	@ (800509c <UART_SetConfig+0x1d0>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	0119      	lsls	r1, r3, #4
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009a      	lsls	r2, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f92:	4b42      	ldr	r3, [pc, #264]	@ (800509c <UART_SetConfig+0x1d0>)
 8004f94:	fba3 0302 	umull	r0, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	2064      	movs	r0, #100	@ 0x64
 8004f9c:	fb00 f303 	mul.w	r3, r0, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	3332      	adds	r3, #50	@ 0x32
 8004fa6:	4a3d      	ldr	r2, [pc, #244]	@ (800509c <UART_SetConfig+0x1d0>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fb4:	4419      	add	r1, r3
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009a      	lsls	r2, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fcc:	4b33      	ldr	r3, [pc, #204]	@ (800509c <UART_SetConfig+0x1d0>)
 8004fce:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2064      	movs	r0, #100	@ 0x64
 8004fd6:	fb00 f303 	mul.w	r3, r0, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	3332      	adds	r3, #50	@ 0x32
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800509c <UART_SetConfig+0x1d0>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 0207 	and.w	r2, r3, #7
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff4:	e04a      	b.n	800508c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009a      	lsls	r2, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	4a23      	ldr	r2, [pc, #140]	@ (800509c <UART_SetConfig+0x1d0>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	0119      	lsls	r1, r3, #4
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fbb2 f2f3 	udiv	r2, r2, r3
 800502c:	4b1b      	ldr	r3, [pc, #108]	@ (800509c <UART_SetConfig+0x1d0>)
 800502e:	fba3 0302 	umull	r0, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2064      	movs	r0, #100	@ 0x64
 8005036:	fb00 f303 	mul.w	r3, r0, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	@ 0x32
 8005040:	4a16      	ldr	r2, [pc, #88]	@ (800509c <UART_SetConfig+0x1d0>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800504c:	4419      	add	r1, r3
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009a      	lsls	r2, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fbb2 f2f3 	udiv	r2, r2, r3
 8005064:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <UART_SetConfig+0x1d0>)
 8005066:	fba3 0302 	umull	r0, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2064      	movs	r0, #100	@ 0x64
 800506e:	fb00 f303 	mul.w	r3, r0, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	3332      	adds	r3, #50	@ 0x32
 8005078:	4a08      	ldr	r2, [pc, #32]	@ (800509c <UART_SetConfig+0x1d0>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	440a      	add	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40011000 	.word	0x40011000
 8005098:	40011400 	.word	0x40011400
 800509c:	51eb851f 	.word	0x51eb851f

080050a0 <std>:
 80050a0:	2300      	movs	r3, #0
 80050a2:	b510      	push	{r4, lr}
 80050a4:	4604      	mov	r4, r0
 80050a6:	e9c0 3300 	strd	r3, r3, [r0]
 80050aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ae:	6083      	str	r3, [r0, #8]
 80050b0:	8181      	strh	r1, [r0, #12]
 80050b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80050b4:	81c2      	strh	r2, [r0, #14]
 80050b6:	6183      	str	r3, [r0, #24]
 80050b8:	4619      	mov	r1, r3
 80050ba:	2208      	movs	r2, #8
 80050bc:	305c      	adds	r0, #92	@ 0x5c
 80050be:	f000 fa31 	bl	8005524 <memset>
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <std+0x58>)
 80050c4:	6224      	str	r4, [r4, #32]
 80050c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80050c8:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <std+0x5c>)
 80050ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <std+0x60>)
 80050ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <std+0x64>)
 80050d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <std+0x68>)
 80050d6:	429c      	cmp	r4, r3
 80050d8:	d006      	beq.n	80050e8 <std+0x48>
 80050da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050de:	4294      	cmp	r4, r2
 80050e0:	d002      	beq.n	80050e8 <std+0x48>
 80050e2:	33d0      	adds	r3, #208	@ 0xd0
 80050e4:	429c      	cmp	r4, r3
 80050e6:	d105      	bne.n	80050f4 <std+0x54>
 80050e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f0:	f000 ba90 	b.w	8005614 <__retarget_lock_init_recursive>
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	08005355 	.word	0x08005355
 80050fc:	08005377 	.word	0x08005377
 8005100:	080053af 	.word	0x080053af
 8005104:	080053d3 	.word	0x080053d3
 8005108:	20002de8 	.word	0x20002de8

0800510c <stdio_exit_handler>:
 800510c:	4a02      	ldr	r2, [pc, #8]	@ (8005118 <stdio_exit_handler+0xc>)
 800510e:	4903      	ldr	r1, [pc, #12]	@ (800511c <stdio_exit_handler+0x10>)
 8005110:	4803      	ldr	r0, [pc, #12]	@ (8005120 <stdio_exit_handler+0x14>)
 8005112:	f000 b869 	b.w	80051e8 <_fwalk_sglue>
 8005116:	bf00      	nop
 8005118:	20000030 	.word	0x20000030
 800511c:	08006179 	.word	0x08006179
 8005120:	20000040 	.word	0x20000040

08005124 <cleanup_stdio>:
 8005124:	6841      	ldr	r1, [r0, #4]
 8005126:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <cleanup_stdio+0x34>)
 8005128:	b510      	push	{r4, lr}
 800512a:	4299      	cmp	r1, r3
 800512c:	4604      	mov	r4, r0
 800512e:	d001      	beq.n	8005134 <cleanup_stdio+0x10>
 8005130:	f001 f822 	bl	8006178 <_fflush_r>
 8005134:	68a1      	ldr	r1, [r4, #8]
 8005136:	4b09      	ldr	r3, [pc, #36]	@ (800515c <cleanup_stdio+0x38>)
 8005138:	4299      	cmp	r1, r3
 800513a:	d002      	beq.n	8005142 <cleanup_stdio+0x1e>
 800513c:	4620      	mov	r0, r4
 800513e:	f001 f81b 	bl	8006178 <_fflush_r>
 8005142:	68e1      	ldr	r1, [r4, #12]
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <cleanup_stdio+0x3c>)
 8005146:	4299      	cmp	r1, r3
 8005148:	d004      	beq.n	8005154 <cleanup_stdio+0x30>
 800514a:	4620      	mov	r0, r4
 800514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005150:	f001 b812 	b.w	8006178 <_fflush_r>
 8005154:	bd10      	pop	{r4, pc}
 8005156:	bf00      	nop
 8005158:	20002de8 	.word	0x20002de8
 800515c:	20002e50 	.word	0x20002e50
 8005160:	20002eb8 	.word	0x20002eb8

08005164 <global_stdio_init.part.0>:
 8005164:	b510      	push	{r4, lr}
 8005166:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <global_stdio_init.part.0+0x30>)
 8005168:	4c0b      	ldr	r4, [pc, #44]	@ (8005198 <global_stdio_init.part.0+0x34>)
 800516a:	4a0c      	ldr	r2, [pc, #48]	@ (800519c <global_stdio_init.part.0+0x38>)
 800516c:	4620      	mov	r0, r4
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	2104      	movs	r1, #4
 8005172:	2200      	movs	r2, #0
 8005174:	f7ff ff94 	bl	80050a0 <std>
 8005178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800517c:	2201      	movs	r2, #1
 800517e:	2109      	movs	r1, #9
 8005180:	f7ff ff8e 	bl	80050a0 <std>
 8005184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005188:	2202      	movs	r2, #2
 800518a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518e:	2112      	movs	r1, #18
 8005190:	f7ff bf86 	b.w	80050a0 <std>
 8005194:	20002f20 	.word	0x20002f20
 8005198:	20002de8 	.word	0x20002de8
 800519c:	0800510d 	.word	0x0800510d

080051a0 <__sfp_lock_acquire>:
 80051a0:	4801      	ldr	r0, [pc, #4]	@ (80051a8 <__sfp_lock_acquire+0x8>)
 80051a2:	f000 ba38 	b.w	8005616 <__retarget_lock_acquire_recursive>
 80051a6:	bf00      	nop
 80051a8:	20002f29 	.word	0x20002f29

080051ac <__sfp_lock_release>:
 80051ac:	4801      	ldr	r0, [pc, #4]	@ (80051b4 <__sfp_lock_release+0x8>)
 80051ae:	f000 ba33 	b.w	8005618 <__retarget_lock_release_recursive>
 80051b2:	bf00      	nop
 80051b4:	20002f29 	.word	0x20002f29

080051b8 <__sinit>:
 80051b8:	b510      	push	{r4, lr}
 80051ba:	4604      	mov	r4, r0
 80051bc:	f7ff fff0 	bl	80051a0 <__sfp_lock_acquire>
 80051c0:	6a23      	ldr	r3, [r4, #32]
 80051c2:	b11b      	cbz	r3, 80051cc <__sinit+0x14>
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f7ff bff0 	b.w	80051ac <__sfp_lock_release>
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <__sinit+0x28>)
 80051ce:	6223      	str	r3, [r4, #32]
 80051d0:	4b04      	ldr	r3, [pc, #16]	@ (80051e4 <__sinit+0x2c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f5      	bne.n	80051c4 <__sinit+0xc>
 80051d8:	f7ff ffc4 	bl	8005164 <global_stdio_init.part.0>
 80051dc:	e7f2      	b.n	80051c4 <__sinit+0xc>
 80051de:	bf00      	nop
 80051e0:	08005125 	.word	0x08005125
 80051e4:	20002f20 	.word	0x20002f20

080051e8 <_fwalk_sglue>:
 80051e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ec:	4607      	mov	r7, r0
 80051ee:	4688      	mov	r8, r1
 80051f0:	4614      	mov	r4, r2
 80051f2:	2600      	movs	r6, #0
 80051f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f8:	f1b9 0901 	subs.w	r9, r9, #1
 80051fc:	d505      	bpl.n	800520a <_fwalk_sglue+0x22>
 80051fe:	6824      	ldr	r4, [r4, #0]
 8005200:	2c00      	cmp	r4, #0
 8005202:	d1f7      	bne.n	80051f4 <_fwalk_sglue+0xc>
 8005204:	4630      	mov	r0, r6
 8005206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d907      	bls.n	8005220 <_fwalk_sglue+0x38>
 8005210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005214:	3301      	adds	r3, #1
 8005216:	d003      	beq.n	8005220 <_fwalk_sglue+0x38>
 8005218:	4629      	mov	r1, r5
 800521a:	4638      	mov	r0, r7
 800521c:	47c0      	blx	r8
 800521e:	4306      	orrs	r6, r0
 8005220:	3568      	adds	r5, #104	@ 0x68
 8005222:	e7e9      	b.n	80051f8 <_fwalk_sglue+0x10>

08005224 <iprintf>:
 8005224:	b40f      	push	{r0, r1, r2, r3}
 8005226:	b507      	push	{r0, r1, r2, lr}
 8005228:	4906      	ldr	r1, [pc, #24]	@ (8005244 <iprintf+0x20>)
 800522a:	ab04      	add	r3, sp, #16
 800522c:	6808      	ldr	r0, [r1, #0]
 800522e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005232:	6881      	ldr	r1, [r0, #8]
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	f000 fc75 	bl	8005b24 <_vfiprintf_r>
 800523a:	b003      	add	sp, #12
 800523c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005240:	b004      	add	sp, #16
 8005242:	4770      	bx	lr
 8005244:	2000003c 	.word	0x2000003c

08005248 <putchar>:
 8005248:	4b02      	ldr	r3, [pc, #8]	@ (8005254 <putchar+0xc>)
 800524a:	4601      	mov	r1, r0
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	6882      	ldr	r2, [r0, #8]
 8005250:	f001 b81b 	b.w	800628a <_putc_r>
 8005254:	2000003c 	.word	0x2000003c

08005258 <_puts_r>:
 8005258:	6a03      	ldr	r3, [r0, #32]
 800525a:	b570      	push	{r4, r5, r6, lr}
 800525c:	4605      	mov	r5, r0
 800525e:	460e      	mov	r6, r1
 8005260:	6884      	ldr	r4, [r0, #8]
 8005262:	b90b      	cbnz	r3, 8005268 <_puts_r+0x10>
 8005264:	f7ff ffa8 	bl	80051b8 <__sinit>
 8005268:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800526a:	07db      	lsls	r3, r3, #31
 800526c:	d405      	bmi.n	800527a <_puts_r+0x22>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	0598      	lsls	r0, r3, #22
 8005272:	d402      	bmi.n	800527a <_puts_r+0x22>
 8005274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005276:	f000 f9ce 	bl	8005616 <__retarget_lock_acquire_recursive>
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	0719      	lsls	r1, r3, #28
 800527e:	d502      	bpl.n	8005286 <_puts_r+0x2e>
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d135      	bne.n	80052f2 <_puts_r+0x9a>
 8005286:	4621      	mov	r1, r4
 8005288:	4628      	mov	r0, r5
 800528a:	f000 f8e5 	bl	8005458 <__swsetup_r>
 800528e:	b380      	cbz	r0, 80052f2 <_puts_r+0x9a>
 8005290:	f04f 35ff 	mov.w	r5, #4294967295
 8005294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005296:	07da      	lsls	r2, r3, #31
 8005298:	d405      	bmi.n	80052a6 <_puts_r+0x4e>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	059b      	lsls	r3, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_puts_r+0x4e>
 80052a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052a2:	f000 f9b9 	bl	8005618 <__retarget_lock_release_recursive>
 80052a6:	4628      	mov	r0, r5
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	da04      	bge.n	80052b8 <_puts_r+0x60>
 80052ae:	69a2      	ldr	r2, [r4, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	dc17      	bgt.n	80052e4 <_puts_r+0x8c>
 80052b4:	290a      	cmp	r1, #10
 80052b6:	d015      	beq.n	80052e4 <_puts_r+0x8c>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	6022      	str	r2, [r4, #0]
 80052be:	7019      	strb	r1, [r3, #0]
 80052c0:	68a3      	ldr	r3, [r4, #8]
 80052c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	2900      	cmp	r1, #0
 80052cc:	d1ed      	bne.n	80052aa <_puts_r+0x52>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da11      	bge.n	80052f6 <_puts_r+0x9e>
 80052d2:	4622      	mov	r2, r4
 80052d4:	210a      	movs	r1, #10
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 f87f 	bl	80053da <__swbuf_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d0d7      	beq.n	8005290 <_puts_r+0x38>
 80052e0:	250a      	movs	r5, #10
 80052e2:	e7d7      	b.n	8005294 <_puts_r+0x3c>
 80052e4:	4622      	mov	r2, r4
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f877 	bl	80053da <__swbuf_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d1e7      	bne.n	80052c0 <_puts_r+0x68>
 80052f0:	e7ce      	b.n	8005290 <_puts_r+0x38>
 80052f2:	3e01      	subs	r6, #1
 80052f4:	e7e4      	b.n	80052c0 <_puts_r+0x68>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	220a      	movs	r2, #10
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e7ee      	b.n	80052e0 <_puts_r+0x88>
	...

08005304 <puts>:
 8005304:	4b02      	ldr	r3, [pc, #8]	@ (8005310 <puts+0xc>)
 8005306:	4601      	mov	r1, r0
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f7ff bfa5 	b.w	8005258 <_puts_r>
 800530e:	bf00      	nop
 8005310:	2000003c 	.word	0x2000003c

08005314 <siprintf>:
 8005314:	b40e      	push	{r1, r2, r3}
 8005316:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800531a:	b500      	push	{lr}
 800531c:	b09c      	sub	sp, #112	@ 0x70
 800531e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005320:	9002      	str	r0, [sp, #8]
 8005322:	9006      	str	r0, [sp, #24]
 8005324:	9107      	str	r1, [sp, #28]
 8005326:	9104      	str	r1, [sp, #16]
 8005328:	4808      	ldr	r0, [pc, #32]	@ (800534c <siprintf+0x38>)
 800532a:	4909      	ldr	r1, [pc, #36]	@ (8005350 <siprintf+0x3c>)
 800532c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	6800      	ldr	r0, [r0, #0]
 8005334:	a902      	add	r1, sp, #8
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	f000 fad0 	bl	80058dc <_svfiprintf_r>
 800533c:	2200      	movs	r2, #0
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	b01c      	add	sp, #112	@ 0x70
 8005344:	f85d eb04 	ldr.w	lr, [sp], #4
 8005348:	b003      	add	sp, #12
 800534a:	4770      	bx	lr
 800534c:	2000003c 	.word	0x2000003c
 8005350:	ffff0208 	.word	0xffff0208

08005354 <__sread>:
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f90c 	bl	8005578 <_read_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	bfab      	itete	ge
 8005364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005366:	89a3      	ldrhlt	r3, [r4, #12]
 8005368:	181b      	addge	r3, r3, r0
 800536a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800536e:	bfac      	ite	ge
 8005370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005372:	81a3      	strhlt	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__swrite>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	461f      	mov	r7, r3
 800537c:	898b      	ldrh	r3, [r1, #12]
 800537e:	4605      	mov	r5, r0
 8005380:	05db      	lsls	r3, r3, #23
 8005382:	460c      	mov	r4, r1
 8005384:	4616      	mov	r6, r2
 8005386:	d505      	bpl.n	8005394 <__swrite+0x1e>
 8005388:	2302      	movs	r3, #2
 800538a:	2200      	movs	r2, #0
 800538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005390:	f000 f8e0 	bl	8005554 <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	4632      	mov	r2, r6
 8005398:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	4628      	mov	r0, r5
 80053a0:	463b      	mov	r3, r7
 80053a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	f000 b8f7 	b.w	800559c <_write_r>

080053ae <__sseek>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 f8cd 	bl	8005554 <_lseek_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	bf15      	itete	ne
 80053c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ca:	81a3      	strheq	r3, [r4, #12]
 80053cc:	bf18      	it	ne
 80053ce:	81a3      	strhne	r3, [r4, #12]
 80053d0:	bd10      	pop	{r4, pc}

080053d2 <__sclose>:
 80053d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d6:	f000 b8ad 	b.w	8005534 <_close_r>

080053da <__swbuf_r>:
 80053da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053dc:	460e      	mov	r6, r1
 80053de:	4614      	mov	r4, r2
 80053e0:	4605      	mov	r5, r0
 80053e2:	b118      	cbz	r0, 80053ec <__swbuf_r+0x12>
 80053e4:	6a03      	ldr	r3, [r0, #32]
 80053e6:	b90b      	cbnz	r3, 80053ec <__swbuf_r+0x12>
 80053e8:	f7ff fee6 	bl	80051b8 <__sinit>
 80053ec:	69a3      	ldr	r3, [r4, #24]
 80053ee:	60a3      	str	r3, [r4, #8]
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	071a      	lsls	r2, r3, #28
 80053f4:	d501      	bpl.n	80053fa <__swbuf_r+0x20>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	b943      	cbnz	r3, 800540c <__swbuf_r+0x32>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	f000 f82b 	bl	8005458 <__swsetup_r>
 8005402:	b118      	cbz	r0, 800540c <__swbuf_r+0x32>
 8005404:	f04f 37ff 	mov.w	r7, #4294967295
 8005408:	4638      	mov	r0, r7
 800540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	6922      	ldr	r2, [r4, #16]
 8005410:	b2f6      	uxtb	r6, r6
 8005412:	1a98      	subs	r0, r3, r2
 8005414:	6963      	ldr	r3, [r4, #20]
 8005416:	4637      	mov	r7, r6
 8005418:	4283      	cmp	r3, r0
 800541a:	dc05      	bgt.n	8005428 <__swbuf_r+0x4e>
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f000 feaa 	bl	8006178 <_fflush_r>
 8005424:	2800      	cmp	r0, #0
 8005426:	d1ed      	bne.n	8005404 <__swbuf_r+0x2a>
 8005428:	68a3      	ldr	r3, [r4, #8]
 800542a:	3b01      	subs	r3, #1
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	6022      	str	r2, [r4, #0]
 8005434:	701e      	strb	r6, [r3, #0]
 8005436:	6962      	ldr	r2, [r4, #20]
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	429a      	cmp	r2, r3
 800543c:	d004      	beq.n	8005448 <__swbuf_r+0x6e>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	07db      	lsls	r3, r3, #31
 8005442:	d5e1      	bpl.n	8005408 <__swbuf_r+0x2e>
 8005444:	2e0a      	cmp	r6, #10
 8005446:	d1df      	bne.n	8005408 <__swbuf_r+0x2e>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 fe94 	bl	8006178 <_fflush_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0d9      	beq.n	8005408 <__swbuf_r+0x2e>
 8005454:	e7d6      	b.n	8005404 <__swbuf_r+0x2a>
	...

08005458 <__swsetup_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <__swsetup_r+0xa8>)
 800545c:	4605      	mov	r5, r0
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	460c      	mov	r4, r1
 8005462:	b118      	cbz	r0, 800546c <__swsetup_r+0x14>
 8005464:	6a03      	ldr	r3, [r0, #32]
 8005466:	b90b      	cbnz	r3, 800546c <__swsetup_r+0x14>
 8005468:	f7ff fea6 	bl	80051b8 <__sinit>
 800546c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005470:	0719      	lsls	r1, r3, #28
 8005472:	d422      	bmi.n	80054ba <__swsetup_r+0x62>
 8005474:	06da      	lsls	r2, r3, #27
 8005476:	d407      	bmi.n	8005488 <__swsetup_r+0x30>
 8005478:	2209      	movs	r2, #9
 800547a:	602a      	str	r2, [r5, #0]
 800547c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	81a3      	strh	r3, [r4, #12]
 8005486:	e033      	b.n	80054f0 <__swsetup_r+0x98>
 8005488:	0758      	lsls	r0, r3, #29
 800548a:	d512      	bpl.n	80054b2 <__swsetup_r+0x5a>
 800548c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800548e:	b141      	cbz	r1, 80054a2 <__swsetup_r+0x4a>
 8005490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005494:	4299      	cmp	r1, r3
 8005496:	d002      	beq.n	800549e <__swsetup_r+0x46>
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f8cd 	bl	8005638 <_free_r>
 800549e:	2300      	movs	r3, #0
 80054a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	2300      	movs	r3, #0
 80054ac:	6063      	str	r3, [r4, #4]
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f043 0308 	orr.w	r3, r3, #8
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	b94b      	cbnz	r3, 80054d2 <__swsetup_r+0x7a>
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c8:	d003      	beq.n	80054d2 <__swsetup_r+0x7a>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fea0 	bl	8006212 <__smakebuf_r>
 80054d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d6:	f013 0201 	ands.w	r2, r3, #1
 80054da:	d00a      	beq.n	80054f2 <__swsetup_r+0x9a>
 80054dc:	2200      	movs	r2, #0
 80054de:	60a2      	str	r2, [r4, #8]
 80054e0:	6962      	ldr	r2, [r4, #20]
 80054e2:	4252      	negs	r2, r2
 80054e4:	61a2      	str	r2, [r4, #24]
 80054e6:	6922      	ldr	r2, [r4, #16]
 80054e8:	b942      	cbnz	r2, 80054fc <__swsetup_r+0xa4>
 80054ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054ee:	d1c5      	bne.n	800547c <__swsetup_r+0x24>
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
 80054f2:	0799      	lsls	r1, r3, #30
 80054f4:	bf58      	it	pl
 80054f6:	6962      	ldrpl	r2, [r4, #20]
 80054f8:	60a2      	str	r2, [r4, #8]
 80054fa:	e7f4      	b.n	80054e6 <__swsetup_r+0x8e>
 80054fc:	2000      	movs	r0, #0
 80054fe:	e7f7      	b.n	80054f0 <__swsetup_r+0x98>
 8005500:	2000003c 	.word	0x2000003c

08005504 <memcmp>:
 8005504:	b510      	push	{r4, lr}
 8005506:	3901      	subs	r1, #1
 8005508:	4402      	add	r2, r0
 800550a:	4290      	cmp	r0, r2
 800550c:	d101      	bne.n	8005512 <memcmp+0xe>
 800550e:	2000      	movs	r0, #0
 8005510:	e005      	b.n	800551e <memcmp+0x1a>
 8005512:	7803      	ldrb	r3, [r0, #0]
 8005514:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005518:	42a3      	cmp	r3, r4
 800551a:	d001      	beq.n	8005520 <memcmp+0x1c>
 800551c:	1b18      	subs	r0, r3, r4
 800551e:	bd10      	pop	{r4, pc}
 8005520:	3001      	adds	r0, #1
 8005522:	e7f2      	b.n	800550a <memcmp+0x6>

08005524 <memset>:
 8005524:	4603      	mov	r3, r0
 8005526:	4402      	add	r2, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <_close_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	2300      	movs	r3, #0
 8005538:	4d05      	ldr	r5, [pc, #20]	@ (8005550 <_close_r+0x1c>)
 800553a:	4604      	mov	r4, r0
 800553c:	4608      	mov	r0, r1
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	f7fd facb 	bl	8002ada <_close>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_close_r+0x1a>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_close_r+0x1a>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20002f24 	.word	0x20002f24

08005554 <_lseek_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	4611      	mov	r1, r2
 800555c:	2200      	movs	r2, #0
 800555e:	4d05      	ldr	r5, [pc, #20]	@ (8005574 <_lseek_r+0x20>)
 8005560:	602a      	str	r2, [r5, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	f7fd fadd 	bl	8002b22 <_lseek>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_lseek_r+0x1e>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_lseek_r+0x1e>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	20002f24 	.word	0x20002f24

08005578 <_read_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	2200      	movs	r2, #0
 8005582:	4d05      	ldr	r5, [pc, #20]	@ (8005598 <_read_r+0x20>)
 8005584:	602a      	str	r2, [r5, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	f7fd fa6e 	bl	8002a68 <_read>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_read_r+0x1e>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_read_r+0x1e>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	20002f24 	.word	0x20002f24

0800559c <_write_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	2200      	movs	r2, #0
 80055a6:	4d05      	ldr	r5, [pc, #20]	@ (80055bc <_write_r+0x20>)
 80055a8:	602a      	str	r2, [r5, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f7fd fa79 	bl	8002aa2 <_write>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_write_r+0x1e>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_write_r+0x1e>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20002f24 	.word	0x20002f24

080055c0 <__errno>:
 80055c0:	4b01      	ldr	r3, [pc, #4]	@ (80055c8 <__errno+0x8>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	2000003c 	.word	0x2000003c

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	2600      	movs	r6, #0
 80055d0:	4d0c      	ldr	r5, [pc, #48]	@ (8005604 <__libc_init_array+0x38>)
 80055d2:	4c0d      	ldr	r4, [pc, #52]	@ (8005608 <__libc_init_array+0x3c>)
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	f000 ff1a 	bl	8006414 <_init>
 80055e0:	2600      	movs	r6, #0
 80055e2:	4d0a      	ldr	r5, [pc, #40]	@ (800560c <__libc_init_array+0x40>)
 80055e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005610 <__libc_init_array+0x44>)
 80055e6:	1b64      	subs	r4, r4, r5
 80055e8:	10a4      	asrs	r4, r4, #2
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	08006a54 	.word	0x08006a54
 8005608:	08006a54 	.word	0x08006a54
 800560c:	08006a54 	.word	0x08006a54
 8005610:	08006a58 	.word	0x08006a58

08005614 <__retarget_lock_init_recursive>:
 8005614:	4770      	bx	lr

08005616 <__retarget_lock_acquire_recursive>:
 8005616:	4770      	bx	lr

08005618 <__retarget_lock_release_recursive>:
 8005618:	4770      	bx	lr

0800561a <memcpy>:
 800561a:	440a      	add	r2, r1
 800561c:	4291      	cmp	r1, r2
 800561e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005622:	d100      	bne.n	8005626 <memcpy+0xc>
 8005624:	4770      	bx	lr
 8005626:	b510      	push	{r4, lr}
 8005628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562c:	4291      	cmp	r1, r2
 800562e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005632:	d1f9      	bne.n	8005628 <memcpy+0xe>
 8005634:	bd10      	pop	{r4, pc}
	...

08005638 <_free_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4605      	mov	r5, r0
 800563c:	2900      	cmp	r1, #0
 800563e:	d040      	beq.n	80056c2 <_free_r+0x8a>
 8005640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005644:	1f0c      	subs	r4, r1, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfb8      	it	lt
 800564a:	18e4      	addlt	r4, r4, r3
 800564c:	f000 f8de 	bl	800580c <__malloc_lock>
 8005650:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <_free_r+0x8c>)
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	b933      	cbnz	r3, 8005664 <_free_r+0x2c>
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	6014      	str	r4, [r2, #0]
 800565a:	4628      	mov	r0, r5
 800565c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005660:	f000 b8da 	b.w	8005818 <__malloc_unlock>
 8005664:	42a3      	cmp	r3, r4
 8005666:	d908      	bls.n	800567a <_free_r+0x42>
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	1821      	adds	r1, r4, r0
 800566c:	428b      	cmp	r3, r1
 800566e:	bf01      	itttt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	1809      	addeq	r1, r1, r0
 8005676:	6021      	streq	r1, [r4, #0]
 8005678:	e7ed      	b.n	8005656 <_free_r+0x1e>
 800567a:	461a      	mov	r2, r3
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b10b      	cbz	r3, 8005684 <_free_r+0x4c>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d9fa      	bls.n	800567a <_free_r+0x42>
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	1850      	adds	r0, r2, r1
 8005688:	42a0      	cmp	r0, r4
 800568a:	d10b      	bne.n	80056a4 <_free_r+0x6c>
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	4401      	add	r1, r0
 8005690:	1850      	adds	r0, r2, r1
 8005692:	4283      	cmp	r3, r0
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	d1e0      	bne.n	800565a <_free_r+0x22>
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4408      	add	r0, r1
 800569e:	6010      	str	r0, [r2, #0]
 80056a0:	6053      	str	r3, [r2, #4]
 80056a2:	e7da      	b.n	800565a <_free_r+0x22>
 80056a4:	d902      	bls.n	80056ac <_free_r+0x74>
 80056a6:	230c      	movs	r3, #12
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	e7d6      	b.n	800565a <_free_r+0x22>
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	1821      	adds	r1, r4, r0
 80056b0:	428b      	cmp	r3, r1
 80056b2:	bf01      	itttt	eq
 80056b4:	6819      	ldreq	r1, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	1809      	addeq	r1, r1, r0
 80056ba:	6021      	streq	r1, [r4, #0]
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	6054      	str	r4, [r2, #4]
 80056c0:	e7cb      	b.n	800565a <_free_r+0x22>
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	20002f30 	.word	0x20002f30

080056c8 <sbrk_aligned>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005708 <sbrk_aligned+0x40>)
 80056cc:	460c      	mov	r4, r1
 80056ce:	6831      	ldr	r1, [r6, #0]
 80056d0:	4605      	mov	r5, r0
 80056d2:	b911      	cbnz	r1, 80056da <sbrk_aligned+0x12>
 80056d4:	f000 fe4a 	bl	800636c <_sbrk_r>
 80056d8:	6030      	str	r0, [r6, #0]
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 fe45 	bl	800636c <_sbrk_r>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	d103      	bne.n	80056ee <sbrk_aligned+0x26>
 80056e6:	f04f 34ff 	mov.w	r4, #4294967295
 80056ea:	4620      	mov	r0, r4
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
 80056ee:	1cc4      	adds	r4, r0, #3
 80056f0:	f024 0403 	bic.w	r4, r4, #3
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d0f8      	beq.n	80056ea <sbrk_aligned+0x22>
 80056f8:	1a21      	subs	r1, r4, r0
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 fe36 	bl	800636c <_sbrk_r>
 8005700:	3001      	adds	r0, #1
 8005702:	d1f2      	bne.n	80056ea <sbrk_aligned+0x22>
 8005704:	e7ef      	b.n	80056e6 <sbrk_aligned+0x1e>
 8005706:	bf00      	nop
 8005708:	20002f2c 	.word	0x20002f2c

0800570c <_malloc_r>:
 800570c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005710:	1ccd      	adds	r5, r1, #3
 8005712:	f025 0503 	bic.w	r5, r5, #3
 8005716:	3508      	adds	r5, #8
 8005718:	2d0c      	cmp	r5, #12
 800571a:	bf38      	it	cc
 800571c:	250c      	movcc	r5, #12
 800571e:	2d00      	cmp	r5, #0
 8005720:	4606      	mov	r6, r0
 8005722:	db01      	blt.n	8005728 <_malloc_r+0x1c>
 8005724:	42a9      	cmp	r1, r5
 8005726:	d904      	bls.n	8005732 <_malloc_r+0x26>
 8005728:	230c      	movs	r3, #12
 800572a:	6033      	str	r3, [r6, #0]
 800572c:	2000      	movs	r0, #0
 800572e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005808 <_malloc_r+0xfc>
 8005736:	f000 f869 	bl	800580c <__malloc_lock>
 800573a:	f8d8 3000 	ldr.w	r3, [r8]
 800573e:	461c      	mov	r4, r3
 8005740:	bb44      	cbnz	r4, 8005794 <_malloc_r+0x88>
 8005742:	4629      	mov	r1, r5
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff ffbf 	bl	80056c8 <sbrk_aligned>
 800574a:	1c43      	adds	r3, r0, #1
 800574c:	4604      	mov	r4, r0
 800574e:	d158      	bne.n	8005802 <_malloc_r+0xf6>
 8005750:	f8d8 4000 	ldr.w	r4, [r8]
 8005754:	4627      	mov	r7, r4
 8005756:	2f00      	cmp	r7, #0
 8005758:	d143      	bne.n	80057e2 <_malloc_r+0xd6>
 800575a:	2c00      	cmp	r4, #0
 800575c:	d04b      	beq.n	80057f6 <_malloc_r+0xea>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	4639      	mov	r1, r7
 8005762:	4630      	mov	r0, r6
 8005764:	eb04 0903 	add.w	r9, r4, r3
 8005768:	f000 fe00 	bl	800636c <_sbrk_r>
 800576c:	4581      	cmp	r9, r0
 800576e:	d142      	bne.n	80057f6 <_malloc_r+0xea>
 8005770:	6821      	ldr	r1, [r4, #0]
 8005772:	4630      	mov	r0, r6
 8005774:	1a6d      	subs	r5, r5, r1
 8005776:	4629      	mov	r1, r5
 8005778:	f7ff ffa6 	bl	80056c8 <sbrk_aligned>
 800577c:	3001      	adds	r0, #1
 800577e:	d03a      	beq.n	80057f6 <_malloc_r+0xea>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	442b      	add	r3, r5
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	f8d8 3000 	ldr.w	r3, [r8]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	bb62      	cbnz	r2, 80057e8 <_malloc_r+0xdc>
 800578e:	f8c8 7000 	str.w	r7, [r8]
 8005792:	e00f      	b.n	80057b4 <_malloc_r+0xa8>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	1b52      	subs	r2, r2, r5
 8005798:	d420      	bmi.n	80057dc <_malloc_r+0xd0>
 800579a:	2a0b      	cmp	r2, #11
 800579c:	d917      	bls.n	80057ce <_malloc_r+0xc2>
 800579e:	1961      	adds	r1, r4, r5
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	6025      	str	r5, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	6059      	strne	r1, [r3, #4]
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	bf08      	it	eq
 80057ac:	f8c8 1000 	streq.w	r1, [r8]
 80057b0:	5162      	str	r2, [r4, r5]
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	4630      	mov	r0, r6
 80057b6:	f000 f82f 	bl	8005818 <__malloc_unlock>
 80057ba:	f104 000b 	add.w	r0, r4, #11
 80057be:	1d23      	adds	r3, r4, #4
 80057c0:	f020 0007 	bic.w	r0, r0, #7
 80057c4:	1ac2      	subs	r2, r0, r3
 80057c6:	bf1c      	itt	ne
 80057c8:	1a1b      	subne	r3, r3, r0
 80057ca:	50a3      	strne	r3, [r4, r2]
 80057cc:	e7af      	b.n	800572e <_malloc_r+0x22>
 80057ce:	6862      	ldr	r2, [r4, #4]
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	bf0c      	ite	eq
 80057d4:	f8c8 2000 	streq.w	r2, [r8]
 80057d8:	605a      	strne	r2, [r3, #4]
 80057da:	e7eb      	b.n	80057b4 <_malloc_r+0xa8>
 80057dc:	4623      	mov	r3, r4
 80057de:	6864      	ldr	r4, [r4, #4]
 80057e0:	e7ae      	b.n	8005740 <_malloc_r+0x34>
 80057e2:	463c      	mov	r4, r7
 80057e4:	687f      	ldr	r7, [r7, #4]
 80057e6:	e7b6      	b.n	8005756 <_malloc_r+0x4a>
 80057e8:	461a      	mov	r2, r3
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d1fb      	bne.n	80057e8 <_malloc_r+0xdc>
 80057f0:	2300      	movs	r3, #0
 80057f2:	6053      	str	r3, [r2, #4]
 80057f4:	e7de      	b.n	80057b4 <_malloc_r+0xa8>
 80057f6:	230c      	movs	r3, #12
 80057f8:	4630      	mov	r0, r6
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	f000 f80c 	bl	8005818 <__malloc_unlock>
 8005800:	e794      	b.n	800572c <_malloc_r+0x20>
 8005802:	6005      	str	r5, [r0, #0]
 8005804:	e7d6      	b.n	80057b4 <_malloc_r+0xa8>
 8005806:	bf00      	nop
 8005808:	20002f30 	.word	0x20002f30

0800580c <__malloc_lock>:
 800580c:	4801      	ldr	r0, [pc, #4]	@ (8005814 <__malloc_lock+0x8>)
 800580e:	f7ff bf02 	b.w	8005616 <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	20002f28 	.word	0x20002f28

08005818 <__malloc_unlock>:
 8005818:	4801      	ldr	r0, [pc, #4]	@ (8005820 <__malloc_unlock+0x8>)
 800581a:	f7ff befd 	b.w	8005618 <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	20002f28 	.word	0x20002f28

08005824 <__ssputs_r>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	461f      	mov	r7, r3
 800582a:	688e      	ldr	r6, [r1, #8]
 800582c:	4682      	mov	sl, r0
 800582e:	42be      	cmp	r6, r7
 8005830:	460c      	mov	r4, r1
 8005832:	4690      	mov	r8, r2
 8005834:	680b      	ldr	r3, [r1, #0]
 8005836:	d82d      	bhi.n	8005894 <__ssputs_r+0x70>
 8005838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800583c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005840:	d026      	beq.n	8005890 <__ssputs_r+0x6c>
 8005842:	6965      	ldr	r5, [r4, #20]
 8005844:	6909      	ldr	r1, [r1, #16]
 8005846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800584a:	eba3 0901 	sub.w	r9, r3, r1
 800584e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005852:	1c7b      	adds	r3, r7, #1
 8005854:	444b      	add	r3, r9
 8005856:	106d      	asrs	r5, r5, #1
 8005858:	429d      	cmp	r5, r3
 800585a:	bf38      	it	cc
 800585c:	461d      	movcc	r5, r3
 800585e:	0553      	lsls	r3, r2, #21
 8005860:	d527      	bpl.n	80058b2 <__ssputs_r+0x8e>
 8005862:	4629      	mov	r1, r5
 8005864:	f7ff ff52 	bl	800570c <_malloc_r>
 8005868:	4606      	mov	r6, r0
 800586a:	b360      	cbz	r0, 80058c6 <__ssputs_r+0xa2>
 800586c:	464a      	mov	r2, r9
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	f7ff fed3 	bl	800561a <memcpy>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800587a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	6126      	str	r6, [r4, #16]
 8005882:	444e      	add	r6, r9
 8005884:	6026      	str	r6, [r4, #0]
 8005886:	463e      	mov	r6, r7
 8005888:	6165      	str	r5, [r4, #20]
 800588a:	eba5 0509 	sub.w	r5, r5, r9
 800588e:	60a5      	str	r5, [r4, #8]
 8005890:	42be      	cmp	r6, r7
 8005892:	d900      	bls.n	8005896 <__ssputs_r+0x72>
 8005894:	463e      	mov	r6, r7
 8005896:	4632      	mov	r2, r6
 8005898:	4641      	mov	r1, r8
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	f000 fd29 	bl	80062f2 <memmove>
 80058a0:	2000      	movs	r0, #0
 80058a2:	68a3      	ldr	r3, [r4, #8]
 80058a4:	1b9b      	subs	r3, r3, r6
 80058a6:	60a3      	str	r3, [r4, #8]
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	4433      	add	r3, r6
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	462a      	mov	r2, r5
 80058b4:	f000 fd78 	bl	80063a8 <_realloc_r>
 80058b8:	4606      	mov	r6, r0
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d1e0      	bne.n	8005880 <__ssputs_r+0x5c>
 80058be:	4650      	mov	r0, sl
 80058c0:	6921      	ldr	r1, [r4, #16]
 80058c2:	f7ff feb9 	bl	8005638 <_free_r>
 80058c6:	230c      	movs	r3, #12
 80058c8:	f8ca 3000 	str.w	r3, [sl]
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	e7e9      	b.n	80058ae <__ssputs_r+0x8a>
	...

080058dc <_svfiprintf_r>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	4698      	mov	r8, r3
 80058e2:	898b      	ldrh	r3, [r1, #12]
 80058e4:	4607      	mov	r7, r0
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	460d      	mov	r5, r1
 80058ea:	4614      	mov	r4, r2
 80058ec:	b09d      	sub	sp, #116	@ 0x74
 80058ee:	d510      	bpl.n	8005912 <_svfiprintf_r+0x36>
 80058f0:	690b      	ldr	r3, [r1, #16]
 80058f2:	b973      	cbnz	r3, 8005912 <_svfiprintf_r+0x36>
 80058f4:	2140      	movs	r1, #64	@ 0x40
 80058f6:	f7ff ff09 	bl	800570c <_malloc_r>
 80058fa:	6028      	str	r0, [r5, #0]
 80058fc:	6128      	str	r0, [r5, #16]
 80058fe:	b930      	cbnz	r0, 800590e <_svfiprintf_r+0x32>
 8005900:	230c      	movs	r3, #12
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	b01d      	add	sp, #116	@ 0x74
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	2340      	movs	r3, #64	@ 0x40
 8005910:	616b      	str	r3, [r5, #20]
 8005912:	2300      	movs	r3, #0
 8005914:	9309      	str	r3, [sp, #36]	@ 0x24
 8005916:	2320      	movs	r3, #32
 8005918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800591c:	2330      	movs	r3, #48	@ 0x30
 800591e:	f04f 0901 	mov.w	r9, #1
 8005922:	f8cd 800c 	str.w	r8, [sp, #12]
 8005926:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ac0 <_svfiprintf_r+0x1e4>
 800592a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800592e:	4623      	mov	r3, r4
 8005930:	469a      	mov	sl, r3
 8005932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005936:	b10a      	cbz	r2, 800593c <_svfiprintf_r+0x60>
 8005938:	2a25      	cmp	r2, #37	@ 0x25
 800593a:	d1f9      	bne.n	8005930 <_svfiprintf_r+0x54>
 800593c:	ebba 0b04 	subs.w	fp, sl, r4
 8005940:	d00b      	beq.n	800595a <_svfiprintf_r+0x7e>
 8005942:	465b      	mov	r3, fp
 8005944:	4622      	mov	r2, r4
 8005946:	4629      	mov	r1, r5
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff ff6b 	bl	8005824 <__ssputs_r>
 800594e:	3001      	adds	r0, #1
 8005950:	f000 80a7 	beq.w	8005aa2 <_svfiprintf_r+0x1c6>
 8005954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005956:	445a      	add	r2, fp
 8005958:	9209      	str	r2, [sp, #36]	@ 0x24
 800595a:	f89a 3000 	ldrb.w	r3, [sl]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 809f 	beq.w	8005aa2 <_svfiprintf_r+0x1c6>
 8005964:	2300      	movs	r3, #0
 8005966:	f04f 32ff 	mov.w	r2, #4294967295
 800596a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800596e:	f10a 0a01 	add.w	sl, sl, #1
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	9307      	str	r3, [sp, #28]
 8005976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800597a:	931a      	str	r3, [sp, #104]	@ 0x68
 800597c:	4654      	mov	r4, sl
 800597e:	2205      	movs	r2, #5
 8005980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005984:	484e      	ldr	r0, [pc, #312]	@ (8005ac0 <_svfiprintf_r+0x1e4>)
 8005986:	f000 fd01 	bl	800638c <memchr>
 800598a:	9a04      	ldr	r2, [sp, #16]
 800598c:	b9d8      	cbnz	r0, 80059c6 <_svfiprintf_r+0xea>
 800598e:	06d0      	lsls	r0, r2, #27
 8005990:	bf44      	itt	mi
 8005992:	2320      	movmi	r3, #32
 8005994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005998:	0711      	lsls	r1, r2, #28
 800599a:	bf44      	itt	mi
 800599c:	232b      	movmi	r3, #43	@ 0x2b
 800599e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a2:	f89a 3000 	ldrb.w	r3, [sl]
 80059a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a8:	d015      	beq.n	80059d6 <_svfiprintf_r+0xfa>
 80059aa:	4654      	mov	r4, sl
 80059ac:	2000      	movs	r0, #0
 80059ae:	f04f 0c0a 	mov.w	ip, #10
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	4621      	mov	r1, r4
 80059b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ba:	3b30      	subs	r3, #48	@ 0x30
 80059bc:	2b09      	cmp	r3, #9
 80059be:	d94b      	bls.n	8005a58 <_svfiprintf_r+0x17c>
 80059c0:	b1b0      	cbz	r0, 80059f0 <_svfiprintf_r+0x114>
 80059c2:	9207      	str	r2, [sp, #28]
 80059c4:	e014      	b.n	80059f0 <_svfiprintf_r+0x114>
 80059c6:	eba0 0308 	sub.w	r3, r0, r8
 80059ca:	fa09 f303 	lsl.w	r3, r9, r3
 80059ce:	4313      	orrs	r3, r2
 80059d0:	46a2      	mov	sl, r4
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	e7d2      	b.n	800597c <_svfiprintf_r+0xa0>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	1d19      	adds	r1, r3, #4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	9103      	str	r1, [sp, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfbb      	ittet	lt
 80059e2:	425b      	neglt	r3, r3
 80059e4:	f042 0202 	orrlt.w	r2, r2, #2
 80059e8:	9307      	strge	r3, [sp, #28]
 80059ea:	9307      	strlt	r3, [sp, #28]
 80059ec:	bfb8      	it	lt
 80059ee:	9204      	strlt	r2, [sp, #16]
 80059f0:	7823      	ldrb	r3, [r4, #0]
 80059f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059f4:	d10a      	bne.n	8005a0c <_svfiprintf_r+0x130>
 80059f6:	7863      	ldrb	r3, [r4, #1]
 80059f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059fa:	d132      	bne.n	8005a62 <_svfiprintf_r+0x186>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	3402      	adds	r4, #2
 8005a00:	1d1a      	adds	r2, r3, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	9203      	str	r2, [sp, #12]
 8005a06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a0a:	9305      	str	r3, [sp, #20]
 8005a0c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ac4 <_svfiprintf_r+0x1e8>
 8005a10:	2203      	movs	r2, #3
 8005a12:	4650      	mov	r0, sl
 8005a14:	7821      	ldrb	r1, [r4, #0]
 8005a16:	f000 fcb9 	bl	800638c <memchr>
 8005a1a:	b138      	cbz	r0, 8005a2c <_svfiprintf_r+0x150>
 8005a1c:	2240      	movs	r2, #64	@ 0x40
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	eba0 000a 	sub.w	r0, r0, sl
 8005a24:	4082      	lsls	r2, r0
 8005a26:	4313      	orrs	r3, r2
 8005a28:	3401      	adds	r4, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a30:	2206      	movs	r2, #6
 8005a32:	4825      	ldr	r0, [pc, #148]	@ (8005ac8 <_svfiprintf_r+0x1ec>)
 8005a34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a38:	f000 fca8 	bl	800638c <memchr>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d036      	beq.n	8005aae <_svfiprintf_r+0x1d2>
 8005a40:	4b22      	ldr	r3, [pc, #136]	@ (8005acc <_svfiprintf_r+0x1f0>)
 8005a42:	bb1b      	cbnz	r3, 8005a8c <_svfiprintf_r+0x1b0>
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	3307      	adds	r3, #7
 8005a48:	f023 0307 	bic.w	r3, r3, #7
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	9303      	str	r3, [sp, #12]
 8005a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a52:	4433      	add	r3, r6
 8005a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a56:	e76a      	b.n	800592e <_svfiprintf_r+0x52>
 8005a58:	460c      	mov	r4, r1
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a60:	e7a8      	b.n	80059b4 <_svfiprintf_r+0xd8>
 8005a62:	2300      	movs	r3, #0
 8005a64:	f04f 0c0a 	mov.w	ip, #10
 8005a68:	4619      	mov	r1, r3
 8005a6a:	3401      	adds	r4, #1
 8005a6c:	9305      	str	r3, [sp, #20]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a74:	3a30      	subs	r2, #48	@ 0x30
 8005a76:	2a09      	cmp	r2, #9
 8005a78:	d903      	bls.n	8005a82 <_svfiprintf_r+0x1a6>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0c6      	beq.n	8005a0c <_svfiprintf_r+0x130>
 8005a7e:	9105      	str	r1, [sp, #20]
 8005a80:	e7c4      	b.n	8005a0c <_svfiprintf_r+0x130>
 8005a82:	4604      	mov	r4, r0
 8005a84:	2301      	movs	r3, #1
 8005a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a8a:	e7f0      	b.n	8005a6e <_svfiprintf_r+0x192>
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4638      	mov	r0, r7
 8005a94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad0 <_svfiprintf_r+0x1f4>)
 8005a96:	a904      	add	r1, sp, #16
 8005a98:	f3af 8000 	nop.w
 8005a9c:	1c42      	adds	r2, r0, #1
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	d1d6      	bne.n	8005a50 <_svfiprintf_r+0x174>
 8005aa2:	89ab      	ldrh	r3, [r5, #12]
 8005aa4:	065b      	lsls	r3, r3, #25
 8005aa6:	f53f af2d 	bmi.w	8005904 <_svfiprintf_r+0x28>
 8005aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005aac:	e72c      	b.n	8005908 <_svfiprintf_r+0x2c>
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <_svfiprintf_r+0x1f4>)
 8005ab8:	a904      	add	r1, sp, #16
 8005aba:	f000 f9bd 	bl	8005e38 <_printf_i>
 8005abe:	e7ed      	b.n	8005a9c <_svfiprintf_r+0x1c0>
 8005ac0:	08006a18 	.word	0x08006a18
 8005ac4:	08006a1e 	.word	0x08006a1e
 8005ac8:	08006a22 	.word	0x08006a22
 8005acc:	00000000 	.word	0x00000000
 8005ad0:	08005825 	.word	0x08005825

08005ad4 <__sfputc_r>:
 8005ad4:	6893      	ldr	r3, [r2, #8]
 8005ad6:	b410      	push	{r4}
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	6093      	str	r3, [r2, #8]
 8005ade:	da07      	bge.n	8005af0 <__sfputc_r+0x1c>
 8005ae0:	6994      	ldr	r4, [r2, #24]
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	db01      	blt.n	8005aea <__sfputc_r+0x16>
 8005ae6:	290a      	cmp	r1, #10
 8005ae8:	d102      	bne.n	8005af0 <__sfputc_r+0x1c>
 8005aea:	bc10      	pop	{r4}
 8005aec:	f7ff bc75 	b.w	80053da <__swbuf_r>
 8005af0:	6813      	ldr	r3, [r2, #0]
 8005af2:	1c58      	adds	r0, r3, #1
 8005af4:	6010      	str	r0, [r2, #0]
 8005af6:	7019      	strb	r1, [r3, #0]
 8005af8:	4608      	mov	r0, r1
 8005afa:	bc10      	pop	{r4}
 8005afc:	4770      	bx	lr

08005afe <__sfputs_r>:
 8005afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	460f      	mov	r7, r1
 8005b04:	4614      	mov	r4, r2
 8005b06:	18d5      	adds	r5, r2, r3
 8005b08:	42ac      	cmp	r4, r5
 8005b0a:	d101      	bne.n	8005b10 <__sfputs_r+0x12>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e007      	b.n	8005b20 <__sfputs_r+0x22>
 8005b10:	463a      	mov	r2, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b18:	f7ff ffdc 	bl	8005ad4 <__sfputc_r>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d1f3      	bne.n	8005b08 <__sfputs_r+0xa>
 8005b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b24 <_vfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	460d      	mov	r5, r1
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	4698      	mov	r8, r3
 8005b2e:	4606      	mov	r6, r0
 8005b30:	b09d      	sub	sp, #116	@ 0x74
 8005b32:	b118      	cbz	r0, 8005b3c <_vfiprintf_r+0x18>
 8005b34:	6a03      	ldr	r3, [r0, #32]
 8005b36:	b90b      	cbnz	r3, 8005b3c <_vfiprintf_r+0x18>
 8005b38:	f7ff fb3e 	bl	80051b8 <__sinit>
 8005b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	d405      	bmi.n	8005b4e <_vfiprintf_r+0x2a>
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	059a      	lsls	r2, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_vfiprintf_r+0x2a>
 8005b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b4a:	f7ff fd64 	bl	8005616 <__retarget_lock_acquire_recursive>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	071b      	lsls	r3, r3, #28
 8005b52:	d501      	bpl.n	8005b58 <_vfiprintf_r+0x34>
 8005b54:	692b      	ldr	r3, [r5, #16]
 8005b56:	b99b      	cbnz	r3, 8005b80 <_vfiprintf_r+0x5c>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7ff fc7c 	bl	8005458 <__swsetup_r>
 8005b60:	b170      	cbz	r0, 8005b80 <_vfiprintf_r+0x5c>
 8005b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b64:	07dc      	lsls	r4, r3, #31
 8005b66:	d504      	bpl.n	8005b72 <_vfiprintf_r+0x4e>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b01d      	add	sp, #116	@ 0x74
 8005b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	0598      	lsls	r0, r3, #22
 8005b76:	d4f7      	bmi.n	8005b68 <_vfiprintf_r+0x44>
 8005b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b7a:	f7ff fd4d 	bl	8005618 <__retarget_lock_release_recursive>
 8005b7e:	e7f3      	b.n	8005b68 <_vfiprintf_r+0x44>
 8005b80:	2300      	movs	r3, #0
 8005b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b84:	2320      	movs	r3, #32
 8005b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b8a:	2330      	movs	r3, #48	@ 0x30
 8005b8c:	f04f 0901 	mov.w	r9, #1
 8005b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005d40 <_vfiprintf_r+0x21c>
 8005b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	469a      	mov	sl, r3
 8005ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba4:	b10a      	cbz	r2, 8005baa <_vfiprintf_r+0x86>
 8005ba6:	2a25      	cmp	r2, #37	@ 0x25
 8005ba8:	d1f9      	bne.n	8005b9e <_vfiprintf_r+0x7a>
 8005baa:	ebba 0b04 	subs.w	fp, sl, r4
 8005bae:	d00b      	beq.n	8005bc8 <_vfiprintf_r+0xa4>
 8005bb0:	465b      	mov	r3, fp
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7ff ffa1 	bl	8005afe <__sfputs_r>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f000 80a7 	beq.w	8005d10 <_vfiprintf_r+0x1ec>
 8005bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bc4:	445a      	add	r2, fp
 8005bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 809f 	beq.w	8005d10 <_vfiprintf_r+0x1ec>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bdc:	f10a 0a01 	add.w	sl, sl, #1
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	9307      	str	r3, [sp, #28]
 8005be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bea:	4654      	mov	r4, sl
 8005bec:	2205      	movs	r2, #5
 8005bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf2:	4853      	ldr	r0, [pc, #332]	@ (8005d40 <_vfiprintf_r+0x21c>)
 8005bf4:	f000 fbca 	bl	800638c <memchr>
 8005bf8:	9a04      	ldr	r2, [sp, #16]
 8005bfa:	b9d8      	cbnz	r0, 8005c34 <_vfiprintf_r+0x110>
 8005bfc:	06d1      	lsls	r1, r2, #27
 8005bfe:	bf44      	itt	mi
 8005c00:	2320      	movmi	r3, #32
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c06:	0713      	lsls	r3, r2, #28
 8005c08:	bf44      	itt	mi
 8005c0a:	232b      	movmi	r3, #43	@ 0x2b
 8005c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c10:	f89a 3000 	ldrb.w	r3, [sl]
 8005c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c16:	d015      	beq.n	8005c44 <_vfiprintf_r+0x120>
 8005c18:	4654      	mov	r4, sl
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f04f 0c0a 	mov.w	ip, #10
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	4621      	mov	r1, r4
 8005c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c28:	3b30      	subs	r3, #48	@ 0x30
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d94b      	bls.n	8005cc6 <_vfiprintf_r+0x1a2>
 8005c2e:	b1b0      	cbz	r0, 8005c5e <_vfiprintf_r+0x13a>
 8005c30:	9207      	str	r2, [sp, #28]
 8005c32:	e014      	b.n	8005c5e <_vfiprintf_r+0x13a>
 8005c34:	eba0 0308 	sub.w	r3, r0, r8
 8005c38:	fa09 f303 	lsl.w	r3, r9, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	46a2      	mov	sl, r4
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	e7d2      	b.n	8005bea <_vfiprintf_r+0xc6>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	1d19      	adds	r1, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	9103      	str	r1, [sp, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfbb      	ittet	lt
 8005c50:	425b      	neglt	r3, r3
 8005c52:	f042 0202 	orrlt.w	r2, r2, #2
 8005c56:	9307      	strge	r3, [sp, #28]
 8005c58:	9307      	strlt	r3, [sp, #28]
 8005c5a:	bfb8      	it	lt
 8005c5c:	9204      	strlt	r2, [sp, #16]
 8005c5e:	7823      	ldrb	r3, [r4, #0]
 8005c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c62:	d10a      	bne.n	8005c7a <_vfiprintf_r+0x156>
 8005c64:	7863      	ldrb	r3, [r4, #1]
 8005c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c68:	d132      	bne.n	8005cd0 <_vfiprintf_r+0x1ac>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	3402      	adds	r4, #2
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	9203      	str	r2, [sp, #12]
 8005c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005d44 <_vfiprintf_r+0x220>
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4650      	mov	r0, sl
 8005c82:	7821      	ldrb	r1, [r4, #0]
 8005c84:	f000 fb82 	bl	800638c <memchr>
 8005c88:	b138      	cbz	r0, 8005c9a <_vfiprintf_r+0x176>
 8005c8a:	2240      	movs	r2, #64	@ 0x40
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	eba0 000a 	sub.w	r0, r0, sl
 8005c92:	4082      	lsls	r2, r0
 8005c94:	4313      	orrs	r3, r2
 8005c96:	3401      	adds	r4, #1
 8005c98:	9304      	str	r3, [sp, #16]
 8005c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9e:	2206      	movs	r2, #6
 8005ca0:	4829      	ldr	r0, [pc, #164]	@ (8005d48 <_vfiprintf_r+0x224>)
 8005ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ca6:	f000 fb71 	bl	800638c <memchr>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d03f      	beq.n	8005d2e <_vfiprintf_r+0x20a>
 8005cae:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <_vfiprintf_r+0x228>)
 8005cb0:	bb1b      	cbnz	r3, 8005cfa <_vfiprintf_r+0x1d6>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	3307      	adds	r3, #7
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	3308      	adds	r3, #8
 8005cbc:	9303      	str	r3, [sp, #12]
 8005cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc0:	443b      	add	r3, r7
 8005cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc4:	e76a      	b.n	8005b9c <_vfiprintf_r+0x78>
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	2001      	movs	r0, #1
 8005cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cce:	e7a8      	b.n	8005c22 <_vfiprintf_r+0xfe>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f04f 0c0a 	mov.w	ip, #10
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	3401      	adds	r4, #1
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce2:	3a30      	subs	r2, #48	@ 0x30
 8005ce4:	2a09      	cmp	r2, #9
 8005ce6:	d903      	bls.n	8005cf0 <_vfiprintf_r+0x1cc>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0c6      	beq.n	8005c7a <_vfiprintf_r+0x156>
 8005cec:	9105      	str	r1, [sp, #20]
 8005cee:	e7c4      	b.n	8005c7a <_vfiprintf_r+0x156>
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf8:	e7f0      	b.n	8005cdc <_vfiprintf_r+0x1b8>
 8005cfa:	ab03      	add	r3, sp, #12
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	462a      	mov	r2, r5
 8005d00:	4630      	mov	r0, r6
 8005d02:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <_vfiprintf_r+0x22c>)
 8005d04:	a904      	add	r1, sp, #16
 8005d06:	f3af 8000 	nop.w
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	1c78      	adds	r0, r7, #1
 8005d0e:	d1d6      	bne.n	8005cbe <_vfiprintf_r+0x19a>
 8005d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d12:	07d9      	lsls	r1, r3, #31
 8005d14:	d405      	bmi.n	8005d22 <_vfiprintf_r+0x1fe>
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	059a      	lsls	r2, r3, #22
 8005d1a:	d402      	bmi.n	8005d22 <_vfiprintf_r+0x1fe>
 8005d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d1e:	f7ff fc7b 	bl	8005618 <__retarget_lock_release_recursive>
 8005d22:	89ab      	ldrh	r3, [r5, #12]
 8005d24:	065b      	lsls	r3, r3, #25
 8005d26:	f53f af1f 	bmi.w	8005b68 <_vfiprintf_r+0x44>
 8005d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d2c:	e71e      	b.n	8005b6c <_vfiprintf_r+0x48>
 8005d2e:	ab03      	add	r3, sp, #12
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	462a      	mov	r2, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <_vfiprintf_r+0x22c>)
 8005d38:	a904      	add	r1, sp, #16
 8005d3a:	f000 f87d 	bl	8005e38 <_printf_i>
 8005d3e:	e7e4      	b.n	8005d0a <_vfiprintf_r+0x1e6>
 8005d40:	08006a18 	.word	0x08006a18
 8005d44:	08006a1e 	.word	0x08006a1e
 8005d48:	08006a22 	.word	0x08006a22
 8005d4c:	00000000 	.word	0x00000000
 8005d50:	08005aff 	.word	0x08005aff

08005d54 <_printf_common>:
 8005d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	4616      	mov	r6, r2
 8005d5a:	4698      	mov	r8, r3
 8005d5c:	688a      	ldr	r2, [r1, #8]
 8005d5e:	690b      	ldr	r3, [r1, #16]
 8005d60:	4607      	mov	r7, r0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfb8      	it	lt
 8005d66:	4613      	movlt	r3, r2
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d6e:	460c      	mov	r4, r1
 8005d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d74:	b10a      	cbz	r2, 8005d7a <_printf_common+0x26>
 8005d76:	3301      	adds	r3, #1
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	0699      	lsls	r1, r3, #26
 8005d7e:	bf42      	ittt	mi
 8005d80:	6833      	ldrmi	r3, [r6, #0]
 8005d82:	3302      	addmi	r3, #2
 8005d84:	6033      	strmi	r3, [r6, #0]
 8005d86:	6825      	ldr	r5, [r4, #0]
 8005d88:	f015 0506 	ands.w	r5, r5, #6
 8005d8c:	d106      	bne.n	8005d9c <_printf_common+0x48>
 8005d8e:	f104 0a19 	add.w	sl, r4, #25
 8005d92:	68e3      	ldr	r3, [r4, #12]
 8005d94:	6832      	ldr	r2, [r6, #0]
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dc2b      	bgt.n	8005df4 <_printf_common+0xa0>
 8005d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005da0:	6822      	ldr	r2, [r4, #0]
 8005da2:	3b00      	subs	r3, #0
 8005da4:	bf18      	it	ne
 8005da6:	2301      	movne	r3, #1
 8005da8:	0692      	lsls	r2, r2, #26
 8005daa:	d430      	bmi.n	8005e0e <_printf_common+0xba>
 8005dac:	4641      	mov	r1, r8
 8005dae:	4638      	mov	r0, r7
 8005db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d023      	beq.n	8005e02 <_printf_common+0xae>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	6922      	ldr	r2, [r4, #16]
 8005dbe:	f003 0306 	and.w	r3, r3, #6
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	bf14      	ite	ne
 8005dc6:	2500      	movne	r5, #0
 8005dc8:	6833      	ldreq	r3, [r6, #0]
 8005dca:	f04f 0600 	mov.w	r6, #0
 8005dce:	bf08      	it	eq
 8005dd0:	68e5      	ldreq	r5, [r4, #12]
 8005dd2:	f104 041a 	add.w	r4, r4, #26
 8005dd6:	bf08      	it	eq
 8005dd8:	1aed      	subeq	r5, r5, r3
 8005dda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dde:	bf08      	it	eq
 8005de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de4:	4293      	cmp	r3, r2
 8005de6:	bfc4      	itt	gt
 8005de8:	1a9b      	subgt	r3, r3, r2
 8005dea:	18ed      	addgt	r5, r5, r3
 8005dec:	42b5      	cmp	r5, r6
 8005dee:	d11a      	bne.n	8005e26 <_printf_common+0xd2>
 8005df0:	2000      	movs	r0, #0
 8005df2:	e008      	b.n	8005e06 <_printf_common+0xb2>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4652      	mov	r2, sl
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c8      	blx	r9
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d103      	bne.n	8005e0a <_printf_common+0xb6>
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	e7c1      	b.n	8005d92 <_printf_common+0x3e>
 8005e0e:	2030      	movs	r0, #48	@ 0x30
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e1c:	4422      	add	r2, r4
 8005e1e:	3302      	adds	r3, #2
 8005e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e24:	e7c2      	b.n	8005dac <_printf_common+0x58>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	47c8      	blx	r9
 8005e30:	3001      	adds	r0, #1
 8005e32:	d0e6      	beq.n	8005e02 <_printf_common+0xae>
 8005e34:	3601      	adds	r6, #1
 8005e36:	e7d9      	b.n	8005dec <_printf_common+0x98>

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	4691      	mov	r9, r2
 8005e40:	2f78      	cmp	r7, #120	@ 0x78
 8005e42:	4680      	mov	r8, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	469a      	mov	sl, r3
 8005e48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	@ 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d3 	beq.w	8006000 <_printf_i+0x1c8>
 8005e5a:	2f58      	cmp	r7, #88	@ 0x58
 8005e5c:	f000 80ba 	beq.w	8005fd4 <_printf_i+0x19c>
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	@ (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005fe7 	.word	0x08005fe7
 8005ea8:	08005f0f 	.word	0x08005f0f
 8005eac:	08005fa1 	.word	0x08005fa1
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006009 	.word	0x08006009
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f0f 	.word	0x08005f0f
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fa9 	.word	0x08005fa9
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e09e      	b.n	8006022 <_printf_i+0x1ea>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	1d19      	adds	r1, r3, #4
 8005eea:	6031      	str	r1, [r6, #0]
 8005eec:	0606      	lsls	r6, r0, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xbc>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e003      	b.n	8005efc <_printf_i+0xc4>
 8005ef4:	0645      	lsls	r5, r0, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xb8>
 8005ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	da03      	bge.n	8005f08 <_printf_i+0xd0>
 8005f00:	232d      	movs	r3, #45	@ 0x2d
 8005f02:	426d      	negs	r5, r5
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f08:	230a      	movs	r3, #10
 8005f0a:	4859      	ldr	r0, [pc, #356]	@ (8006070 <_printf_i+0x238>)
 8005f0c:	e011      	b.n	8005f32 <_printf_i+0xfa>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	0608      	lsls	r0, r1, #24
 8005f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f18:	d402      	bmi.n	8005f20 <_printf_i+0xe8>
 8005f1a:	0649      	lsls	r1, r1, #25
 8005f1c:	bf48      	it	mi
 8005f1e:	b2ad      	uxthmi	r5, r5
 8005f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	bf14      	ite	ne
 8005f26:	230a      	movne	r3, #10
 8005f28:	2308      	moveq	r3, #8
 8005f2a:	4851      	ldr	r0, [pc, #324]	@ (8006070 <_printf_i+0x238>)
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f32:	6866      	ldr	r6, [r4, #4]
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	bfa8      	it	ge
 8005f38:	6821      	ldrge	r1, [r4, #0]
 8005f3a:	60a6      	str	r6, [r4, #8]
 8005f3c:	bfa4      	itt	ge
 8005f3e:	f021 0104 	bicge.w	r1, r1, #4
 8005f42:	6021      	strge	r1, [r4, #0]
 8005f44:	b90d      	cbnz	r5, 8005f4a <_printf_i+0x112>
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	d04b      	beq.n	8005fe2 <_printf_i+0x1aa>
 8005f4a:	4616      	mov	r6, r2
 8005f4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f50:	fb03 5711 	mls	r7, r3, r1, r5
 8005f54:	5dc7      	ldrb	r7, [r0, r7]
 8005f56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f5a:	462f      	mov	r7, r5
 8005f5c:	42bb      	cmp	r3, r7
 8005f5e:	460d      	mov	r5, r1
 8005f60:	d9f4      	bls.n	8005f4c <_printf_i+0x114>
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d10b      	bne.n	8005f7e <_printf_i+0x146>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	07df      	lsls	r7, r3, #31
 8005f6a:	d508      	bpl.n	8005f7e <_printf_i+0x146>
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	6861      	ldr	r1, [r4, #4]
 8005f70:	4299      	cmp	r1, r3
 8005f72:	bfde      	ittt	le
 8005f74:	2330      	movle	r3, #48	@ 0x30
 8005f76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f7e:	1b92      	subs	r2, r2, r6
 8005f80:	6122      	str	r2, [r4, #16]
 8005f82:	464b      	mov	r3, r9
 8005f84:	4621      	mov	r1, r4
 8005f86:	4640      	mov	r0, r8
 8005f88:	f8cd a000 	str.w	sl, [sp]
 8005f8c:	aa03      	add	r2, sp, #12
 8005f8e:	f7ff fee1 	bl	8005d54 <_printf_common>
 8005f92:	3001      	adds	r0, #1
 8005f94:	d14a      	bne.n	800602c <_printf_i+0x1f4>
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	b004      	add	sp, #16
 8005f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	f043 0320 	orr.w	r3, r3, #32
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	2778      	movs	r7, #120	@ 0x78
 8005faa:	4832      	ldr	r0, [pc, #200]	@ (8006074 <_printf_i+0x23c>)
 8005fac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	6831      	ldr	r1, [r6, #0]
 8005fb4:	061f      	lsls	r7, r3, #24
 8005fb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fba:	d402      	bmi.n	8005fc2 <_printf_i+0x18a>
 8005fbc:	065f      	lsls	r7, r3, #25
 8005fbe:	bf48      	it	mi
 8005fc0:	b2ad      	uxthmi	r5, r5
 8005fc2:	6031      	str	r1, [r6, #0]
 8005fc4:	07d9      	lsls	r1, r3, #31
 8005fc6:	bf44      	itt	mi
 8005fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fcc:	6023      	strmi	r3, [r4, #0]
 8005fce:	b11d      	cbz	r5, 8005fd8 <_printf_i+0x1a0>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	e7ab      	b.n	8005f2c <_printf_i+0xf4>
 8005fd4:	4826      	ldr	r0, [pc, #152]	@ (8006070 <_printf_i+0x238>)
 8005fd6:	e7e9      	b.n	8005fac <_printf_i+0x174>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	f023 0320 	bic.w	r3, r3, #32
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	e7f6      	b.n	8005fd0 <_printf_i+0x198>
 8005fe2:	4616      	mov	r6, r2
 8005fe4:	e7bd      	b.n	8005f62 <_printf_i+0x12a>
 8005fe6:	6833      	ldr	r3, [r6, #0]
 8005fe8:	6825      	ldr	r5, [r4, #0]
 8005fea:	1d18      	adds	r0, r3, #4
 8005fec:	6961      	ldr	r1, [r4, #20]
 8005fee:	6030      	str	r0, [r6, #0]
 8005ff0:	062e      	lsls	r6, r5, #24
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	d501      	bpl.n	8005ffa <_printf_i+0x1c2>
 8005ff6:	6019      	str	r1, [r3, #0]
 8005ff8:	e002      	b.n	8006000 <_printf_i+0x1c8>
 8005ffa:	0668      	lsls	r0, r5, #25
 8005ffc:	d5fb      	bpl.n	8005ff6 <_printf_i+0x1be>
 8005ffe:	8019      	strh	r1, [r3, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	4616      	mov	r6, r2
 8006004:	6123      	str	r3, [r4, #16]
 8006006:	e7bc      	b.n	8005f82 <_printf_i+0x14a>
 8006008:	6833      	ldr	r3, [r6, #0]
 800600a:	2100      	movs	r1, #0
 800600c:	1d1a      	adds	r2, r3, #4
 800600e:	6032      	str	r2, [r6, #0]
 8006010:	681e      	ldr	r6, [r3, #0]
 8006012:	6862      	ldr	r2, [r4, #4]
 8006014:	4630      	mov	r0, r6
 8006016:	f000 f9b9 	bl	800638c <memchr>
 800601a:	b108      	cbz	r0, 8006020 <_printf_i+0x1e8>
 800601c:	1b80      	subs	r0, r0, r6
 800601e:	6060      	str	r0, [r4, #4]
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	6123      	str	r3, [r4, #16]
 8006024:	2300      	movs	r3, #0
 8006026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800602a:	e7aa      	b.n	8005f82 <_printf_i+0x14a>
 800602c:	4632      	mov	r2, r6
 800602e:	4649      	mov	r1, r9
 8006030:	4640      	mov	r0, r8
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	47d0      	blx	sl
 8006036:	3001      	adds	r0, #1
 8006038:	d0ad      	beq.n	8005f96 <_printf_i+0x15e>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	079b      	lsls	r3, r3, #30
 800603e:	d413      	bmi.n	8006068 <_printf_i+0x230>
 8006040:	68e0      	ldr	r0, [r4, #12]
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	4298      	cmp	r0, r3
 8006046:	bfb8      	it	lt
 8006048:	4618      	movlt	r0, r3
 800604a:	e7a6      	b.n	8005f9a <_printf_i+0x162>
 800604c:	2301      	movs	r3, #1
 800604e:	4632      	mov	r2, r6
 8006050:	4649      	mov	r1, r9
 8006052:	4640      	mov	r0, r8
 8006054:	47d0      	blx	sl
 8006056:	3001      	adds	r0, #1
 8006058:	d09d      	beq.n	8005f96 <_printf_i+0x15e>
 800605a:	3501      	adds	r5, #1
 800605c:	68e3      	ldr	r3, [r4, #12]
 800605e:	9903      	ldr	r1, [sp, #12]
 8006060:	1a5b      	subs	r3, r3, r1
 8006062:	42ab      	cmp	r3, r5
 8006064:	dcf2      	bgt.n	800604c <_printf_i+0x214>
 8006066:	e7eb      	b.n	8006040 <_printf_i+0x208>
 8006068:	2500      	movs	r5, #0
 800606a:	f104 0619 	add.w	r6, r4, #25
 800606e:	e7f5      	b.n	800605c <_printf_i+0x224>
 8006070:	08006a29 	.word	0x08006a29
 8006074:	08006a3a 	.word	0x08006a3a

08006078 <__sflush_r>:
 8006078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	0716      	lsls	r6, r2, #28
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	d454      	bmi.n	8006130 <__sflush_r+0xb8>
 8006086:	684b      	ldr	r3, [r1, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dc02      	bgt.n	8006092 <__sflush_r+0x1a>
 800608c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd48      	ble.n	8006124 <__sflush_r+0xac>
 8006092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006094:	2e00      	cmp	r6, #0
 8006096:	d045      	beq.n	8006124 <__sflush_r+0xac>
 8006098:	2300      	movs	r3, #0
 800609a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800609e:	682f      	ldr	r7, [r5, #0]
 80060a0:	6a21      	ldr	r1, [r4, #32]
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	d030      	beq.n	8006108 <__sflush_r+0x90>
 80060a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	0759      	lsls	r1, r3, #29
 80060ac:	d505      	bpl.n	80060ba <__sflush_r+0x42>
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060b4:	b10b      	cbz	r3, 80060ba <__sflush_r+0x42>
 80060b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	4628      	mov	r0, r5
 80060be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060c0:	6a21      	ldr	r1, [r4, #32]
 80060c2:	47b0      	blx	r6
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	d106      	bne.n	80060d8 <__sflush_r+0x60>
 80060ca:	6829      	ldr	r1, [r5, #0]
 80060cc:	291d      	cmp	r1, #29
 80060ce:	d82b      	bhi.n	8006128 <__sflush_r+0xb0>
 80060d0:	4a28      	ldr	r2, [pc, #160]	@ (8006174 <__sflush_r+0xfc>)
 80060d2:	410a      	asrs	r2, r1
 80060d4:	07d6      	lsls	r6, r2, #31
 80060d6:	d427      	bmi.n	8006128 <__sflush_r+0xb0>
 80060d8:	2200      	movs	r2, #0
 80060da:	6062      	str	r2, [r4, #4]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	04d9      	lsls	r1, r3, #19
 80060e0:	6022      	str	r2, [r4, #0]
 80060e2:	d504      	bpl.n	80060ee <__sflush_r+0x76>
 80060e4:	1c42      	adds	r2, r0, #1
 80060e6:	d101      	bne.n	80060ec <__sflush_r+0x74>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b903      	cbnz	r3, 80060ee <__sflush_r+0x76>
 80060ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80060ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f0:	602f      	str	r7, [r5, #0]
 80060f2:	b1b9      	cbz	r1, 8006124 <__sflush_r+0xac>
 80060f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d002      	beq.n	8006102 <__sflush_r+0x8a>
 80060fc:	4628      	mov	r0, r5
 80060fe:	f7ff fa9b 	bl	8005638 <_free_r>
 8006102:	2300      	movs	r3, #0
 8006104:	6363      	str	r3, [r4, #52]	@ 0x34
 8006106:	e00d      	b.n	8006124 <__sflush_r+0xac>
 8006108:	2301      	movs	r3, #1
 800610a:	4628      	mov	r0, r5
 800610c:	47b0      	blx	r6
 800610e:	4602      	mov	r2, r0
 8006110:	1c50      	adds	r0, r2, #1
 8006112:	d1c9      	bne.n	80060a8 <__sflush_r+0x30>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0c6      	beq.n	80060a8 <__sflush_r+0x30>
 800611a:	2b1d      	cmp	r3, #29
 800611c:	d001      	beq.n	8006122 <__sflush_r+0xaa>
 800611e:	2b16      	cmp	r3, #22
 8006120:	d11d      	bne.n	800615e <__sflush_r+0xe6>
 8006122:	602f      	str	r7, [r5, #0]
 8006124:	2000      	movs	r0, #0
 8006126:	e021      	b.n	800616c <__sflush_r+0xf4>
 8006128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800612c:	b21b      	sxth	r3, r3
 800612e:	e01a      	b.n	8006166 <__sflush_r+0xee>
 8006130:	690f      	ldr	r7, [r1, #16]
 8006132:	2f00      	cmp	r7, #0
 8006134:	d0f6      	beq.n	8006124 <__sflush_r+0xac>
 8006136:	0793      	lsls	r3, r2, #30
 8006138:	bf18      	it	ne
 800613a:	2300      	movne	r3, #0
 800613c:	680e      	ldr	r6, [r1, #0]
 800613e:	bf08      	it	eq
 8006140:	694b      	ldreq	r3, [r1, #20]
 8006142:	1bf6      	subs	r6, r6, r7
 8006144:	600f      	str	r7, [r1, #0]
 8006146:	608b      	str	r3, [r1, #8]
 8006148:	2e00      	cmp	r6, #0
 800614a:	ddeb      	ble.n	8006124 <__sflush_r+0xac>
 800614c:	4633      	mov	r3, r6
 800614e:	463a      	mov	r2, r7
 8006150:	4628      	mov	r0, r5
 8006152:	6a21      	ldr	r1, [r4, #32]
 8006154:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006158:	47e0      	blx	ip
 800615a:	2800      	cmp	r0, #0
 800615c:	dc07      	bgt.n	800616e <__sflush_r+0xf6>
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616e:	4407      	add	r7, r0
 8006170:	1a36      	subs	r6, r6, r0
 8006172:	e7e9      	b.n	8006148 <__sflush_r+0xd0>
 8006174:	dfbffffe 	.word	0xdfbffffe

08006178 <_fflush_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b913      	cbnz	r3, 8006188 <_fflush_r+0x10>
 8006182:	2500      	movs	r5, #0
 8006184:	4628      	mov	r0, r5
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	b118      	cbz	r0, 8006192 <_fflush_r+0x1a>
 800618a:	6a03      	ldr	r3, [r0, #32]
 800618c:	b90b      	cbnz	r3, 8006192 <_fflush_r+0x1a>
 800618e:	f7ff f813 	bl	80051b8 <__sinit>
 8006192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f3      	beq.n	8006182 <_fflush_r+0xa>
 800619a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800619c:	07d0      	lsls	r0, r2, #31
 800619e:	d404      	bmi.n	80061aa <_fflush_r+0x32>
 80061a0:	0599      	lsls	r1, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_fflush_r+0x32>
 80061a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061a6:	f7ff fa36 	bl	8005616 <__retarget_lock_acquire_recursive>
 80061aa:	4628      	mov	r0, r5
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7ff ff63 	bl	8006078 <__sflush_r>
 80061b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061b4:	4605      	mov	r5, r0
 80061b6:	07da      	lsls	r2, r3, #31
 80061b8:	d4e4      	bmi.n	8006184 <_fflush_r+0xc>
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	059b      	lsls	r3, r3, #22
 80061be:	d4e1      	bmi.n	8006184 <_fflush_r+0xc>
 80061c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061c2:	f7ff fa29 	bl	8005618 <__retarget_lock_release_recursive>
 80061c6:	e7dd      	b.n	8006184 <_fflush_r+0xc>

080061c8 <__swhatbuf_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	4615      	mov	r5, r2
 80061d2:	2900      	cmp	r1, #0
 80061d4:	461e      	mov	r6, r3
 80061d6:	b096      	sub	sp, #88	@ 0x58
 80061d8:	da0c      	bge.n	80061f4 <__swhatbuf_r+0x2c>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	2100      	movs	r1, #0
 80061de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061e2:	bf14      	ite	ne
 80061e4:	2340      	movne	r3, #64	@ 0x40
 80061e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061ea:	2000      	movs	r0, #0
 80061ec:	6031      	str	r1, [r6, #0]
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	b016      	add	sp, #88	@ 0x58
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	466a      	mov	r2, sp
 80061f6:	f000 f897 	bl	8006328 <_fstat_r>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	dbed      	blt.n	80061da <__swhatbuf_r+0x12>
 80061fe:	9901      	ldr	r1, [sp, #4]
 8006200:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006204:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006208:	4259      	negs	r1, r3
 800620a:	4159      	adcs	r1, r3
 800620c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006210:	e7eb      	b.n	80061ea <__swhatbuf_r+0x22>

08006212 <__smakebuf_r>:
 8006212:	898b      	ldrh	r3, [r1, #12]
 8006214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006216:	079d      	lsls	r5, r3, #30
 8006218:	4606      	mov	r6, r0
 800621a:	460c      	mov	r4, r1
 800621c:	d507      	bpl.n	800622e <__smakebuf_r+0x1c>
 800621e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	2301      	movs	r3, #1
 8006228:	6163      	str	r3, [r4, #20]
 800622a:	b003      	add	sp, #12
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	466a      	mov	r2, sp
 8006230:	ab01      	add	r3, sp, #4
 8006232:	f7ff ffc9 	bl	80061c8 <__swhatbuf_r>
 8006236:	9f00      	ldr	r7, [sp, #0]
 8006238:	4605      	mov	r5, r0
 800623a:	4639      	mov	r1, r7
 800623c:	4630      	mov	r0, r6
 800623e:	f7ff fa65 	bl	800570c <_malloc_r>
 8006242:	b948      	cbnz	r0, 8006258 <__smakebuf_r+0x46>
 8006244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006248:	059a      	lsls	r2, r3, #22
 800624a:	d4ee      	bmi.n	800622a <__smakebuf_r+0x18>
 800624c:	f023 0303 	bic.w	r3, r3, #3
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	e7e2      	b.n	800621e <__smakebuf_r+0xc>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800625e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	b15b      	cbz	r3, 8006282 <__smakebuf_r+0x70>
 800626a:	4630      	mov	r0, r6
 800626c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006270:	f000 f86c 	bl	800634c <_isatty_r>
 8006274:	b128      	cbz	r0, 8006282 <__smakebuf_r+0x70>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	431d      	orrs	r5, r3
 8006286:	81a5      	strh	r5, [r4, #12]
 8006288:	e7cf      	b.n	800622a <__smakebuf_r+0x18>

0800628a <_putc_r>:
 800628a:	b570      	push	{r4, r5, r6, lr}
 800628c:	460d      	mov	r5, r1
 800628e:	4614      	mov	r4, r2
 8006290:	4606      	mov	r6, r0
 8006292:	b118      	cbz	r0, 800629c <_putc_r+0x12>
 8006294:	6a03      	ldr	r3, [r0, #32]
 8006296:	b90b      	cbnz	r3, 800629c <_putc_r+0x12>
 8006298:	f7fe ff8e 	bl	80051b8 <__sinit>
 800629c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800629e:	07d8      	lsls	r0, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_putc_r+0x24>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	0599      	lsls	r1, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_putc_r+0x24>
 80062a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062aa:	f7ff f9b4 	bl	8005616 <__retarget_lock_acquire_recursive>
 80062ae:	68a3      	ldr	r3, [r4, #8]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	60a3      	str	r3, [r4, #8]
 80062b6:	da05      	bge.n	80062c4 <_putc_r+0x3a>
 80062b8:	69a2      	ldr	r2, [r4, #24]
 80062ba:	4293      	cmp	r3, r2
 80062bc:	db12      	blt.n	80062e4 <_putc_r+0x5a>
 80062be:	b2eb      	uxtb	r3, r5
 80062c0:	2b0a      	cmp	r3, #10
 80062c2:	d00f      	beq.n	80062e4 <_putc_r+0x5a>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	6022      	str	r2, [r4, #0]
 80062ca:	701d      	strb	r5, [r3, #0]
 80062cc:	b2ed      	uxtb	r5, r5
 80062ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062d0:	07da      	lsls	r2, r3, #31
 80062d2:	d405      	bmi.n	80062e0 <_putc_r+0x56>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	059b      	lsls	r3, r3, #22
 80062d8:	d402      	bmi.n	80062e0 <_putc_r+0x56>
 80062da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062dc:	f7ff f99c 	bl	8005618 <__retarget_lock_release_recursive>
 80062e0:	4628      	mov	r0, r5
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	4629      	mov	r1, r5
 80062e6:	4622      	mov	r2, r4
 80062e8:	4630      	mov	r0, r6
 80062ea:	f7ff f876 	bl	80053da <__swbuf_r>
 80062ee:	4605      	mov	r5, r0
 80062f0:	e7ed      	b.n	80062ce <_putc_r+0x44>

080062f2 <memmove>:
 80062f2:	4288      	cmp	r0, r1
 80062f4:	b510      	push	{r4, lr}
 80062f6:	eb01 0402 	add.w	r4, r1, r2
 80062fa:	d902      	bls.n	8006302 <memmove+0x10>
 80062fc:	4284      	cmp	r4, r0
 80062fe:	4623      	mov	r3, r4
 8006300:	d807      	bhi.n	8006312 <memmove+0x20>
 8006302:	1e43      	subs	r3, r0, #1
 8006304:	42a1      	cmp	r1, r4
 8006306:	d008      	beq.n	800631a <memmove+0x28>
 8006308:	f811 2b01 	ldrb.w	r2, [r1], #1
 800630c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006310:	e7f8      	b.n	8006304 <memmove+0x12>
 8006312:	4601      	mov	r1, r0
 8006314:	4402      	add	r2, r0
 8006316:	428a      	cmp	r2, r1
 8006318:	d100      	bne.n	800631c <memmove+0x2a>
 800631a:	bd10      	pop	{r4, pc}
 800631c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006320:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006324:	e7f7      	b.n	8006316 <memmove+0x24>
	...

08006328 <_fstat_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	2300      	movs	r3, #0
 800632c:	4d06      	ldr	r5, [pc, #24]	@ (8006348 <_fstat_r+0x20>)
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	4611      	mov	r1, r2
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	f7fc fbdb 	bl	8002af0 <_fstat>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d102      	bne.n	8006344 <_fstat_r+0x1c>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	b103      	cbz	r3, 8006344 <_fstat_r+0x1c>
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	bd38      	pop	{r3, r4, r5, pc}
 8006346:	bf00      	nop
 8006348:	20002f24 	.word	0x20002f24

0800634c <_isatty_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	2300      	movs	r3, #0
 8006350:	4d05      	ldr	r5, [pc, #20]	@ (8006368 <_isatty_r+0x1c>)
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fc fbd9 	bl	8002b0e <_isatty>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_isatty_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_isatty_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20002f24 	.word	0x20002f24

0800636c <_sbrk_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	2300      	movs	r3, #0
 8006370:	4d05      	ldr	r5, [pc, #20]	@ (8006388 <_sbrk_r+0x1c>)
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	f7fc fbe0 	bl	8002b3c <_sbrk>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_sbrk_r+0x1a>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_sbrk_r+0x1a>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	20002f24 	.word	0x20002f24

0800638c <memchr>:
 800638c:	4603      	mov	r3, r0
 800638e:	b510      	push	{r4, lr}
 8006390:	b2c9      	uxtb	r1, r1
 8006392:	4402      	add	r2, r0
 8006394:	4293      	cmp	r3, r2
 8006396:	4618      	mov	r0, r3
 8006398:	d101      	bne.n	800639e <memchr+0x12>
 800639a:	2000      	movs	r0, #0
 800639c:	e003      	b.n	80063a6 <memchr+0x1a>
 800639e:	7804      	ldrb	r4, [r0, #0]
 80063a0:	3301      	adds	r3, #1
 80063a2:	428c      	cmp	r4, r1
 80063a4:	d1f6      	bne.n	8006394 <memchr+0x8>
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <_realloc_r>:
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	4680      	mov	r8, r0
 80063ae:	4615      	mov	r5, r2
 80063b0:	460c      	mov	r4, r1
 80063b2:	b921      	cbnz	r1, 80063be <_realloc_r+0x16>
 80063b4:	4611      	mov	r1, r2
 80063b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ba:	f7ff b9a7 	b.w	800570c <_malloc_r>
 80063be:	b92a      	cbnz	r2, 80063cc <_realloc_r+0x24>
 80063c0:	f7ff f93a 	bl	8005638 <_free_r>
 80063c4:	2400      	movs	r4, #0
 80063c6:	4620      	mov	r0, r4
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063cc:	f000 f81a 	bl	8006404 <_malloc_usable_size_r>
 80063d0:	4285      	cmp	r5, r0
 80063d2:	4606      	mov	r6, r0
 80063d4:	d802      	bhi.n	80063dc <_realloc_r+0x34>
 80063d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063da:	d8f4      	bhi.n	80063c6 <_realloc_r+0x1e>
 80063dc:	4629      	mov	r1, r5
 80063de:	4640      	mov	r0, r8
 80063e0:	f7ff f994 	bl	800570c <_malloc_r>
 80063e4:	4607      	mov	r7, r0
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d0ec      	beq.n	80063c4 <_realloc_r+0x1c>
 80063ea:	42b5      	cmp	r5, r6
 80063ec:	462a      	mov	r2, r5
 80063ee:	4621      	mov	r1, r4
 80063f0:	bf28      	it	cs
 80063f2:	4632      	movcs	r2, r6
 80063f4:	f7ff f911 	bl	800561a <memcpy>
 80063f8:	4621      	mov	r1, r4
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7ff f91c 	bl	8005638 <_free_r>
 8006400:	463c      	mov	r4, r7
 8006402:	e7e0      	b.n	80063c6 <_realloc_r+0x1e>

08006404 <_malloc_usable_size_r>:
 8006404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006408:	1f18      	subs	r0, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfbc      	itt	lt
 800640e:	580b      	ldrlt	r3, [r1, r0]
 8006410:	18c0      	addlt	r0, r0, r3
 8006412:	4770      	bx	lr

08006414 <_init>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr

08006420 <_fini>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr
